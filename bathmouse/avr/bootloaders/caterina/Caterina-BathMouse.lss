
Caterina-BathMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00007e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e88  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001a6  008001a6  00000fc2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004543  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100a  00000000  00000000  0000579f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dcd  00000000  00000000  000067a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00008578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d55  00000000  00000000  00008cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d8e  00000000  00000000  0000aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000d7bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	5f c0       	rjmp	.+190    	; 0x70c0 <__ctors_end>
    7002:	00 00       	nop
    7004:	78 c0       	rjmp	.+240    	; 0x70f6 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	76 c0       	rjmp	.+236    	; 0x70f6 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	74 c0       	rjmp	.+232    	; 0x70f6 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	72 c0       	rjmp	.+228    	; 0x70f6 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	70 c0       	rjmp	.+224    	; 0x70f6 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	6e c0       	rjmp	.+220    	; 0x70f6 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	6c c0       	rjmp	.+216    	; 0x70f6 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	6a c0       	rjmp	.+212    	; 0x70f6 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	68 c0       	rjmp	.+208    	; 0x70f6 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	bb c4       	rjmp	.+2422   	; 0x79a0 <__vector_10>
    702a:	00 00       	nop
    702c:	64 c0       	rjmp	.+200    	; 0x70f6 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	62 c0       	rjmp	.+196    	; 0x70f6 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	60 c0       	rjmp	.+192    	; 0x70f6 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	5e c0       	rjmp	.+188    	; 0x70f6 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	5c c0       	rjmp	.+184    	; 0x70f6 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	5a c0       	rjmp	.+180    	; 0x70f6 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	e1 c0       	rjmp	.+450    	; 0x7208 <__vector_17>
    7046:	00 00       	nop
    7048:	56 c0       	rjmp	.+172    	; 0x70f6 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	54 c0       	rjmp	.+168    	; 0x70f6 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	52 c0       	rjmp	.+164    	; 0x70f6 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	50 c0       	rjmp	.+160    	; 0x70f6 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	4e c0       	rjmp	.+156    	; 0x70f6 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	4c c0       	rjmp	.+152    	; 0x70f6 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	4a c0       	rjmp	.+148    	; 0x70f6 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	48 c0       	rjmp	.+144    	; 0x70f6 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	46 c0       	rjmp	.+140    	; 0x70f6 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	44 c0       	rjmp	.+136    	; 0x70f6 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	42 c0       	rjmp	.+132    	; 0x70f6 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	40 c0       	rjmp	.+128    	; 0x70f6 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	3e c0       	rjmp	.+124    	; 0x70f6 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	3c c0       	rjmp	.+120    	; 0x70f6 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	3a c0       	rjmp	.+116    	; 0x70f6 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	38 c0       	rjmp	.+112    	; 0x70f6 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	36 c0       	rjmp	.+108    	; 0x70f6 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	34 c0       	rjmp	.+104    	; 0x70f6 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	32 c0       	rjmp	.+100    	; 0x70f6 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	30 c0       	rjmp	.+96     	; 0x70f6 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	2e c0       	rjmp	.+92     	; 0x70f6 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	2c c0       	rjmp	.+88     	; 0x70f6 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	2a c0       	rjmp	.+84     	; 0x70f6 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	28 c0       	rjmp	.+80     	; 0x70f6 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	26 c0       	rjmp	.+76     	; 0x70f6 <__bad_interrupt>
    70aa:	00 00       	nop
    70ac:	3f 3e       	cpi	r19, 0xEF	; 239
    70ae:	58 3e       	cpi	r21, 0xE8	; 232
    70b0:	ff 3e       	cpi	r31, 0xEF	; 239
    70b2:	58 3e       	cpi	r21, 0xE8	; 232
    70b4:	ff 3e       	cpi	r31, 0xEF	; 239
    70b6:	90 3e       	cpi	r25, 0xE0	; 224
    70b8:	b2 3e       	cpi	r27, 0xE2	; 226
    70ba:	ff 3e       	cpi	r31, 0xEF	; 239
    70bc:	d2 3e       	cpi	r29, 0xE2	; 226
    70be:	e4 3e       	cpi	r30, 0xE4	; 228

000070c0 <__ctors_end>:
    70c0:	11 24       	eor	r1, r1
    70c2:	1f be       	out	0x3f, r1	; 63
    70c4:	cf ef       	ldi	r28, 0xFF	; 255
    70c6:	da e0       	ldi	r29, 0x0A	; 10
    70c8:	de bf       	out	0x3e, r29	; 62
    70ca:	cd bf       	out	0x3d, r28	; 61

000070cc <__do_copy_data>:
    70cc:	11 e0       	ldi	r17, 0x01	; 1
    70ce:	a0 e0       	ldi	r26, 0x00	; 0
    70d0:	b1 e0       	ldi	r27, 0x01	; 1
    70d2:	e8 e8       	ldi	r30, 0x88	; 136
    70d4:	fe e7       	ldi	r31, 0x7E	; 126
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <__do_copy_data+0x10>
    70d8:	05 90       	lpm	r0, Z+
    70da:	0d 92       	st	X+, r0
    70dc:	a6 3a       	cpi	r26, 0xA6	; 166
    70de:	b1 07       	cpc	r27, r17
    70e0:	d9 f7       	brne	.-10     	; 0x70d8 <__do_copy_data+0xc>

000070e2 <__do_clear_bss>:
    70e2:	21 e0       	ldi	r18, 0x01	; 1
    70e4:	a6 ea       	ldi	r26, 0xA6	; 166
    70e6:	b1 e0       	ldi	r27, 0x01	; 1
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <.do_clear_bss_start>

000070ea <.do_clear_bss_loop>:
    70ea:	1d 92       	st	X+, r1

000070ec <.do_clear_bss_start>:
    70ec:	ac 3b       	cpi	r26, 0xBC	; 188
    70ee:	b2 07       	cpc	r27, r18
    70f0:	e1 f7       	brne	.-8      	; 0x70ea <.do_clear_bss_loop>
    70f2:	50 d3       	rcall	.+1696   	; 0x7794 <main>
    70f4:	c7 c6       	rjmp	.+3470   	; 0x7e84 <_exit>

000070f6 <__bad_interrupt>:
    70f6:	84 cf       	rjmp	.-248    	; 0x7000 <__vectors>

000070f8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70f8:	84 e0       	ldi	r24, 0x04	; 4
    70fa:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7102:	85 fd       	sbrc	r24, 5
    7104:	0d c0       	rjmp	.+26     	; 0x7120 <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7106:	80 91 e8 00 	lds	r24, 0x00E8
    710a:	8b 77       	andi	r24, 0x7B	; 123
    710c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7110:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7114:	82 fd       	sbrc	r24, 2
    7116:	f3 cf       	rjmp	.-26     	; 0x70fe <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7118:	8e b3       	in	r24, 0x1e	; 30
    711a:	81 11       	cpse	r24, r1
    711c:	f9 cf       	rjmp	.-14     	; 0x7110 <FetchNextCommandByte+0x18>
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7120:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7124:	08 95       	ret

00007126 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7126:	93 e0       	ldi	r25, 0x03	; 3
    7128:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    712c:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7130:	95 ff       	sbrs	r25, 5
    7132:	09 c0       	rjmp	.+18     	; 0x7146 <WriteNextResponseByte+0x20>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7134:	80 93 f1 00 	sts	0x00F1, r24

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7138:	84 e6       	ldi	r24, 0x64	; 100
    713a:	90 e0       	ldi	r25, 0x00	; 0
    713c:	90 93 ab 01 	sts	0x01AB, r25
    7140:	80 93 aa 01 	sts	0x01AA, r24
    7144:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7146:	90 91 e8 00 	lds	r25, 0x00E8
    714a:	9e 77       	andi	r25, 0x7E	; 126
    714c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7150:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7154:	90 fd       	sbrc	r25, 0
    7156:	ee cf       	rjmp	.-36     	; 0x7134 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7158:	9e b3       	in	r25, 0x1e	; 30
    715a:	91 11       	cpse	r25, r1
    715c:	f9 cf       	rjmp	.-14     	; 0x7150 <WriteNextResponseByte+0x2a>
    715e:	08 95       	ret

00007160 <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    7160:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    7162:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = 0;
    7166:	10 92 81 00 	sts	0x0081, r1
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    716a:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    716e:	10 92 84 00 	sts	0x0084, r1
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    7172:	81 e0       	ldi	r24, 0x01	; 1
    7174:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    7176:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    7178:	28 98       	cbi	0x05, 0	; 5
	TX_LED_OFF();
	RX_LED_OFF();

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    717a:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    717e:	08 95       	ret

00007180 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7180:	20 91 b0 01 	lds	r18, 0x01B0
    7184:	30 91 b1 01 	lds	r19, 0x01B1
    7188:	2f 5f       	subi	r18, 0xFF	; 255
    718a:	3f 4f       	sbci	r19, 0xFF	; 255
    718c:	30 93 b1 01 	sts	0x01B1, r19
    7190:	20 93 b0 01 	sts	0x01B0, r18
	uint8_t p = LLEDPulse >> 8;
    7194:	83 2f       	mov	r24, r19
	if (p > 127)
    7196:	37 ff       	sbrs	r19, 7
    7198:	02 c0       	rjmp	.+4      	; 0x719e <LEDPulse+0x1e>
		p = 254-p;
    719a:	8e ef       	ldi	r24, 0xFE	; 254
    719c:	83 1b       	sub	r24, r19
	p += p;
    719e:	88 0f       	add	r24, r24
	if (((uint8_t)LLEDPulse) > p)
    71a0:	82 17       	cp	r24, r18
    71a2:	10 f4       	brcc	.+4      	; 0x71a8 <LEDPulse+0x28>
		L_LED_OFF();
    71a4:	28 98       	cbi	0x05, 0	; 5
    71a6:	08 95       	ret
	else
		L_LED_ON();
    71a8:	28 9a       	sbi	0x05, 0	; 5
    71aa:	08 95       	ret

000071ac <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    71ac:	84 b7       	in	r24, 0x34	; 52
    71ae:	87 7f       	andi	r24, 0xF7	; 247
    71b0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    71b2:	0f b6       	in	r0, 0x3f	; 63
    71b4:	f8 94       	cli
    71b6:	a8 95       	wdr
    71b8:	80 91 60 00 	lds	r24, 0x0060
    71bc:	88 61       	ori	r24, 0x18	; 24
    71be:	80 93 60 00 	sts	0x0060, r24
    71c2:	10 92 60 00 	sts	0x0060, r1
    71c6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    71c8:	90 e8       	ldi	r25, 0x80	; 128
    71ca:	80 e0       	ldi	r24, 0x00	; 0
    71cc:	0f b6       	in	r0, 0x3f	; 63
    71ce:	f8 94       	cli
    71d0:	90 93 61 00 	sts	0x0061, r25
    71d4:	80 93 61 00 	sts	0x0061, r24
    71d8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    71da:	81 e0       	ldi	r24, 0x01	; 1
    71dc:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    71de:	82 e0       	ldi	r24, 0x02	; 2
    71e0:	85 bf       	out	0x35, r24	; 53
	
	LED_SETUP();
    71e2:	20 9a       	sbi	0x04, 0	; 4
    71e4:	27 9a       	sbi	0x04, 7	; 4
    71e6:	27 9a       	sbi	0x04, 7	; 4
	CPU_PRESCALE(0); 
    71e8:	e1 e6       	ldi	r30, 0x61	; 97
    71ea:	f0 e0       	ldi	r31, 0x00	; 0
    71ec:	90 83       	st	Z, r25
    71ee:	10 82       	st	Z, r1
	L_LED_OFF();
    71f0:	28 98       	cbi	0x05, 0	; 5
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    71f2:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 250;
    71f6:	9a ef       	ldi	r25, 0xFA	; 250
    71f8:	90 93 88 00 	sts	0x0088, r25
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    71fc:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    7200:	83 e0       	ldi	r24, 0x03	; 3
    7202:	80 93 81 00 	sts	0x0081, r24

	/* Initialize USB Subsystem */
	USB_Init();
    7206:	b4 c3       	rjmp	.+1896   	; 0x7970 <USB_Init>

00007208 <__vector_17>:
    7208:	1f 92       	push	r1
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    720a:	0f 92       	push	r0
    720c:	0f b6       	in	r0, 0x3f	; 63
    720e:	0f 92       	push	r0
    7210:	11 24       	eor	r1, r1
    7212:	2f 93       	push	r18
    7214:	8f 93       	push	r24
    7216:	9f 93       	push	r25
    7218:	ef 93       	push	r30
    721a:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    721c:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    7220:	10 92 84 00 	sts	0x0084, r1

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    7224:	80 91 aa 01 	lds	r24, 0x01AA
    7228:	90 91 ab 01 	lds	r25, 0x01AB
    722c:	00 97       	sbiw	r24, 0x00	; 0
    722e:	29 f0       	breq	.+10     	; 0x723a <__vector_17+0x32>
    7230:	01 97       	sbiw	r24, 0x01	; 1
    7232:	90 93 ab 01 	sts	0x01AB, r25
    7236:	80 93 aa 01 	sts	0x01AA, r24
		TX_LED_OFF();
	if (RxLEDPulse && !(--RxLEDPulse))
    723a:	80 91 a8 01 	lds	r24, 0x01A8
    723e:	90 91 a9 01 	lds	r25, 0x01A9
    7242:	00 97       	sbiw	r24, 0x00	; 0
    7244:	29 f0       	breq	.+10     	; 0x7250 <__vector_17+0x48>
    7246:	01 97       	sbiw	r24, 0x01	; 1
    7248:	90 93 a9 01 	sts	0x01A9, r25
    724c:	80 93 a8 01 	sts	0x01A8, r24
		RX_LED_OFF();
	
	if (pgm_read_word(0) != 0xFFFF)
    7250:	e0 e0       	ldi	r30, 0x00	; 0
    7252:	f0 e0       	ldi	r31, 0x00	; 0
    7254:	85 91       	lpm	r24, Z+
    7256:	94 91       	lpm	r25, Z
    7258:	01 96       	adiw	r24, 0x01	; 1
    725a:	49 f0       	breq	.+18     	; 0x726e <__vector_17+0x66>
		Timeout++;
    725c:	80 91 a6 01 	lds	r24, 0x01A6
    7260:	90 91 a7 01 	lds	r25, 0x01A7
    7264:	01 96       	adiw	r24, 0x01	; 1
    7266:	90 93 a7 01 	sts	0x01A7, r25
    726a:	80 93 a6 01 	sts	0x01A6, r24
}
    726e:	ff 91       	pop	r31
    7270:	ef 91       	pop	r30
    7272:	9f 91       	pop	r25
    7274:	8f 91       	pop	r24
    7276:	2f 91       	pop	r18
    7278:	0f 90       	pop	r0
    727a:	0f be       	out	0x3f, r0	; 63
    727c:	0f 90       	pop	r0
    727e:	1f 90       	pop	r1
    7280:	18 95       	reti

00007282 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7282:	42 e0       	ldi	r20, 0x02	; 2
    7284:	61 ec       	ldi	r22, 0xC1	; 193
    7286:	82 e0       	ldi	r24, 0x02	; 2
    7288:	08 d3       	rcall	.+1552   	; 0x789a <Endpoint_ConfigureEndpoint_Prv>
    728a:	42 e1       	ldi	r20, 0x12	; 18
    728c:	61 e8       	ldi	r22, 0x81	; 129
    728e:	83 e0       	ldi	r24, 0x03	; 3
    7290:	04 d3       	rcall	.+1544   	; 0x789a <Endpoint_ConfigureEndpoint_Prv>
    7292:	42 e1       	ldi	r20, 0x12	; 18
    7294:	60 e8       	ldi	r22, 0x80	; 128
    7296:	84 e0       	ldi	r24, 0x04	; 4
    7298:	00 c3       	rjmp	.+1536   	; 0x789a <Endpoint_ConfigureEndpoint_Prv>

0000729a <EVENT_USB_Device_ControlRequest>:
    729a:	80 91 b4 01 	lds	r24, 0x01B4
    729e:	98 2f       	mov	r25, r24
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    72a0:	9f 77       	andi	r25, 0x7F	; 127
    72a2:	91 32       	cpi	r25, 0x21	; 33
    72a4:	39 f5       	brne	.+78     	; 0x72f4 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    72a6:	90 91 b5 01 	lds	r25, 0x01B5
    72aa:	90 32       	cpi	r25, 0x20	; 32
    72ac:	91 f0       	breq	.+36     	; 0x72d2 <EVENT_USB_Device_ControlRequest+0x38>
    72ae:	91 32       	cpi	r25, 0x21	; 33
    72b0:	09 f5       	brne	.+66     	; 0x72f4 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    72b2:	81 3a       	cpi	r24, 0xA1	; 161
    72b4:	f9 f4       	brne	.+62     	; 0x72f4 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72b6:	80 91 e8 00 	lds	r24, 0x00E8
    72ba:	87 7f       	andi	r24, 0xF7	; 247
    72bc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72c0:	67 e0       	ldi	r22, 0x07	; 7
    72c2:	70 e0       	ldi	r23, 0x00	; 0
    72c4:	83 e0       	ldi	r24, 0x03	; 3
    72c6:	91 e0       	ldi	r25, 0x01	; 1
    72c8:	1c d4       	rcall	.+2104   	; 0x7b02 <Endpoint_Write_Control_Stream_LE>
    72ca:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72ce:	8b 77       	andi	r24, 0x7B	; 123
    72d0:	0f c0       	rjmp	.+30     	; 0x72f0 <EVENT_USB_Device_ControlRequest+0x56>
    72d2:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    72d4:	79 f4       	brne	.+30     	; 0x72f4 <EVENT_USB_Device_ControlRequest+0x5a>
    72d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72da:	87 7f       	andi	r24, 0xF7	; 247
    72dc:	80 93 e8 00 	sts	0x00E8, r24
    72e0:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72e2:	70 e0       	ldi	r23, 0x00	; 0
    72e4:	83 e0       	ldi	r24, 0x03	; 3
    72e6:	91 e0       	ldi	r25, 0x01	; 1
    72e8:	69 d4       	rcall	.+2258   	; 0x7bbc <Endpoint_Read_Control_Stream_LE>
    72ea:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72ee:	8e 77       	andi	r24, 0x7E	; 126
    72f0:	80 93 e8 00 	sts	0x00E8, r24
    72f4:	08 95       	ret

000072f6 <CDC_Task>:
    72f6:	6f 92       	push	r6
    72f8:	7f 92       	push	r7

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    72fa:	8f 92       	push	r8
    72fc:	9f 92       	push	r9
    72fe:	af 92       	push	r10
    7300:	bf 92       	push	r11
    7302:	cf 92       	push	r12
    7304:	df 92       	push	r13
    7306:	ef 92       	push	r14
    7308:	ff 92       	push	r15
    730a:	0f 93       	push	r16
    730c:	1f 93       	push	r17
    730e:	cf 93       	push	r28
    7310:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7312:	84 e0       	ldi	r24, 0x04	; 4
    7314:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7318:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    731c:	82 ff       	sbrs	r24, 2
    731e:	2b c2       	rjmp	.+1110   	; 0x7776 <CDC_Task+0x480>
	  return;
	  
	RX_LED_ON();
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7320:	84 e6       	ldi	r24, 0x64	; 100
    7322:	90 e0       	ldi	r25, 0x00	; 0
    7324:	90 93 a9 01 	sts	0x01A9, r25
    7328:	80 93 a8 01 	sts	0x01A8, r24

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    732c:	e5 de       	rcall	.-566    	; 0x70f8 <FetchNextCommandByte>
    732e:	c8 2f       	mov	r28, r24
    7330:	85 34       	cpi	r24, 0x45	; 69

	if (Command == 'E')
    7332:	81 f4       	brne	.+32     	; 0x7354 <CDC_Task+0x5e>
    7334:	8c e4       	ldi	r24, 0x4C	; 76
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    7336:	9d e1       	ldi	r25, 0x1D	; 29
    7338:	90 93 a7 01 	sts	0x01A7, r25
    733c:	80 93 a6 01 	sts	0x01A6, r24
    7340:	07 b6       	in	r0, 0x37	; 55
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    7342:	00 fc       	sbrc	r0, 0
    7344:	fd cf       	rjmp	.-6      	; 0x7340 <CDC_Task+0x4a>
    7346:	f9 99       	sbic	0x1f, 1	; 31
    7348:	fe cf       	rjmp	.-4      	; 0x7346 <CDC_Task+0x50>
    734a:	81 e1       	ldi	r24, 0x11	; 17
    734c:	80 93 57 00 	sts	0x0057, r24
    7350:	e8 95       	spm
    7352:	03 c0       	rjmp	.+6      	; 0x735a <CDC_Task+0x64>
    7354:	84 35       	cpi	r24, 0x54	; 84

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    7356:	21 f4       	brne	.+8      	; 0x7360 <CDC_Task+0x6a>
    7358:	cf de       	rcall	.-610    	; 0x70f8 <FetchNextCommandByte>
	{
		FetchNextCommandByte();
    735a:	8d e0       	ldi	r24, 0x0D	; 13
    735c:	e4 de       	rcall	.-568    	; 0x7126 <WriteNextResponseByte>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    735e:	e2 c1       	rjmp	.+964    	; 0x7724 <CDC_Task+0x42e>
    7360:	8c 34       	cpi	r24, 0x4C	; 76
    7362:	d9 f3       	breq	.-10     	; 0x735a <CDC_Task+0x64>
    7364:	80 35       	cpi	r24, 0x50	; 80
	}
	else if ((Command == 'L') || (Command == 'P'))
    7366:	c9 f3       	breq	.-14     	; 0x735a <CDC_Task+0x64>
    7368:	84 37       	cpi	r24, 0x74	; 116
    736a:	21 f4       	brne	.+8      	; 0x7374 <CDC_Task+0x7e>
    736c:	84 e4       	ldi	r24, 0x44	; 68
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    736e:	db de       	rcall	.-586    	; 0x7126 <WriteNextResponseByte>
    7370:	80 e0       	ldi	r24, 0x00	; 0
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    7372:	f4 cf       	rjmp	.-24     	; 0x735c <CDC_Task+0x66>
    7374:	81 36       	cpi	r24, 0x61	; 97
    7376:	11 f4       	brne	.+4      	; 0x737c <CDC_Task+0x86>
		WriteNextResponseByte(0x00);
    7378:	89 e5       	ldi	r24, 0x59	; 89
    737a:	f0 cf       	rjmp	.-32     	; 0x735c <CDC_Task+0x66>
	}
	else if (Command == 'a')
    737c:	81 34       	cpi	r24, 0x41	; 65
    737e:	91 f4       	brne	.+36     	; 0x73a4 <CDC_Task+0xae>
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    7380:	bb de       	rcall	.-650    	; 0x70f8 <FetchNextCommandByte>
    7382:	c8 2f       	mov	r28, r24
	}
	else if (Command == 'A')
    7384:	b9 de       	rcall	.-654    	; 0x70f8 <FetchNextCommandByte>
    7386:	90 e0       	ldi	r25, 0x00	; 0
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7388:	88 0f       	add	r24, r24
    738a:	99 1f       	adc	r25, r25
    738c:	2c 2f       	mov	r18, r28
		CurrAddress  |= (FetchNextCommandByte() << 1);
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	32 2f       	mov	r19, r18
    7392:	22 27       	eor	r18, r18
    7394:	33 0f       	add	r19, r19
    7396:	82 2b       	or	r24, r18
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7398:	93 2b       	or	r25, r19
    739a:	09 2e       	mov	r0, r25
    739c:	00 0c       	add	r0, r0
    739e:	aa 0b       	sbc	r26, r26
    73a0:	bb 0b       	sbc	r27, r27
		CurrAddress  |= (FetchNextCommandByte() << 1);
    73a2:	94 c1       	rjmp	.+808    	; 0x76cc <CDC_Task+0x3d6>
    73a4:	80 37       	cpi	r24, 0x70	; 112
    73a6:	11 f4       	brne	.+4      	; 0x73ac <CDC_Task+0xb6>
    73a8:	83 e5       	ldi	r24, 0x53	; 83
    73aa:	d8 cf       	rjmp	.-80     	; 0x735c <CDC_Task+0x66>
    73ac:	83 35       	cpi	r24, 0x53	; 83
    73ae:	49 f4       	brne	.+18     	; 0x73c2 <CDC_Task+0xcc>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    73b0:	cc e9       	ldi	r28, 0x9C	; 156
    73b2:	d1 e0       	ldi	r29, 0x01	; 1
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    73b4:	1c 2f       	mov	r17, r28
    73b6:	19 5f       	subi	r17, 0xF9	; 249
	}
	else if (Command == 'S')
    73b8:	89 91       	ld	r24, Y+
    73ba:	b5 de       	rcall	.-662    	; 0x7126 <WriteNextResponseByte>
    73bc:	1c 13       	cpse	r17, r28
    73be:	fc cf       	rjmp	.-8      	; 0x73b8 <CDC_Task+0xc2>
    73c0:	b1 c1       	rjmp	.+866    	; 0x7724 <CDC_Task+0x42e>
    73c2:	86 35       	cpi	r24, 0x56	; 86
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    73c4:	21 f4       	brne	.+8      	; 0x73ce <CDC_Task+0xd8>
    73c6:	81 e3       	ldi	r24, 0x31	; 49
    73c8:	ae de       	rcall	.-676    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    73ca:	80 e3       	ldi	r24, 0x30	; 48
    73cc:	c7 cf       	rjmp	.-114    	; 0x735c <CDC_Task+0x66>
    73ce:	83 37       	cpi	r24, 0x73	; 115
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    73d0:	31 f4       	brne	.+12     	; 0x73de <CDC_Task+0xe8>
    73d2:	87 e8       	ldi	r24, 0x87	; 135
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    73d4:	a8 de       	rcall	.-688    	; 0x7126 <WriteNextResponseByte>
    73d6:	85 e9       	ldi	r24, 0x95	; 149
    73d8:	a6 de       	rcall	.-692    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    73da:	8e e1       	ldi	r24, 0x1E	; 30
    73dc:	bf cf       	rjmp	.-130    	; 0x735c <CDC_Task+0x66>
	}
	else if (Command == 's')
    73de:	85 36       	cpi	r24, 0x65	; 101
    73e0:	b9 f4       	brne	.+46     	; 0x7410 <CDC_Task+0x11a>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    73e2:	e0 e0       	ldi	r30, 0x00	; 0
    73e4:	f0 e0       	ldi	r31, 0x00	; 0
    73e6:	83 e0       	ldi	r24, 0x03	; 3
		WriteNextResponseByte(AVR_SIGNATURE_2);
    73e8:	95 e0       	ldi	r25, 0x05	; 5
    73ea:	80 93 57 00 	sts	0x0057, r24
		WriteNextResponseByte(AVR_SIGNATURE_1);
    73ee:	e8 95       	spm
    73f0:	07 b6       	in	r0, 0x37	; 55
	}
	else if (Command == 'e')
    73f2:	00 fc       	sbrc	r0, 0
    73f4:	fd cf       	rjmp	.-6      	; 0x73f0 <CDC_Task+0xfa>
    73f6:	90 93 57 00 	sts	0x0057, r25
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    73fa:	e8 95       	spm
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    73fc:	07 b6       	in	r0, 0x37	; 55
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    73fe:	00 fc       	sbrc	r0, 0
    7400:	fd cf       	rjmp	.-6      	; 0x73fc <CDC_Task+0x106>
    7402:	e0 58       	subi	r30, 0x80	; 128
			boot_spm_busy_wait();
    7404:	ff 4f       	sbci	r31, 0xFF	; 255
    7406:	e1 15       	cp	r30, r1
    7408:	20 e7       	ldi	r18, 0x70	; 112
			boot_page_write(CurrFlashAddress);
    740a:	f2 07       	cpc	r31, r18
    740c:	71 f7       	brne	.-36     	; 0x73ea <CDC_Task+0xf4>
    740e:	a5 cf       	rjmp	.-182    	; 0x735a <CDC_Task+0x64>
			boot_spm_busy_wait();
    7410:	82 37       	cpi	r24, 0x72	; 114
    7412:	19 f4       	brne	.+6      	; 0x741a <CDC_Task+0x124>
    7414:	e1 e0       	ldi	r30, 0x01	; 1
    7416:	f0 e0       	ldi	r31, 0x00	; 0
    7418:	0e c0       	rjmp	.+28     	; 0x7436 <CDC_Task+0x140>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    741a:	86 34       	cpi	r24, 0x46	; 70
    741c:	19 f4       	brne	.+6      	; 0x7424 <CDC_Task+0x12e>
    741e:	e0 e0       	ldi	r30, 0x00	; 0
    7420:	f0 e0       	ldi	r31, 0x00	; 0
    7422:	09 c0       	rjmp	.+18     	; 0x7436 <CDC_Task+0x140>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    7424:	8e 34       	cpi	r24, 0x4E	; 78
    7426:	19 f4       	brne	.+6      	; 0x742e <CDC_Task+0x138>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7428:	e3 e0       	ldi	r30, 0x03	; 3
    742a:	f0 e0       	ldi	r31, 0x00	; 0
    742c:	04 c0       	rjmp	.+8      	; 0x7436 <CDC_Task+0x140>
	}
	else if (Command == 'F')
    742e:	81 35       	cpi	r24, 0x51	; 81
    7430:	39 f4       	brne	.+14     	; 0x7440 <CDC_Task+0x14a>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7432:	e2 e0       	ldi	r30, 0x02	; 2
    7434:	f0 e0       	ldi	r31, 0x00	; 0
    7436:	89 e0       	ldi	r24, 0x09	; 9
	}
	else if (Command == 'N')
    7438:	80 93 57 00 	sts	0x0057, r24
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    743c:	84 91       	lpm	r24, Z
    743e:	8e cf       	rjmp	.-228    	; 0x735c <CDC_Task+0x66>
    7440:	82 36       	cpi	r24, 0x62	; 98
	}
	else if (Command == 'Q')
    7442:	31 f4       	brne	.+12     	; 0x7450 <CDC_Task+0x15a>
    7444:	89 e5       	ldi	r24, 0x59	; 89
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7446:	6f de       	rcall	.-802    	; 0x7126 <WriteNextResponseByte>
    7448:	80 e0       	ldi	r24, 0x00	; 0
    744a:	6d de       	rcall	.-806    	; 0x7126 <WriteNextResponseByte>
    744c:	80 e8       	ldi	r24, 0x80	; 128
    744e:	86 cf       	rjmp	.-244    	; 0x735c <CDC_Task+0x66>
    7450:	82 34       	cpi	r24, 0x42	; 66
    7452:	19 f0       	breq	.+6      	; 0x745a <CDC_Task+0x164>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    7454:	87 36       	cpi	r24, 0x67	; 103
    7456:	09 f0       	breq	.+2      	; 0x745a <CDC_Task+0x164>
	{
		WriteNextResponseByte('Y');
    7458:	d1 c0       	rjmp	.+418    	; 0x75fc <CDC_Task+0x306>
    745a:	10 92 a7 01 	sts	0x01A7, r1

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    745e:	10 92 a6 01 	sts	0x01A6, r1
    7462:	4a de       	rcall	.-876    	; 0x70f8 <FetchNextCommandByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7464:	08 2f       	mov	r16, r24
    7466:	48 de       	rcall	.-880    	; 0x70f8 <FetchNextCommandByte>
	}
	else if ((Command == 'B') || (Command == 'g'))
    7468:	d8 2f       	mov	r29, r24
    746a:	46 de       	rcall	.-884    	; 0x70f8 <FetchNextCommandByte>
    746c:	18 2f       	mov	r17, r24
    746e:	8b eb       	ldi	r24, 0xBB	; 187
    7470:	81 0f       	add	r24, r17
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    7472:	82 30       	cpi	r24, 0x02	; 2
    7474:	10 f0       	brcs	.+4      	; 0x747a <CDC_Task+0x184>
    7476:	8f e3       	ldi	r24, 0x3F	; 63
    7478:	71 cf       	rjmp	.-286    	; 0x735c <CDC_Task+0x66>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    747a:	2d 2f       	mov	r18, r29
    747c:	30 e0       	ldi	r19, 0x00	; 0
    747e:	30 2b       	or	r19, r16
	BlockSize |=  FetchNextCommandByte();
    7480:	10 92 6f 00 	sts	0x006F, r1
    7484:	c7 36       	cpi	r28, 0x67	; 103

	MemoryType =  FetchNextCommandByte();
    7486:	09 f0       	breq	.+2      	; 0x748a <CDC_Task+0x194>
    7488:	43 c0       	rjmp	.+134    	; 0x7510 <CDC_Task+0x21a>
    748a:	81 e1       	ldi	r24, 0x11	; 17

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    748c:	80 93 57 00 	sts	0x0057, r24
    7490:	e8 95       	spm
    7492:	e9 01       	movw	r28, r18
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    7494:	00 e0       	ldi	r16, 0x00	; 0
    7496:	bb 24       	eor	r11, r11
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7498:	b3 94       	inc	r11
    749a:	20 97       	sbiw	r28, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
    749c:	09 f4       	brne	.+2      	; 0x74a0 <CDC_Task+0x1aa>
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    749e:	aa c0       	rjmp	.+340    	; 0x75f4 <CDC_Task+0x2fe>
    74a0:	c0 90 ac 01 	lds	r12, 0x01AC

	/* Check if command is to read memory */
	if (Command == 'g')
    74a4:	d0 90 ad 01 	lds	r13, 0x01AD
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    74a8:	e0 90 ae 01 	lds	r14, 0x01AE
    74ac:	f0 90 af 01 	lds	r15, 0x01AF
    74b0:	16 34       	cpi	r17, 0x46	; 70
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    74b2:	b9 f4       	brne	.+46     	; 0x74e2 <CDC_Task+0x1ec>

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    74b4:	e0 2f       	mov	r30, r16
    74b6:	f0 e0       	ldi	r31, 0x00	; 0
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74b8:	ec 29       	or	r30, r12
    74ba:	fd 29       	or	r31, r13
    74bc:	84 91       	lpm	r24, Z
    74be:	33 de       	rcall	.-922    	; 0x7126 <WriteNextResponseByte>
    74c0:	00 23       	and	r16, r16
    74c2:	69 f0       	breq	.+26     	; 0x74de <CDC_Task+0x1e8>
    74c4:	82 e0       	ldi	r24, 0x02	; 2
    74c6:	c8 0e       	add	r12, r24
    74c8:	d1 1c       	adc	r13, r1
    74ca:	e1 1c       	adc	r14, r1
    74cc:	f1 1c       	adc	r15, r1
		{
			if (MemoryType == 'F')
    74ce:	c0 92 ac 01 	sts	0x01AC, r12
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    74d2:	d0 92 ad 01 	sts	0x01AD, r13
    74d6:	e0 92 ae 01 	sts	0x01AE, r14
    74da:	f0 92 af 01 	sts	0x01AF, r15
    74de:	0b 25       	eor	r16, r11
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    74e0:	15 c0       	rjmp	.+42     	; 0x750c <CDC_Task+0x216>
    74e2:	d7 01       	movw	r26, r14
				  CurrAddress += 2;
    74e4:	c6 01       	movw	r24, r12
    74e6:	b6 95       	lsr	r27
    74e8:	a7 95       	ror	r26
    74ea:	97 95       	ror	r25
    74ec:	87 95       	ror	r24
    74ee:	b4 d4       	rcall	.+2408   	; 0x7e58 <eeprom_read_byte>
    74f0:	1a de       	rcall	.-972    	; 0x7126 <WriteNextResponseByte>
    74f2:	e2 e0       	ldi	r30, 0x02	; 2
    74f4:	ce 0e       	add	r12, r30
    74f6:	d1 1c       	adc	r13, r1
    74f8:	e1 1c       	adc	r14, r1
    74fa:	f1 1c       	adc	r15, r1
    74fc:	c0 92 ac 01 	sts	0x01AC, r12

				HighByte = !HighByte;
    7500:	d0 92 ad 01 	sts	0x01AD, r13
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7504:	e0 92 ae 01 	sts	0x01AE, r14
    7508:	f0 92 af 01 	sts	0x01AF, r15
    750c:	21 97       	sbiw	r28, 0x01	; 1
    750e:	c5 cf       	rjmp	.-118    	; 0x749a <CDC_Task+0x1a4>
    7510:	80 90 ac 01 	lds	r8, 0x01AC
    7514:	90 90 ad 01 	lds	r9, 0x01AD

				/* Increment the address counter after use */
				CurrAddress += 2;
    7518:	a0 90 ae 01 	lds	r10, 0x01AE
    751c:	b0 90 af 01 	lds	r11, 0x01AF
    7520:	16 34       	cpi	r17, 0x46	; 70
    7522:	41 f4       	brne	.+16     	; 0x7534 <CDC_Task+0x23e>
    7524:	83 e0       	ldi	r24, 0x03	; 3
    7526:	f4 01       	movw	r30, r8
    7528:	80 93 57 00 	sts	0x0057, r24
    752c:	e8 95       	spm
    752e:	07 b6       	in	r0, 0x37	; 55
    7530:	00 fc       	sbrc	r0, 0
    7532:	fd cf       	rjmp	.-6      	; 0x752e <CDC_Task+0x238>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    7534:	e9 01       	movw	r28, r18
    7536:	71 2c       	mov	r7, r1
    7538:	00 e0       	ldi	r16, 0x00	; 0
    753a:	66 24       	eor	r6, r6
    753c:	63 94       	inc	r6
    753e:	20 97       	sbiw	r28, 0x00	; 0
    7540:	09 f4       	brne	.+2      	; 0x7544 <CDC_Task+0x24e>
    7542:	4c c0       	rjmp	.+152    	; 0x75dc <CDC_Task+0x2e6>

		if (MemoryType == 'F')
    7544:	16 34       	cpi	r17, 0x46	; 70
    7546:	31 f5       	brne	.+76     	; 0x7594 <CDC_Task+0x29e>
		{
			boot_page_erase(PageStartAddress);
    7548:	00 23       	and	r16, r16
    754a:	01 f1       	breq	.+64     	; 0x758c <CDC_Task+0x296>
    754c:	c0 90 ac 01 	lds	r12, 0x01AC
    7550:	d0 90 ad 01 	lds	r13, 0x01AD
			boot_spm_busy_wait();
    7554:	e0 90 ae 01 	lds	r14, 0x01AE
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    7558:	f0 90 af 01 	lds	r15, 0x01AF
    755c:	cd dd       	rcall	.-1126   	; 0x70f8 <FetchNextCommandByte>
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    755e:	27 2d       	mov	r18, r7
    7560:	30 e0       	ldi	r19, 0x00	; 0
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    7562:	38 2b       	or	r19, r24
    7564:	f6 01       	movw	r30, r12
    7566:	09 01       	movw	r0, r18
		{
			if (MemoryType == 'F')
    7568:	60 92 57 00 	sts	0x0057, r6
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    756c:	e8 95       	spm
    756e:	11 24       	eor	r1, r1
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7570:	f2 e0       	ldi	r31, 0x02	; 2
    7572:	cf 0e       	add	r12, r31
    7574:	d1 1c       	adc	r13, r1
    7576:	e1 1c       	adc	r14, r1
    7578:	f1 1c       	adc	r15, r1
    757a:	c0 92 ac 01 	sts	0x01AC, r12
    757e:	d0 92 ad 01 	sts	0x01AD, r13
    7582:	e0 92 ae 01 	sts	0x01AE, r14
    7586:	f0 92 af 01 	sts	0x01AF, r15
    758a:	02 c0       	rjmp	.+4      	; 0x7590 <CDC_Task+0x29a>
    758c:	b5 dd       	rcall	.-1174   	; 0x70f8 <FetchNextCommandByte>
    758e:	78 2e       	mov	r7, r24
    7590:	06 25       	eor	r16, r6
    7592:	22 c0       	rjmp	.+68     	; 0x75d8 <CDC_Task+0x2e2>
    7594:	b1 dd       	rcall	.-1182   	; 0x70f8 <FetchNextCommandByte>

					/* Increment the address counter after use */
					CurrAddress += 2;
    7596:	68 2f       	mov	r22, r24
    7598:	80 91 ac 01 	lds	r24, 0x01AC
    759c:	90 91 ad 01 	lds	r25, 0x01AD
    75a0:	a0 91 ae 01 	lds	r26, 0x01AE
    75a4:	b0 91 af 01 	lds	r27, 0x01AF
    75a8:	b6 95       	lsr	r27
    75aa:	a7 95       	ror	r26
    75ac:	97 95       	ror	r25
    75ae:	87 95       	ror	r24
    75b0:	5b d4       	rcall	.+2230   	; 0x7e68 <eeprom_write_byte>
				}
				else
				{
					LowByte = FetchNextCommandByte();
    75b2:	80 91 ac 01 	lds	r24, 0x01AC
    75b6:	90 91 ad 01 	lds	r25, 0x01AD
				}
				
				HighByte = !HighByte;
    75ba:	a0 91 ae 01 	lds	r26, 0x01AE
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75be:	b0 91 af 01 	lds	r27, 0x01AF
    75c2:	02 96       	adiw	r24, 0x02	; 2
    75c4:	a1 1d       	adc	r26, r1
    75c6:	b1 1d       	adc	r27, r1
    75c8:	80 93 ac 01 	sts	0x01AC, r24
    75cc:	90 93 ad 01 	sts	0x01AD, r25
    75d0:	a0 93 ae 01 	sts	0x01AE, r26
    75d4:	b0 93 af 01 	sts	0x01AF, r27
    75d8:	21 97       	sbiw	r28, 0x01	; 1
    75da:	b1 cf       	rjmp	.-158    	; 0x753e <CDC_Task+0x248>
    75dc:	16 34       	cpi	r17, 0x46	; 70

				/* Increment the address counter after use */
				CurrAddress += 2;
    75de:	41 f4       	brne	.+16     	; 0x75f0 <CDC_Task+0x2fa>
    75e0:	85 e0       	ldi	r24, 0x05	; 5
    75e2:	f4 01       	movw	r30, r8
    75e4:	80 93 57 00 	sts	0x0057, r24
    75e8:	e8 95       	spm
    75ea:	07 b6       	in	r0, 0x37	; 55
    75ec:	00 fc       	sbrc	r0, 0
    75ee:	fd cf       	rjmp	.-6      	; 0x75ea <CDC_Task+0x2f4>
    75f0:	8d e0       	ldi	r24, 0x0D	; 13
    75f2:	99 dd       	rcall	.-1230   	; 0x7126 <WriteNextResponseByte>
    75f4:	82 e0       	ldi	r24, 0x02	; 2
    75f6:	80 93 6f 00 	sts	0x006F, r24
    75fa:	94 c0       	rjmp	.+296    	; 0x7724 <CDC_Task+0x42e>
    75fc:	83 34       	cpi	r24, 0x43	; 67
    75fe:	71 f4       	brne	.+28     	; 0x761c <CDC_Task+0x326>
    7600:	c0 91 ac 01 	lds	r28, 0x01AC
    7604:	d0 91 ad 01 	lds	r29, 0x01AD
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    7608:	77 dd       	rcall	.-1298   	; 0x70f8 <FetchNextCommandByte>
    760a:	90 e0       	ldi	r25, 0x00	; 0
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    760c:	21 e0       	ldi	r18, 0x01	; 1
    760e:	fe 01       	movw	r30, r28
    7610:	0c 01       	movw	r0, r24
    7612:	20 93 57 00 	sts	0x0057, r18

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    7616:	e8 95       	spm
    7618:	11 24       	eor	r1, r1
    761a:	9f ce       	rjmp	.-706    	; 0x735a <CDC_Task+0x64>
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    761c:	83 36       	cpi	r24, 0x63	; 99
    761e:	01 f5       	brne	.+64     	; 0x7660 <CDC_Task+0x36a>
    7620:	c0 90 ac 01 	lds	r12, 0x01AC
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    7624:	d0 90 ad 01 	lds	r13, 0x01AD
    7628:	e0 90 ae 01 	lds	r14, 0x01AE
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    762c:	f0 90 af 01 	lds	r15, 0x01AF
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7630:	63 dd       	rcall	.-1338   	; 0x70f8 <FetchNextCommandByte>
    7632:	f6 01       	movw	r30, r12
    7634:	e1 60       	ori	r30, 0x01	; 1
    7636:	90 e0       	ldi	r25, 0x00	; 0
    7638:	21 e0       	ldi	r18, 0x01	; 1
    763a:	0c 01       	movw	r0, r24
    763c:	20 93 57 00 	sts	0x0057, r18
    7640:	e8 95       	spm
    7642:	11 24       	eor	r1, r1
    7644:	f2 e0       	ldi	r31, 0x02	; 2
    7646:	cf 0e       	add	r12, r31
    7648:	d1 1c       	adc	r13, r1
    764a:	e1 1c       	adc	r14, r1

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    764c:	f1 1c       	adc	r15, r1
    764e:	c0 92 ac 01 	sts	0x01AC, r12
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7652:	d0 92 ad 01 	sts	0x01AD, r13
    7656:	e0 92 ae 01 	sts	0x01AE, r14
    765a:	f0 92 af 01 	sts	0x01AF, r15
    765e:	7d ce       	rjmp	.-774    	; 0x735a <CDC_Task+0x64>
    7660:	8d 36       	cpi	r24, 0x6D	; 109
    7662:	61 f4       	brne	.+24     	; 0x767c <CDC_Task+0x386>
    7664:	e0 91 ac 01 	lds	r30, 0x01AC
    7668:	f0 91 ad 01 	lds	r31, 0x01AD
    766c:	85 e0       	ldi	r24, 0x05	; 5
    766e:	80 93 57 00 	sts	0x0057, r24
    7672:	e8 95       	spm
    7674:	07 b6       	in	r0, 0x37	; 55

		// Increment the address 
		CurrAddress += 2;
    7676:	00 fc       	sbrc	r0, 0
    7678:	fd cf       	rjmp	.-6      	; 0x7674 <CDC_Task+0x37e>
    767a:	6f ce       	rjmp	.-802    	; 0x735a <CDC_Task+0x64>
    767c:	82 35       	cpi	r24, 0x52	; 82
    767e:	51 f4       	brne	.+20     	; 0x7694 <CDC_Task+0x39e>
    7680:	e0 91 ac 01 	lds	r30, 0x01AC
    7684:	f0 91 ad 01 	lds	r31, 0x01AD
    7688:	c5 91       	lpm	r28, Z+
    768a:	d4 91       	lpm	r29, Z
    768c:	8d 2f       	mov	r24, r29
    768e:	4b dd       	rcall	.-1386   	; 0x7126 <WriteNextResponseByte>
    7690:	8c 2f       	mov	r24, r28

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    7692:	64 ce       	rjmp	.-824    	; 0x735c <CDC_Task+0x66>
    7694:	84 34       	cpi	r24, 0x44	; 68
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    7696:	19 f5       	brne	.+70     	; 0x76de <CDC_Task+0x3e8>
    7698:	2f dd       	rcall	.-1442   	; 0x70f8 <FetchNextCommandByte>
    769a:	68 2f       	mov	r22, r24
    769c:	80 91 ac 01 	lds	r24, 0x01AC
    76a0:	90 91 ad 01 	lds	r25, 0x01AD
    76a4:	a0 91 ae 01 	lds	r26, 0x01AE

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    76a8:	b0 91 af 01 	lds	r27, 0x01AF
    76ac:	b6 95       	lsr	r27

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    76ae:	a7 95       	ror	r26
    76b0:	97 95       	ror	r25
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    76b2:	87 95       	ror	r24
    76b4:	d9 d3       	rcall	.+1970   	; 0x7e68 <eeprom_write_byte>
    76b6:	80 91 ac 01 	lds	r24, 0x01AC
    76ba:	90 91 ad 01 	lds	r25, 0x01AD
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    76be:	a0 91 ae 01 	lds	r26, 0x01AE
    76c2:	b0 91 af 01 	lds	r27, 0x01AF
		WriteNextResponseByte(ProgramWord & 0xFF);
    76c6:	02 96       	adiw	r24, 0x02	; 2
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    76c8:	a1 1d       	adc	r26, r1
    76ca:	b1 1d       	adc	r27, r1
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    76cc:	80 93 ac 01 	sts	0x01AC, r24
    76d0:	90 93 ad 01 	sts	0x01AD, r25
    76d4:	a0 93 ae 01 	sts	0x01AE, r26
    76d8:	b0 93 af 01 	sts	0x01AF, r27
    76dc:	3e ce       	rjmp	.-900    	; 0x735a <CDC_Task+0x64>
    76de:	84 36       	cpi	r24, 0x64	; 100
    76e0:	f1 f4       	brne	.+60     	; 0x771e <CDC_Task+0x428>
    76e2:	c0 90 ac 01 	lds	r12, 0x01AC
    76e6:	d0 90 ad 01 	lds	r13, 0x01AD
    76ea:	e0 90 ae 01 	lds	r14, 0x01AE

		// Increment the address after use
		CurrAddress += 2;
    76ee:	f0 90 af 01 	lds	r15, 0x01AF
    76f2:	d7 01       	movw	r26, r14
    76f4:	c6 01       	movw	r24, r12
    76f6:	b6 95       	lsr	r27
    76f8:	a7 95       	ror	r26
    76fa:	97 95       	ror	r25
    76fc:	87 95       	ror	r24
    76fe:	ac d3       	rcall	.+1880   	; 0x7e58 <eeprom_read_byte>
    7700:	12 dd       	rcall	.-1500   	; 0x7126 <WriteNextResponseByte>
    7702:	22 e0       	ldi	r18, 0x02	; 2
    7704:	c2 0e       	add	r12, r18
    7706:	d1 1c       	adc	r13, r1
    7708:	e1 1c       	adc	r14, r1
    770a:	f1 1c       	adc	r15, r1
    770c:	c0 92 ac 01 	sts	0x01AC, r12
    7710:	d0 92 ad 01 	sts	0x01AD, r13
    7714:	e0 92 ae 01 	sts	0x01AE, r14

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    7718:	f0 92 af 01 	sts	0x01AF, r15
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    771c:	03 c0       	rjmp	.+6      	; 0x7724 <CDC_Task+0x42e>
    771e:	8b 31       	cpi	r24, 0x1B	; 27
    7720:	09 f0       	breq	.+2      	; 0x7724 <CDC_Task+0x42e>
    7722:	a9 ce       	rjmp	.-686    	; 0x7476 <CDC_Task+0x180>
    7724:	83 e0       	ldi	r24, 0x03	; 3
    7726:	80 93 e9 00 	sts	0x00E9, r24
    772a:	90 91 e8 00 	lds	r25, 0x00E8
    772e:	80 91 e8 00 	lds	r24, 0x00E8
    7732:	8e 77       	andi	r24, 0x7E	; 126
    7734:	80 93 e8 00 	sts	0x00E8, r24
    7738:	95 fd       	sbrc	r25, 5
    773a:	11 c0       	rjmp	.+34     	; 0x775e <CDC_Task+0x468>
    773c:	80 91 e8 00 	lds	r24, 0x00E8

		// Increment the address after use 
		CurrAddress += 2;
    7740:	80 fd       	sbrc	r24, 0
    7742:	04 c0       	rjmp	.+8      	; 0x774c <CDC_Task+0x456>
    7744:	8e b3       	in	r24, 0x1e	; 30
    7746:	81 11       	cpse	r24, r1
    7748:	f9 cf       	rjmp	.-14     	; 0x773c <CDC_Task+0x446>
    774a:	15 c0       	rjmp	.+42     	; 0x7776 <CDC_Task+0x480>
    774c:	80 91 e8 00 	lds	r24, 0x00E8
    7750:	8e 77       	andi	r24, 0x7E	; 126
    7752:	80 93 e8 00 	sts	0x00E8, r24
    7756:	03 c0       	rjmp	.+6      	; 0x775e <CDC_Task+0x468>
    7758:	8e b3       	in	r24, 0x1e	; 30
	}
	#endif
	else if (Command != 27)
    775a:	88 23       	and	r24, r24
    775c:	61 f0       	breq	.+24     	; 0x7776 <CDC_Task+0x480>
    775e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7762:	80 ff       	sbrs	r24, 0
    7764:	f9 cf       	rjmp	.-14     	; 0x7758 <CDC_Task+0x462>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7766:	84 e0       	ldi	r24, 0x04	; 4
    7768:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    776c:	80 91 e8 00 	lds	r24, 0x00E8
    7770:	8b 77       	andi	r24, 0x7B	; 123
    7772:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    7776:	df 91       	pop	r29
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7778:	cf 91       	pop	r28
    777a:	1f 91       	pop	r17
	{
		while (!(Endpoint_IsINReady()))
    777c:	0f 91       	pop	r16
    777e:	ff 90       	pop	r15
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7780:	ef 90       	pop	r14
    7782:	df 90       	pop	r13
    7784:	cf 90       	pop	r12
    7786:	bf 90       	pop	r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7788:	af 90       	pop	r10
    778a:	9f 90       	pop	r9
    778c:	8f 90       	pop	r8
    778e:	7f 90       	pop	r7
    7790:	6f 90       	pop	r6
    7792:	08 95       	ret

00007794 <main>:
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    7794:	20 91 00 08 	lds	r18, 0x0800
    7798:	30 91 01 08 	lds	r19, 0x0801
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    779c:	10 92 01 08 	sts	0x0801, r1

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    77a0:	10 92 00 08 	sts	0x0800, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    77a4:	84 b7       	in	r24, 0x34	; 52
    77a6:	14 be       	out	0x34, r1	; 52
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    77a8:	0f b6       	in	r0, 0x3f	; 63
    77aa:	f8 94       	cli
    77ac:	a8 95       	wdr
    77ae:	90 91 60 00 	lds	r25, 0x0060
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    77b2:	98 61       	ori	r25, 0x18	; 24
    77b4:	90 93 60 00 	sts	0x0060, r25
    77b8:	10 92 60 00 	sts	0x0060, r1
    77bc:	0f be       	out	0x3f, r0	; 63
    77be:	81 fd       	sbrc	r24, 1
    77c0:	1a c0       	rjmp	.+52     	; 0x77f6 <main+0x62>
    77c2:	80 ff       	sbrs	r24, 0
    77c4:	09 c0       	rjmp	.+18     	; 0x77d8 <main+0x44>
    77c6:	e0 e0       	ldi	r30, 0x00	; 0
    77c8:	f0 e0       	ldi	r31, 0x00	; 0
    77ca:	45 91       	lpm	r20, Z+
    77cc:	54 91       	lpm	r21, Z
    77ce:	4f 3f       	cpi	r20, 0xFF	; 255
	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
	wdt_disable();
	
	if (mcusr_state & (1<<EXTRF)) {
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
    77d0:	5f 4f       	sbci	r21, 0xFF	; 255
    77d2:	11 f0       	breq	.+4      	; 0x77d8 <main+0x44>
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
    77d4:	c5 dc       	rcall	.-1654   	; 0x7160 <StartSketch>
    77d6:	0f c0       	rjmp	.+30     	; 0x77f6 <main+0x62>
    77d8:	83 ff       	sbrs	r24, 3
	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)) {	
    77da:	0d c0       	rjmp	.+26     	; 0x77f6 <main+0x62>
    77dc:	80 91 00 01 	lds	r24, 0x0100
    77e0:	90 91 01 01 	lds	r25, 0x0101
    77e4:	28 17       	cp	r18, r24
    77e6:	39 07       	cpc	r19, r25
    77e8:	31 f0       	breq	.+12     	; 0x77f6 <main+0x62>
    77ea:	e0 e0       	ldi	r30, 0x00	; 0
    77ec:	f0 e0       	ldi	r31, 0x00	; 0
    77ee:	85 91       	lpm	r24, Z+
    77f0:	94 91       	lpm	r25, Z
    77f2:	01 96       	adiw	r24, 0x01	; 1
    77f4:	79 f7       	brne	.-34     	; 0x77d4 <main+0x40>
    77f6:	da dc       	rcall	.-1612   	; 0x71ac <SetupHardware>
		// If it looks like an "accidental" watchdog reset then start the sketch.
		StartSketch();
	}
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    77f8:	78 94       	sei
    77fa:	10 92 a7 01 	sts	0x01A7, r1

	/* Enable global interrupts so that the USB stack can function */
	sei();
	
	Timeout = 0;
    77fe:	10 92 a6 01 	sts	0x01A6, r1
    7802:	80 91 02 01 	lds	r24, 0x0102
	
	while (RunBootloader)
    7806:	88 23       	and	r24, r24
    7808:	69 f0       	breq	.+26     	; 0x7824 <main+0x90>
    780a:	75 dd       	rcall	.-1302   	; 0x72f6 <CDC_Task>
    780c:	0e d3       	rcall	.+1564   	; 0x7e2a <USB_USBTask>
	{
		CDC_Task();
    780e:	80 91 a6 01 	lds	r24, 0x01A6
		USB_USBTask();
    7812:	90 91 a7 01 	lds	r25, 0x01A7
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    7816:	81 34       	cpi	r24, 0x41	; 65
    7818:	9f 41       	sbci	r25, 0x1F	; 31
    781a:	10 f0       	brcs	.+4      	; 0x7820 <main+0x8c>
    781c:	10 92 02 01 	sts	0x0102, r1
    7820:	af dc       	rcall	.-1698   	; 0x7180 <LEDPulse>
    7822:	ef cf       	rjmp	.-34     	; 0x7802 <main+0x6e>
			RunBootloader = false;
    7824:	80 91 e0 00 	lds	r24, 0x00E0

		LEDPulse();
    7828:	81 60       	ori	r24, 0x01	; 1
    782a:	80 93 e0 00 	sts	0x00E0, r24
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    782e:	98 dc       	rcall	.-1744   	; 0x7160 <StartSketch>
    7830:	80 e0       	ldi	r24, 0x00	; 0
    7832:	90 e0       	ldi	r25, 0x00	; 0
    7834:	08 95       	ret

00007836 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    7836:	29 2f       	mov	r18, r25
    7838:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    783a:	22 30       	cpi	r18, 0x02	; 2
    783c:	31 05       	cpc	r19, r1
    783e:	59 f0       	breq	.+22     	; 0x7856 <CALLBACK_USB_GetDescriptor+0x20>
    7840:	23 30       	cpi	r18, 0x03	; 3
    7842:	31 05       	cpc	r19, r1
    7844:	69 f0       	breq	.+26     	; 0x7860 <CALLBACK_USB_GetDescriptor+0x2a>
    7846:	21 30       	cpi	r18, 0x01	; 1
    7848:	31 05       	cpc	r19, r1
    784a:	f9 f4       	brne	.+62     	; 0x788a <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    784c:	82 e1       	ldi	r24, 0x12	; 18
    784e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7850:	2a e8       	ldi	r18, 0x8A	; 138
    7852:	31 e0       	ldi	r19, 0x01	; 1
    7854:	1e c0       	rjmp	.+60     	; 0x7892 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7856:	8e e3       	ldi	r24, 0x3E	; 62
    7858:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    785a:	2c e4       	ldi	r18, 0x4C	; 76
    785c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    785e:	19 c0       	rjmp	.+50     	; 0x7892 <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7860:	88 23       	and	r24, r24
    7862:	49 f0       	breq	.+18     	; 0x7876 <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    7864:	81 30       	cpi	r24, 0x01	; 1
    7866:	61 f0       	breq	.+24     	; 0x7880 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7868:	82 30       	cpi	r24, 0x02	; 2
    786a:	79 f4       	brne	.+30     	; 0x788a <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    786c:	88 e1       	ldi	r24, 0x18	; 24
    786e:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7870:	2a e0       	ldi	r18, 0x0A	; 10
    7872:	31 e0       	ldi	r19, 0x01	; 1
    7874:	0e c0       	rjmp	.+28     	; 0x7892 <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7876:	84 e0       	ldi	r24, 0x04	; 4
    7878:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    787a:	28 e4       	ldi	r18, 0x48	; 72
    787c:	31 e0       	ldi	r19, 0x01	; 1
    787e:	09 c0       	rjmp	.+18     	; 0x7892 <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    7880:	82 e2       	ldi	r24, 0x22	; 34
    7882:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    7884:	24 e2       	ldi	r18, 0x24	; 36
    7886:	31 e0       	ldi	r19, 0x01	; 1
    7888:	04 c0       	rjmp	.+8      	; 0x7892 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    788a:	80 e0       	ldi	r24, 0x00	; 0
    788c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    788e:	20 e0       	ldi	r18, 0x00	; 0
    7890:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    7892:	fa 01       	movw	r30, r20
    7894:	31 83       	std	Z+1, r19	; 0x01
    7896:	20 83       	st	Z, r18
	return Size;
}
    7898:	08 95       	ret

0000789a <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    789a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    789e:	eb ee       	ldi	r30, 0xEB	; 235
    78a0:	f0 e0       	ldi	r31, 0x00	; 0
    78a2:	80 81       	ld	r24, Z
    78a4:	81 60       	ori	r24, 0x01	; 1
    78a6:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    78a8:	ed ee       	ldi	r30, 0xED	; 237
    78aa:	f0 e0       	ldi	r31, 0x00	; 0
    78ac:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    78ae:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    78b2:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    78b4:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    78b8:	88 1f       	adc	r24, r24
    78ba:	88 27       	eor	r24, r24
    78bc:	88 1f       	adc	r24, r24
    78be:	08 95       	ret

000078c0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78c0:	80 91 b4 01 	lds	r24, 0x01B4
    78c4:	87 ff       	sbrs	r24, 7
    78c6:	0f c0       	rjmp	.+30     	; 0x78e6 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78c8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    78cc:	82 fd       	sbrc	r24, 2
    78ce:	04 c0       	rjmp	.+8      	; 0x78d8 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78d0:	8e b3       	in	r24, 0x1e	; 30
    78d2:	81 11       	cpse	r24, r1
    78d4:	f9 cf       	rjmp	.-14     	; 0x78c8 <Endpoint_ClearStatusStage+0x8>
    78d6:	10 c0       	rjmp	.+32     	; 0x78f8 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78d8:	80 91 e8 00 	lds	r24, 0x00E8
    78dc:	8b 77       	andi	r24, 0x7B	; 123
    78de:	0a c0       	rjmp	.+20     	; 0x78f4 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78e0:	8e b3       	in	r24, 0x1e	; 30
    78e2:	88 23       	and	r24, r24
    78e4:	49 f0       	breq	.+18     	; 0x78f8 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78e6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    78ea:	80 ff       	sbrs	r24, 0
    78ec:	f9 cf       	rjmp	.-14     	; 0x78e0 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78ee:	80 91 e8 00 	lds	r24, 0x00E8
    78f2:	8e 77       	andi	r24, 0x7E	; 126
    78f4:	80 93 e8 00 	sts	0x00E8, r24
    78f8:	08 95       	ret

000078fa <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    78fa:	0f 93       	push	r16
    78fc:	1f 93       	push	r17
    78fe:	cf 93       	push	r28
    7900:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7902:	41 d0       	rcall	.+130    	; 0x7986 <USB_INT_DisableAllInterrupts>
    7904:	48 d0       	rcall	.+144    	; 0x7996 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7906:	c8 ed       	ldi	r28, 0xD8	; 216
    7908:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    790a:	88 81       	ld	r24, Y
    790c:	8f 77       	andi	r24, 0x7F	; 127
    790e:	88 83       	st	Y, r24
    7910:	88 81       	ld	r24, Y
    7912:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    7914:	88 83       	st	Y, r24
    7916:	88 81       	ld	r24, Y
    7918:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    791a:	88 83       	st	Y, r24
    791c:	19 bc       	out	0x29, r1	; 41
    791e:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7920:	10 92 b2 01 	sts	0x01B2, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    7924:	00 ee       	ldi	r16, 0xE0	; 224
    7926:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7928:	f8 01       	movw	r30, r16
    792a:	80 81       	ld	r24, Z
    792c:	8b 7f       	andi	r24, 0xFB	; 251
    792e:	80 83       	st	Z, r24
    7930:	88 81       	ld	r24, Y
    7932:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7934:	88 83       	st	Y, r24
    7936:	42 e0       	ldi	r20, 0x02	; 2
    7938:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    793a:	80 e0       	ldi	r24, 0x00	; 0
    793c:	ae df       	rcall	.-164    	; 0x789a <Endpoint_ConfigureEndpoint_Prv>
    793e:	e1 ee       	ldi	r30, 0xE1	; 225
    7940:	f0 e0       	ldi	r31, 0x00	; 0
    7942:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7944:	8e 7f       	andi	r24, 0xFE	; 254
    7946:	80 83       	st	Z, r24
    7948:	e2 ee       	ldi	r30, 0xE2	; 226
    794a:	f0 e0       	ldi	r31, 0x00	; 0
    794c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    794e:	81 60       	ori	r24, 0x01	; 1
    7950:	80 83       	st	Z, r24
    7952:	80 81       	ld	r24, Z
    7954:	88 60       	ori	r24, 0x08	; 8
    7956:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7958:	f8 01       	movw	r30, r16
    795a:	80 81       	ld	r24, Z
    795c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    795e:	80 83       	st	Z, r24
    7960:	88 81       	ld	r24, Y
    7962:	80 61       	ori	r24, 0x10	; 16
    7964:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7966:	df 91       	pop	r29
    7968:	cf 91       	pop	r28
    796a:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    796c:	0f 91       	pop	r16
    796e:	08 95       	ret

00007970 <USB_Init>:
    7970:	e7 ed       	ldi	r30, 0xD7	; 215
    7972:	f0 e0       	ldi	r31, 0x00	; 0
    7974:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7976:	81 60       	ori	r24, 0x01	; 1
    7978:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    797a:	8a e4       	ldi	r24, 0x4A	; 74
    797c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    797e:	81 e0       	ldi	r24, 0x01	; 1
    7980:	80 93 b3 01 	sts	0x01B3, r24

	USB_ResetInterface();
    7984:	ba cf       	rjmp	.-140    	; 0x78fa <USB_ResetInterface>

00007986 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7986:	e8 ed       	ldi	r30, 0xD8	; 216
    7988:	f0 e0       	ldi	r31, 0x00	; 0
    798a:	80 81       	ld	r24, Z
    798c:	8e 7f       	andi	r24, 0xFE	; 254
    798e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7990:	10 92 e2 00 	sts	0x00E2, r1
    7994:	08 95       	ret

00007996 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7996:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    799a:	10 92 e1 00 	sts	0x00E1, r1
    799e:	08 95       	ret

000079a0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79a0:	1f 92       	push	r1
    79a2:	0f 92       	push	r0
    79a4:	0f b6       	in	r0, 0x3f	; 63
    79a6:	0f 92       	push	r0
    79a8:	11 24       	eor	r1, r1
    79aa:	2f 93       	push	r18
    79ac:	3f 93       	push	r19
    79ae:	4f 93       	push	r20
    79b0:	5f 93       	push	r21
    79b2:	6f 93       	push	r22
    79b4:	7f 93       	push	r23
    79b6:	8f 93       	push	r24
    79b8:	9f 93       	push	r25
    79ba:	af 93       	push	r26
    79bc:	bf 93       	push	r27
    79be:	ef 93       	push	r30
    79c0:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79c2:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79c6:	80 ff       	sbrs	r24, 0
    79c8:	1b c0       	rjmp	.+54     	; 0x7a00 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    79ca:	80 91 d8 00 	lds	r24, 0x00D8
    79ce:	80 ff       	sbrs	r24, 0
    79d0:	17 c0       	rjmp	.+46     	; 0x7a00 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    79d2:	80 91 da 00 	lds	r24, 0x00DA
    79d6:	8e 7f       	andi	r24, 0xFE	; 254
    79d8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    79dc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    79e0:	80 ff       	sbrs	r24, 0
    79e2:	0b c0       	rjmp	.+22     	; 0x79fa <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    79e4:	80 e1       	ldi	r24, 0x10	; 16
    79e6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79e8:	82 e1       	ldi	r24, 0x12	; 18
    79ea:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    79ec:	09 b4       	in	r0, 0x29	; 41
    79ee:	00 fe       	sbrs	r0, 0
    79f0:	fd cf       	rjmp	.-6      	; 0x79ec <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    79f2:	81 e0       	ldi	r24, 0x01	; 1
    79f4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    79f6:	18 d2       	rcall	.+1072   	; 0x7e28 <USB_Event_Stub>
    79f8:	03 c0       	rjmp	.+6      	; 0x7a00 <__vector_10+0x60>
    79fa:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    79fc:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    79fe:	14 d2       	rcall	.+1064   	; 0x7e28 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7a00:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a04:	80 ff       	sbrs	r24, 0
    7a06:	17 c0       	rjmp	.+46     	; 0x7a36 <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a08:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7a0c:	80 ff       	sbrs	r24, 0
    7a0e:	13 c0       	rjmp	.+38     	; 0x7a36 <__vector_10+0x96>
    7a10:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a14:	8e 7f       	andi	r24, 0xFE	; 254
    7a16:	80 93 e2 00 	sts	0x00E2, r24
    7a1a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a1e:	80 61       	ori	r24, 0x10	; 16
    7a20:	80 93 e2 00 	sts	0x00E2, r24
    7a24:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a28:	80 62       	ori	r24, 0x20	; 32
    7a2a:	80 93 d8 00 	sts	0x00D8, r24
    7a2e:	19 bc       	out	0x29, r1	; 41
    7a30:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a32:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a34:	f9 d1       	rcall	.+1010   	; 0x7e28 <USB_Event_Stub>
    7a36:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7a3a:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a3c:	2c c0       	rjmp	.+88     	; 0x7a96 <__vector_10+0xf6>
    7a3e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a42:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a44:	28 c0       	rjmp	.+80     	; 0x7a96 <__vector_10+0xf6>
    7a46:	80 e1       	ldi	r24, 0x10	; 16
    7a48:	89 bd       	out	0x29, r24	; 41
    7a4a:	82 e1       	ldi	r24, 0x12	; 18

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a4c:	89 bd       	out	0x29, r24	; 41
    7a4e:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a50:	00 fe       	sbrs	r0, 0
    7a52:	fd cf       	rjmp	.-6      	; 0x7a4e <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a54:	80 91 d8 00 	lds	r24, 0x00D8
    7a58:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a5a:	80 93 d8 00 	sts	0x00D8, r24
    7a5e:	80 91 e1 00 	lds	r24, 0x00E1
    7a62:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7a64:	80 93 e1 00 	sts	0x00E1, r24
    7a68:	80 91 e2 00 	lds	r24, 0x00E2
    7a6c:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a6e:	80 93 e2 00 	sts	0x00E2, r24
    7a72:	80 91 e2 00 	lds	r24, 0x00E2
    7a76:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a78:	80 93 e2 00 	sts	0x00E2, r24
    7a7c:	80 91 b2 01 	lds	r24, 0x01B2
    7a80:	81 11       	cpse	r24, r1
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a82:	06 c0       	rjmp	.+12     	; 0x7a90 <__vector_10+0xf0>
    7a84:	80 91 e3 00 	lds	r24, 0x00E3
    7a88:	87 fd       	sbrc	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a8a:	02 c0       	rjmp	.+4      	; 0x7a90 <__vector_10+0xf0>
    7a8c:	81 e0       	ldi	r24, 0x01	; 1
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a8e:	01 c0       	rjmp	.+2      	; 0x7a92 <__vector_10+0xf2>
    7a90:	84 e0       	ldi	r24, 0x04	; 4
    7a92:	8e bb       	out	0x1e, r24	; 30
    7a94:	c9 d1       	rcall	.+914    	; 0x7e28 <USB_Event_Stub>
    7a96:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a9a:	83 ff       	sbrs	r24, 3
    7a9c:	21 c0       	rjmp	.+66     	; 0x7ae0 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a9e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7aa2:	83 ff       	sbrs	r24, 3
    7aa4:	1d c0       	rjmp	.+58     	; 0x7ae0 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7aa6:	80 91 e1 00 	lds	r24, 0x00E1
    7aaa:	87 7f       	andi	r24, 0xF7	; 247
    7aac:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7ab0:	82 e0       	ldi	r24, 0x02	; 2
    7ab2:	8e bb       	out	0x1e, r24	; 30
    7ab4:	10 92 b2 01 	sts	0x01B2, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7ab8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7abc:	8e 7f       	andi	r24, 0xFE	; 254
    7abe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7ac2:	80 91 e2 00 	lds	r24, 0x00E2
    7ac6:	8e 7f       	andi	r24, 0xFE	; 254
    7ac8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7acc:	80 91 e2 00 	lds	r24, 0x00E2
    7ad0:	80 61       	ori	r24, 0x10	; 16
    7ad2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7ad6:	42 e0       	ldi	r20, 0x02	; 2
    7ad8:	60 e0       	ldi	r22, 0x00	; 0
    7ada:	80 e0       	ldi	r24, 0x00	; 0
    7adc:	de de       	rcall	.-580    	; 0x789a <Endpoint_ConfigureEndpoint_Prv>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7ade:	a4 d1       	rcall	.+840    	; 0x7e28 <USB_Event_Stub>
    7ae0:	ff 91       	pop	r31
    7ae2:	ef 91       	pop	r30
    7ae4:	bf 91       	pop	r27
    7ae6:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7ae8:	9f 91       	pop	r25
    7aea:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7aec:	7f 91       	pop	r23
    7aee:	6f 91       	pop	r22
    7af0:	5f 91       	pop	r21
    7af2:	4f 91       	pop	r20
    7af4:	3f 91       	pop	r19
    7af6:	2f 91       	pop	r18
    7af8:	0f 90       	pop	r0
    7afa:	0f be       	out	0x3f, r0	; 63
    7afc:	0f 90       	pop	r0
    7afe:	1f 90       	pop	r1
    7b00:	18 95       	reti

00007b02 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7b02:	20 91 ba 01 	lds	r18, 0x01BA
    7b06:	30 91 bb 01 	lds	r19, 0x01BB
    7b0a:	26 17       	cp	r18, r22
    7b0c:	37 07       	cpc	r19, r23
    7b0e:	48 f0       	brcs	.+18     	; 0x7b22 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7b10:	61 15       	cp	r22, r1
    7b12:	71 05       	cpc	r23, r1
    7b14:	39 f4       	brne	.+14     	; 0x7b24 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b16:	20 91 e8 00 	lds	r18, 0x00E8
    7b1a:	2e 77       	andi	r18, 0x7E	; 126
    7b1c:	20 93 e8 00 	sts	0x00E8, r18
    7b20:	01 c0       	rjmp	.+2      	; 0x7b24 <Endpoint_Write_Control_Stream_LE+0x22>
    7b22:	b9 01       	movw	r22, r18
    7b24:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7b26:	61 15       	cp	r22, r1
    7b28:	71 05       	cpc	r23, r1
    7b2a:	a1 f1       	breq	.+104    	; 0x7b94 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b2c:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b2e:	22 23       	and	r18, r18
    7b30:	09 f4       	brne	.+2      	; 0x7b34 <Endpoint_Write_Control_Stream_LE+0x32>
    7b32:	40 c0       	rjmp	.+128    	; 0x7bb4 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b34:	25 30       	cpi	r18, 0x05	; 5
    7b36:	09 f4       	brne	.+2      	; 0x7b3a <Endpoint_Write_Control_Stream_LE+0x38>
    7b38:	3f c0       	rjmp	.+126    	; 0x7bb8 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b3a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7b3e:	23 fd       	sbrc	r18, 3
    7b40:	37 c0       	rjmp	.+110    	; 0x7bb0 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b42:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7b46:	22 fd       	sbrc	r18, 2
    7b48:	2d c0       	rjmp	.+90     	; 0x7ba4 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b4a:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7b4e:	20 ff       	sbrs	r18, 0
    7b50:	ea cf       	rjmp	.-44     	; 0x7b26 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b52:	40 91 f3 00 	lds	r20, 0x00F3
    7b56:	20 91 f2 00 	lds	r18, 0x00F2
    7b5a:	30 e0       	ldi	r19, 0x00	; 0
    7b5c:	34 2b       	or	r19, r20
    7b5e:	fc 01       	movw	r30, r24
    7b60:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7b62:	61 15       	cp	r22, r1
    7b64:	71 05       	cpc	r23, r1
    7b66:	59 f0       	breq	.+22     	; 0x7b7e <Endpoint_Write_Control_Stream_LE+0x7c>
    7b68:	28 30       	cpi	r18, 0x08	; 8
    7b6a:	31 05       	cpc	r19, r1
    7b6c:	40 f4       	brcc	.+16     	; 0x7b7e <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7b6e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b70:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7b74:	61 50       	subi	r22, 0x01	; 1
    7b76:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7b78:	2f 5f       	subi	r18, 0xFF	; 255
    7b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b7c:	f1 cf       	rjmp	.-30     	; 0x7b60 <Endpoint_Write_Control_Stream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7b7e:	41 e0       	ldi	r20, 0x01	; 1
    7b80:	28 30       	cpi	r18, 0x08	; 8
    7b82:	31 05       	cpc	r19, r1
    7b84:	09 f0       	breq	.+2      	; 0x7b88 <Endpoint_Write_Control_Stream_LE+0x86>
    7b86:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b88:	20 91 e8 00 	lds	r18, 0x00E8
    7b8c:	2e 77       	andi	r18, 0x7E	; 126
    7b8e:	20 93 e8 00 	sts	0x00E8, r18
    7b92:	c9 cf       	rjmp	.-110    	; 0x7b26 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7b94:	41 11       	cpse	r20, r1
    7b96:	ca cf       	rjmp	.-108    	; 0x7b2c <Endpoint_Write_Control_Stream_LE+0x2a>
    7b98:	05 c0       	rjmp	.+10     	; 0x7ba4 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b9a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b9c:	88 23       	and	r24, r24
    7b9e:	51 f0       	breq	.+20     	; 0x7bb4 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7ba0:	85 30       	cpi	r24, 0x05	; 5
    7ba2:	51 f0       	breq	.+20     	; 0x7bb8 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7ba4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7ba8:	82 ff       	sbrs	r24, 2
    7baa:	f7 cf       	rjmp	.-18     	; 0x7b9a <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7bac:	80 e0       	ldi	r24, 0x00	; 0
    7bae:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7bb0:	81 e0       	ldi	r24, 0x01	; 1
    7bb2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7bb4:	82 e0       	ldi	r24, 0x02	; 2
    7bb6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7bb8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7bba:	08 95       	ret

00007bbc <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7bbc:	61 15       	cp	r22, r1
    7bbe:	71 05       	cpc	r23, r1
    7bc0:	29 f4       	brne	.+10     	; 0x7bcc <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bc2:	20 91 e8 00 	lds	r18, 0x00E8
    7bc6:	2b 77       	andi	r18, 0x7B	; 123
    7bc8:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7bcc:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7bce:	61 15       	cp	r22, r1
    7bd0:	71 05       	cpc	r23, r1
    7bd2:	31 f1       	breq	.+76     	; 0x7c20 <Endpoint_Read_Control_Stream_LE+0x64>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bd4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bd6:	88 23       	and	r24, r24
    7bd8:	59 f1       	breq	.+86     	; 0x7c30 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bda:	85 30       	cpi	r24, 0x05	; 5
    7bdc:	59 f1       	breq	.+86     	; 0x7c34 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bde:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7be2:	83 fd       	sbrc	r24, 3
    7be4:	23 c0       	rjmp	.+70     	; 0x7c2c <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7be6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7bea:	82 ff       	sbrs	r24, 2
    7bec:	f0 cf       	rjmp	.-32     	; 0x7bce <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7bee:	20 91 f3 00 	lds	r18, 0x00F3
    7bf2:	80 91 f2 00 	lds	r24, 0x00F2
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	92 2b       	or	r25, r18
		{
			while (Length && Endpoint_BytesInEndpoint())
    7bfa:	89 2b       	or	r24, r25
    7bfc:	31 f0       	breq	.+12     	; 0x7c0a <Endpoint_Read_Control_Stream_LE+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7bfe:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c02:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c04:	61 50       	subi	r22, 0x01	; 1
    7c06:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c08:	91 f7       	brne	.-28     	; 0x7bee <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c0a:	80 91 e8 00 	lds	r24, 0x00E8
    7c0e:	8b 77       	andi	r24, 0x7B	; 123
    7c10:	80 93 e8 00 	sts	0x00E8, r24
    7c14:	dc cf       	rjmp	.-72     	; 0x7bce <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c16:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c18:	88 23       	and	r24, r24
    7c1a:	51 f0       	breq	.+20     	; 0x7c30 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c1c:	85 30       	cpi	r24, 0x05	; 5
    7c1e:	51 f0       	breq	.+20     	; 0x7c34 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c20:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7c24:	80 ff       	sbrs	r24, 0
    7c26:	f7 cf       	rjmp	.-18     	; 0x7c16 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7c28:	80 e0       	ldi	r24, 0x00	; 0
    7c2a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c2c:	81 e0       	ldi	r24, 0x01	; 1
    7c2e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c30:	82 e0       	ldi	r24, 0x02	; 2
    7c32:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c34:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c36:	08 95       	ret

00007c38 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c38:	0f 93       	push	r16
    7c3a:	1f 93       	push	r17
    7c3c:	cf 93       	push	r28
    7c3e:	df 93       	push	r29
    7c40:	00 d0       	rcall	.+0      	; 0x7c42 <USB_Device_ProcessControlRequest+0xa>
    7c42:	cd b7       	in	r28, 0x3d	; 61
    7c44:	de b7       	in	r29, 0x3e	; 62
    7c46:	e4 eb       	ldi	r30, 0xB4	; 180
    7c48:	f1 e0       	ldi	r31, 0x01	; 1
    7c4a:	88 e0       	ldi	r24, 0x08	; 8
    7c4c:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c4e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c52:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c54:	8e 13       	cpse	r24, r30
    7c56:	fb cf       	rjmp	.-10     	; 0x7c4e <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c58:	20 db       	rcall	.-2496   	; 0x729a <EVENT_USB_Device_ControlRequest>
    7c5a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c5e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7c60:	ce c0       	rjmp	.+412    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7c62:	80 91 b4 01 	lds	r24, 0x01B4
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c66:	90 91 b5 01 	lds	r25, 0x01B5

		switch (USB_ControlRequest.bRequest)
    7c6a:	49 2f       	mov	r20, r25
    7c6c:	50 e0       	ldi	r21, 0x00	; 0
    7c6e:	4a 30       	cpi	r20, 0x0A	; 10
    7c70:	51 05       	cpc	r21, r1
    7c72:	08 f0       	brcs	.+2      	; 0x7c76 <USB_Device_ProcessControlRequest+0x3e>
    7c74:	c4 c0       	rjmp	.+392    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7c76:	fa 01       	movw	r30, r20
    7c78:	ea 5a       	subi	r30, 0xAA	; 170
    7c7a:	f7 4c       	sbci	r31, 0xC7	; 199
    7c7c:	e7 c0       	rjmp	.+462    	; 0x7e4c <__tablejump2__>
    7c7e:	82 38       	cpi	r24, 0x82	; 130
    7c80:	09 f0       	breq	.+2      	; 0x7c84 <USB_Device_ProcessControlRequest+0x4c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c82:	bd c0       	rjmp	.+378    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7c84:	80 91 b8 01 	lds	r24, 0x01B8
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c88:	87 70       	andi	r24, 0x07	; 7
    7c8a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c8e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c92:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c96:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c9a:	97 7f       	andi	r25, 0xF7	; 247
    7c9c:	90 93 e8 00 	sts	0x00E8, r25
    7ca0:	85 fb       	bst	r24, 5
    7ca2:	88 27       	eor	r24, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7ca4:	80 f9       	bld	r24, 0
    7ca6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7caa:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7cae:	85 c0       	rjmp	.+266    	; 0x7dba <USB_Device_ProcessControlRequest+0x182>
    7cb0:	28 2f       	mov	r18, r24
    7cb2:	2d 7f       	andi	r18, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cb4:	09 f0       	breq	.+2      	; 0x7cb8 <USB_Device_ProcessControlRequest+0x80>
    7cb6:	a3 c0       	rjmp	.+326    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7cb8:	82 30       	cpi	r24, 0x02	; 2
    7cba:	09 f0       	breq	.+2      	; 0x7cbe <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7cbc:	a0 c0       	rjmp	.+320    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7cbe:	80 91 b6 01 	lds	r24, 0x01B6

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7cc2:	81 11       	cpse	r24, r1
    7cc4:	27 c0       	rjmp	.+78     	; 0x7d14 <USB_Device_ProcessControlRequest+0xdc>
    7cc6:	80 91 b8 01 	lds	r24, 0x01B8
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cca:	87 70       	andi	r24, 0x07	; 7
    7ccc:	09 f4       	brne	.+2      	; 0x7cd0 <USB_Device_ProcessControlRequest+0x98>
    7cce:	97 c0       	rjmp	.+302    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7cd0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cd4:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cd8:	20 ff       	sbrs	r18, 0
    7cda:	1c c0       	rjmp	.+56     	; 0x7d14 <USB_Device_ProcessControlRequest+0xdc>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cdc:	93 30       	cpi	r25, 0x03	; 3
    7cde:	21 f4       	brne	.+8      	; 0x7ce8 <USB_Device_ProcessControlRequest+0xb0>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7ce0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7ce4:	80 62       	ori	r24, 0x20	; 32
    7ce6:	14 c0       	rjmp	.+40     	; 0x7d10 <USB_Device_ProcessControlRequest+0xd8>
    7ce8:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7cec:	90 61       	ori	r25, 0x10	; 16
    7cee:	90 93 eb 00 	sts	0x00EB, r25
    7cf2:	21 e0       	ldi	r18, 0x01	; 1
    7cf4:	30 e0       	ldi	r19, 0x00	; 0
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7cf6:	a9 01       	movw	r20, r18
    7cf8:	02 c0       	rjmp	.+4      	; 0x7cfe <USB_Device_ProcessControlRequest+0xc6>
    7cfa:	44 0f       	add	r20, r20
    7cfc:	55 1f       	adc	r21, r21
    7cfe:	8a 95       	dec	r24
    7d00:	e2 f7       	brpl	.-8      	; 0x7cfa <USB_Device_ProcessControlRequest+0xc2>
    7d02:	40 93 ea 00 	sts	0x00EA, r20
    7d06:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7d0a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d0e:	88 60       	ori	r24, 0x08	; 8
    7d10:	80 93 eb 00 	sts	0x00EB, r24
    7d14:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d1c:	87 7f       	andi	r24, 0xF7	; 247
    7d1e:	50 c0       	rjmp	.+160    	; 0x7dc0 <USB_Device_ProcessControlRequest+0x188>
    7d20:	81 11       	cpse	r24, r1
    7d22:	6d c0       	rjmp	.+218    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d24:	10 91 b6 01 	lds	r17, 0x01B6
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7d28:	1f 77       	andi	r17, 0x7F	; 127
    7d2a:	0f b7       	in	r16, 0x3f	; 63
    7d2c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d2e:	80 91 e8 00 	lds	r24, 0x00E8
    7d32:	87 7f       	andi	r24, 0xF7	; 247
    7d34:	80 93 e8 00 	sts	0x00E8, r24
    7d38:	c3 dd       	rcall	.-1146   	; 0x78c0 <Endpoint_ClearStatusStage>
    7d3a:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d3e:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d40:	fc cf       	rjmp	.-8      	; 0x7d3a <USB_Device_ProcessControlRequest+0x102>
    7d42:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    7d46:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d48:	81 2b       	or	r24, r17
    7d4a:	80 93 e3 00 	sts	0x00E3, r24
    7d4e:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
    7d50:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    7d54:	11 11       	cpse	r17, r1
    7d56:	02 c0       	rjmp	.+4      	; 0x7d5c <USB_Device_ProcessControlRequest+0x124>
    7d58:	82 e0       	ldi	r24, 0x02	; 2

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d5a:	01 c0       	rjmp	.+2      	; 0x7d5e <USB_Device_ProcessControlRequest+0x126>
    7d5c:	83 e0       	ldi	r24, 0x03	; 3
    7d5e:	8e bb       	out	0x1e, r24	; 30
    7d60:	0f bf       	out	0x3f, r16	; 63
    7d62:	4d c0       	rjmp	.+154    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7d64:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d66:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7d68:	08 f0       	brcs	.+2      	; 0x7d6c <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d6a:	49 c0       	rjmp	.+146    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7d6c:	ae 01       	movw	r20, r28
    7d6e:	4f 5f       	subi	r20, 0xFF	; 255
    7d70:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d72:	60 91 b8 01 	lds	r22, 0x01B8
    7d76:	80 91 b6 01 	lds	r24, 0x01B6
    7d7a:	90 91 b7 01 	lds	r25, 0x01B7
    7d7e:	5b dd       	rcall	.-1354   	; 0x7836 <CALLBACK_USB_GetDescriptor>
    7d80:	bc 01       	movw	r22, r24
    7d82:	89 2b       	or	r24, r25
    7d84:	09 f4       	brne	.+2      	; 0x7d88 <USB_Device_ProcessControlRequest+0x150>
    7d86:	3b c0       	rjmp	.+118    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7d88:	90 91 e8 00 	lds	r25, 0x00E8
    7d8c:	97 7f       	andi	r25, 0xF7	; 247
    7d8e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d92:	89 81       	ldd	r24, Y+1	; 0x01
    7d94:	9a 81       	ldd	r25, Y+2	; 0x02
    7d96:	b5 de       	rcall	.-662    	; 0x7b02 <Endpoint_Write_Control_Stream_LE>
    7d98:	80 91 e8 00 	lds	r24, 0x00E8
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7d9c:	8b 77       	andi	r24, 0x7B	; 123
    7d9e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7da2:	2d c0       	rjmp	.+90     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7da4:	80 38       	cpi	r24, 0x80	; 128
    7da6:	59 f5       	brne	.+86     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7da8:	80 91 e8 00 	lds	r24, 0x00E8
    7dac:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7db2:	80 91 b2 01 	lds	r24, 0x01B2
    7db6:	80 93 f1 00 	sts	0x00F1, r24
    7dba:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dbe:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7dc0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7dc4:	7d dd       	rcall	.-1286   	; 0x78c0 <Endpoint_ClearStatusStage>
    7dc6:	1b c0       	rjmp	.+54     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7dc8:	81 11       	cpse	r24, r1
    7dca:	19 c0       	rjmp	.+50     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
    7dcc:	90 91 b6 01 	lds	r25, 0x01B6
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7dd0:	92 30       	cpi	r25, 0x02	; 2
    7dd2:	a8 f4       	brcc	.+42     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1c6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7dd4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7dd8:	87 7f       	andi	r24, 0xF7	; 247
    7dda:	80 93 e8 00 	sts	0x00E8, r24
    7dde:	90 93 b2 01 	sts	0x01B2, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7de2:	6e dd       	rcall	.-1316   	; 0x78c0 <Endpoint_ClearStatusStage>
    7de4:	80 91 b2 01 	lds	r24, 0x01B2
    7de8:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7dea:	06 c0       	rjmp	.+12     	; 0x7df8 <USB_Device_ProcessControlRequest+0x1c0>
    7dec:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    7df0:	87 fd       	sbrc	r24, 7

	if (USB_Device_ConfigurationNumber)
    7df2:	02 c0       	rjmp	.+4      	; 0x7df8 <USB_Device_ProcessControlRequest+0x1c0>
    7df4:	81 e0       	ldi	r24, 0x01	; 1
    7df6:	01 c0       	rjmp	.+2      	; 0x7dfa <USB_Device_ProcessControlRequest+0x1c2>
    7df8:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7dfa:	8e bb       	out	0x1e, r24	; 30
    7dfc:	42 da       	rcall	.-2940   	; 0x7282 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7dfe:	80 91 e8 00 	lds	r24, 0x00E8
    7e02:	83 ff       	sbrs	r24, 3
    7e04:	0a c0       	rjmp	.+20     	; 0x7e1a <USB_Device_ProcessControlRequest+0x1e2>
    7e06:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    7e0a:	80 62       	ori	r24, 0x20	; 32
    7e0c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e10:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e14:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e16:	80 93 e8 00 	sts	0x00E8, r24
    7e1a:	0f 90       	pop	r0
    7e1c:	0f 90       	pop	r0
    7e1e:	df 91       	pop	r29
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e20:	cf 91       	pop	r28
    7e22:	1f 91       	pop	r17
    7e24:	0f 91       	pop	r16
    7e26:	08 95       	ret

00007e28 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e28:	08 95       	ret

00007e2a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e2a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e2c:	8e b3       	in	r24, 0x1e	; 30
    7e2e:	88 23       	and	r24, r24
    7e30:	59 f0       	breq	.+22     	; 0x7e48 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e32:	c0 91 e9 00 	lds	r28, 0x00E9
    7e36:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e3c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7e40:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7e42:	fa de       	rcall	.-524    	; 0x7c38 <USB_Device_ProcessControlRequest>
    7e44:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e48:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7e4a:	08 95       	ret

00007e4c <__tablejump2__>:
    7e4c:	ee 0f       	add	r30, r30
    7e4e:	ff 1f       	adc	r31, r31
    7e50:	05 90       	lpm	r0, Z+
    7e52:	f4 91       	lpm	r31, Z
    7e54:	e0 2d       	mov	r30, r0
    7e56:	09 94       	ijmp

00007e58 <eeprom_read_byte>:
    7e58:	f9 99       	sbic	0x1f, 1	; 31
    7e5a:	fe cf       	rjmp	.-4      	; 0x7e58 <eeprom_read_byte>
    7e5c:	92 bd       	out	0x22, r25	; 34
    7e5e:	81 bd       	out	0x21, r24	; 33
    7e60:	f8 9a       	sbi	0x1f, 0	; 31
    7e62:	99 27       	eor	r25, r25
    7e64:	80 b5       	in	r24, 0x20	; 32
    7e66:	08 95       	ret

00007e68 <eeprom_write_byte>:
    7e68:	26 2f       	mov	r18, r22

00007e6a <eeprom_write_r18>:
    7e6a:	f9 99       	sbic	0x1f, 1	; 31
    7e6c:	fe cf       	rjmp	.-4      	; 0x7e6a <eeprom_write_r18>
    7e6e:	1f ba       	out	0x1f, r1	; 31
    7e70:	92 bd       	out	0x22, r25	; 34
    7e72:	81 bd       	out	0x21, r24	; 33
    7e74:	20 bd       	out	0x20, r18	; 32
    7e76:	0f b6       	in	r0, 0x3f	; 63
    7e78:	f8 94       	cli
    7e7a:	fa 9a       	sbi	0x1f, 2	; 31
    7e7c:	f9 9a       	sbi	0x1f, 1	; 31
    7e7e:	0f be       	out	0x3f, r0	; 63
    7e80:	01 96       	adiw	r24, 0x01	; 1
    7e82:	08 95       	ret

00007e84 <_exit>:
    7e84:	f8 94       	cli

00007e86 <__stop_program>:
    7e86:	ff cf       	rjmp	.-2      	; 0x7e86 <__stop_program>
