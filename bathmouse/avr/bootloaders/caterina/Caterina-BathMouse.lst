   1               		.file	"Caterina-BathMouse.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB107:
  14               		.file 1 "Caterina-BathMouse.c"
   1:Caterina-BathMouse.c **** /*
   2:Caterina-BathMouse.c ****              LUFA Library
   3:Caterina-BathMouse.c ****      Copyright (C) Dean Camera, 2011.
   4:Caterina-BathMouse.c **** 
   5:Caterina-BathMouse.c ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina-BathMouse.c ****            www.lufa-lib.org
   7:Caterina-BathMouse.c **** */
   8:Caterina-BathMouse.c **** 
   9:Caterina-BathMouse.c **** /*
  10:Caterina-BathMouse.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina-BathMouse.c **** 
  12:Caterina-BathMouse.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina-BathMouse.c ****   software and its documentation for any purpose is hereby granted
  14:Caterina-BathMouse.c ****   without fee, provided that the above copyright notice appear in
  15:Caterina-BathMouse.c ****   all copies and that both that the copyright notice and this
  16:Caterina-BathMouse.c ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina-BathMouse.c ****   documentation, and that the name of the author not be used in
  18:Caterina-BathMouse.c ****   advertising or publicity pertaining to distribution of the
  19:Caterina-BathMouse.c ****   software without specific, written prior permission.
  20:Caterina-BathMouse.c **** 
  21:Caterina-BathMouse.c ****   The author disclaim all warranties with regard to this
  22:Caterina-BathMouse.c ****   software, including all implied warranties of merchantability
  23:Caterina-BathMouse.c ****   and fitness.  In no event shall the author be liable for any
  24:Caterina-BathMouse.c ****   special, indirect or consequential damages or any damages
  25:Caterina-BathMouse.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina-BathMouse.c ****   in an action of contract, negligence or other tortious action,
  27:Caterina-BathMouse.c ****   arising out of or in connection with the use or performance of
  28:Caterina-BathMouse.c ****   this software.
  29:Caterina-BathMouse.c **** */
  30:Caterina-BathMouse.c **** 
  31:Caterina-BathMouse.c **** /** \file
  32:Caterina-BathMouse.c ****  *
  33:Caterina-BathMouse.c ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  34:Caterina-BathMouse.c ****  */
  35:Caterina-BathMouse.c **** 
  36:Caterina-BathMouse.c **** #define  INCLUDE_FROM_CATERINA_C
  37:Caterina-BathMouse.c **** #include "Caterina.h"
  38:Caterina-BathMouse.c **** 
  39:Caterina-BathMouse.c **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  40:Caterina-BathMouse.c ****  *  operating systems will not open the port unless the settings can be set successfully.
  41:Caterina-BathMouse.c ****  */
  42:Caterina-BathMouse.c **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  43:Caterina-BathMouse.c ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  44:Caterina-BathMouse.c ****                                            .ParityType  = CDC_PARITY_None,
  45:Caterina-BathMouse.c ****                                            .DataBits    = 8                            };
  46:Caterina-BathMouse.c **** 
  47:Caterina-BathMouse.c **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  48:Caterina-BathMouse.c ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  49:Caterina-BathMouse.c ****  *  command.)
  50:Caterina-BathMouse.c ****  */
  51:Caterina-BathMouse.c **** static uint32_t CurrAddress;
  52:Caterina-BathMouse.c **** 
  53:Caterina-BathMouse.c **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  54:Caterina-BathMouse.c ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  55:Caterina-BathMouse.c ****  *  loop until the AVR restarts and the application runs.
  56:Caterina-BathMouse.c ****  */
  57:Caterina-BathMouse.c **** static bool RunBootloader = true;
  58:Caterina-BathMouse.c **** 
  59:Caterina-BathMouse.c **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  60:Caterina-BathMouse.c **** #define TX_RX_LED_PULSE_PERIOD 100
  61:Caterina-BathMouse.c **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  62:Caterina-BathMouse.c **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  63:Caterina-BathMouse.c **** 
  64:Caterina-BathMouse.c **** /* Bootloader timeout timer */
  65:Caterina-BathMouse.c **** #define TIMEOUT_PERIOD	8000
  66:Caterina-BathMouse.c **** uint16_t Timeout = 0;
  67:Caterina-BathMouse.c **** 
  68:Caterina-BathMouse.c **** uint16_t bootKey = 0x7777;
  69:Caterina-BathMouse.c **** volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;
  70:Caterina-BathMouse.c **** 
  71:Caterina-BathMouse.c **** void StartSketch(void)
  72:Caterina-BathMouse.c **** {
  73:Caterina-BathMouse.c **** 	cli();
  74:Caterina-BathMouse.c **** 	
  75:Caterina-BathMouse.c **** 	/* Undo TIMER1 setup and clear the count before running the sketch */
  76:Caterina-BathMouse.c **** 	TIMSK1 = 0;
  77:Caterina-BathMouse.c **** 	TCCR1B = 0;
  78:Caterina-BathMouse.c **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
  79:Caterina-BathMouse.c **** 	TCNT1L = 0;
  80:Caterina-BathMouse.c **** 	
  81:Caterina-BathMouse.c **** 	/* Relocate the interrupt vector table to the application section */
  82:Caterina-BathMouse.c **** 	MCUCR = (1 << IVCE);
  83:Caterina-BathMouse.c **** 	MCUCR = 0;
  84:Caterina-BathMouse.c **** 
  85:Caterina-BathMouse.c **** 	L_LED_OFF();
  86:Caterina-BathMouse.c **** 	TX_LED_OFF();
  87:Caterina-BathMouse.c **** 	RX_LED_OFF();
  88:Caterina-BathMouse.c **** 
  89:Caterina-BathMouse.c **** 	/* jump to beginning of application space */
  90:Caterina-BathMouse.c **** 	__asm__ volatile("jmp 0x0000");
  91:Caterina-BathMouse.c **** }
  92:Caterina-BathMouse.c **** 
  93:Caterina-BathMouse.c **** /*	Breathing animation on L LED indicates bootloader is running */
  94:Caterina-BathMouse.c **** uint16_t LLEDPulse;
  95:Caterina-BathMouse.c **** void LEDPulse(void)
  96:Caterina-BathMouse.c **** {
  97:Caterina-BathMouse.c **** 	LLEDPulse++;
  98:Caterina-BathMouse.c **** 	uint8_t p = LLEDPulse >> 8;
  99:Caterina-BathMouse.c **** 	if (p > 127)
 100:Caterina-BathMouse.c **** 		p = 254-p;
 101:Caterina-BathMouse.c **** 	p += p;
 102:Caterina-BathMouse.c **** 	if (((uint8_t)LLEDPulse) > p)
 103:Caterina-BathMouse.c **** 		L_LED_OFF();
 104:Caterina-BathMouse.c **** 	else
 105:Caterina-BathMouse.c **** 		L_LED_ON();
 106:Caterina-BathMouse.c **** }
 107:Caterina-BathMouse.c **** 
 108:Caterina-BathMouse.c **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 109:Caterina-BathMouse.c ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 110:Caterina-BathMouse.c ****  */
 111:Caterina-BathMouse.c **** int main(void)
 112:Caterina-BathMouse.c **** {
 113:Caterina-BathMouse.c **** 	/* Save the value of the boot key memory before it is overwritten */
 114:Caterina-BathMouse.c **** 	uint16_t bootKeyPtrVal = *bootKeyPtr;
 115:Caterina-BathMouse.c **** 	*bootKeyPtr = 0;
 116:Caterina-BathMouse.c **** 
 117:Caterina-BathMouse.c **** 	/* Check the reason for the reset so we can act accordingly */
 118:Caterina-BathMouse.c **** 	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
 119:Caterina-BathMouse.c **** 	MCUSR = 0;							// clear all reset flags	
 120:Caterina-BathMouse.c **** 
 121:Caterina-BathMouse.c **** 	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
 122:Caterina-BathMouse.c **** 	wdt_disable();
 123:Caterina-BathMouse.c **** 	
 124:Caterina-BathMouse.c **** 	if (mcusr_state & (1<<EXTRF)) {
 125:Caterina-BathMouse.c **** 		// External reset -  we should continue to self-programming mode.
 126:Caterina-BathMouse.c **** 	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
 127:Caterina-BathMouse.c **** 		// After a power-on reset skip the bootloader and jump straight to sketch 
 128:Caterina-BathMouse.c **** 		// if one exists.	
 129:Caterina-BathMouse.c **** 		StartSketch();
 130:Caterina-BathMouse.c **** 	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)
 131:Caterina-BathMouse.c **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 132:Caterina-BathMouse.c **** 		StartSketch();
 133:Caterina-BathMouse.c **** 	}
 134:Caterina-BathMouse.c **** 	
 135:Caterina-BathMouse.c **** 	/* Setup hardware required for the bootloader */
 136:Caterina-BathMouse.c **** 	SetupHardware();
 137:Caterina-BathMouse.c **** 
 138:Caterina-BathMouse.c **** 	/* Enable global interrupts so that the USB stack can function */
 139:Caterina-BathMouse.c **** 	sei();
 140:Caterina-BathMouse.c **** 	
 141:Caterina-BathMouse.c **** 	Timeout = 0;
 142:Caterina-BathMouse.c **** 	
 143:Caterina-BathMouse.c **** 	while (RunBootloader)
 144:Caterina-BathMouse.c **** 	{
 145:Caterina-BathMouse.c **** 		CDC_Task();
 146:Caterina-BathMouse.c **** 		USB_USBTask();
 147:Caterina-BathMouse.c **** 		/* Time out and start the sketch if one is present */
 148:Caterina-BathMouse.c **** 		if (Timeout > TIMEOUT_PERIOD)
 149:Caterina-BathMouse.c **** 			RunBootloader = false;
 150:Caterina-BathMouse.c **** 
 151:Caterina-BathMouse.c **** 		LEDPulse();
 152:Caterina-BathMouse.c **** 	}
 153:Caterina-BathMouse.c **** 
 154:Caterina-BathMouse.c **** 	/* Disconnect from the host - USB interface will be reset later along with the AVR */
 155:Caterina-BathMouse.c **** 	USB_Detach();
 156:Caterina-BathMouse.c **** 
 157:Caterina-BathMouse.c **** 	/* Jump to beginning of application space to run the sketch - do not reset */	
 158:Caterina-BathMouse.c **** 	StartSketch();
 159:Caterina-BathMouse.c **** }
 160:Caterina-BathMouse.c **** 
 161:Caterina-BathMouse.c **** /** Configures all hardware required for the bootloader. */
 162:Caterina-BathMouse.c **** void SetupHardware(void)
 163:Caterina-BathMouse.c **** {
 164:Caterina-BathMouse.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 165:Caterina-BathMouse.c **** 	MCUSR &= ~(1 << WDRF);
 166:Caterina-BathMouse.c **** 	wdt_disable();
 167:Caterina-BathMouse.c **** 
 168:Caterina-BathMouse.c **** 	/* Disable clock division */
 169:Caterina-BathMouse.c **** 	clock_prescale_set(clock_div_1);
 170:Caterina-BathMouse.c **** 
 171:Caterina-BathMouse.c **** 	/* Relocate the interrupt vector table to the bootloader section */
 172:Caterina-BathMouse.c **** 	MCUCR = (1 << IVCE);
 173:Caterina-BathMouse.c **** 	MCUCR = (1 << IVSEL);
 174:Caterina-BathMouse.c **** 	
 175:Caterina-BathMouse.c **** 	LED_SETUP();
 176:Caterina-BathMouse.c **** 	CPU_PRESCALE(0); 
 177:Caterina-BathMouse.c **** 	L_LED_OFF();
 178:Caterina-BathMouse.c **** 	TX_LED_OFF();
 179:Caterina-BathMouse.c **** 	RX_LED_OFF();
 180:Caterina-BathMouse.c **** 	
 181:Caterina-BathMouse.c **** 	/* Initialize TIMER1 to handle bootloader timeout and LED tasks.  
 182:Caterina-BathMouse.c **** 	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 183:Caterina-BathMouse.c **** 	 * Our chosen compare match generates an interrupt every 1 ms.
 184:Caterina-BathMouse.c **** 	 * This interrupt is disabled selectively when doing memory reading, erasing,
 185:Caterina-BathMouse.c **** 	 * or writing since SPM has tight timing requirements.
 186:Caterina-BathMouse.c **** 	 */ 
 187:Caterina-BathMouse.c **** 	OCR1AH = 0;
 188:Caterina-BathMouse.c **** 	OCR1AL = 250;
 189:Caterina-BathMouse.c **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 190:Caterina-BathMouse.c **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 191:Caterina-BathMouse.c **** 
 192:Caterina-BathMouse.c **** 	/* Initialize USB Subsystem */
 193:Caterina-BathMouse.c **** 	USB_Init();
 194:Caterina-BathMouse.c **** }
 195:Caterina-BathMouse.c **** 
 196:Caterina-BathMouse.c **** //uint16_t ctr = 0;
 197:Caterina-BathMouse.c **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 198:Caterina-BathMouse.c **** {
 199:Caterina-BathMouse.c **** 	/* Reset counter */
 200:Caterina-BathMouse.c **** 	TCNT1H = 0;
 201:Caterina-BathMouse.c **** 	TCNT1L = 0;
 202:Caterina-BathMouse.c **** 
 203:Caterina-BathMouse.c **** 	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 204:Caterina-BathMouse.c **** 	if (TxLEDPulse && !(--TxLEDPulse))
 205:Caterina-BathMouse.c **** 		TX_LED_OFF();
 206:Caterina-BathMouse.c **** 	if (RxLEDPulse && !(--RxLEDPulse))
 207:Caterina-BathMouse.c **** 		RX_LED_OFF();
 208:Caterina-BathMouse.c **** 	
 209:Caterina-BathMouse.c **** 	if (pgm_read_word(0) != 0xFFFF)
 210:Caterina-BathMouse.c **** 		Timeout++;
 211:Caterina-BathMouse.c **** }
 212:Caterina-BathMouse.c **** 
 213:Caterina-BathMouse.c **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 214:Caterina-BathMouse.c ****  *  to relay data to and from the attached USB host.
 215:Caterina-BathMouse.c ****  */
 216:Caterina-BathMouse.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 217:Caterina-BathMouse.c **** {
 218:Caterina-BathMouse.c **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 219:Caterina-BathMouse.c **** 	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 220:Caterina-BathMouse.c **** 	                           ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 221:Caterina-BathMouse.c **** 	                           ENDPOINT_BANK_SINGLE);
 222:Caterina-BathMouse.c **** 
 223:Caterina-BathMouse.c **** 	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 224:Caterina-BathMouse.c **** 	                           ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 225:Caterina-BathMouse.c **** 	                           ENDPOINT_BANK_SINGLE);
 226:Caterina-BathMouse.c **** 
 227:Caterina-BathMouse.c **** 	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 228:Caterina-BathMouse.c **** 	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 229:Caterina-BathMouse.c **** 	                           ENDPOINT_BANK_SINGLE);
 230:Caterina-BathMouse.c **** }
 231:Caterina-BathMouse.c **** 
 232:Caterina-BathMouse.c **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 233:Caterina-BathMouse.c ****  *  the device from the USB host before passing along unhandled control requests to the library for
 234:Caterina-BathMouse.c ****  *  internally.
 235:Caterina-BathMouse.c ****  */
 236:Caterina-BathMouse.c **** void EVENT_USB_Device_ControlRequest(void)
 237:Caterina-BathMouse.c **** {
 238:Caterina-BathMouse.c **** 	/* Ignore any requests that aren't directed to the CDC interface */
 239:Caterina-BathMouse.c **** 	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 240:Caterina-BathMouse.c **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 241:Caterina-BathMouse.c **** 	{
 242:Caterina-BathMouse.c **** 		return;
 243:Caterina-BathMouse.c **** 	}
 244:Caterina-BathMouse.c **** 
 245:Caterina-BathMouse.c **** 	/* Process CDC specific control requests */
 246:Caterina-BathMouse.c **** 	switch (USB_ControlRequest.bRequest)
 247:Caterina-BathMouse.c **** 	{
 248:Caterina-BathMouse.c **** 		case CDC_REQ_GetLineEncoding:
 249:Caterina-BathMouse.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 250:Caterina-BathMouse.c **** 			{
 251:Caterina-BathMouse.c **** 				Endpoint_ClearSETUP();
 252:Caterina-BathMouse.c **** 
 253:Caterina-BathMouse.c **** 				/* Write the line coding data to the control endpoint */
 254:Caterina-BathMouse.c **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 255:Caterina-BathMouse.c **** 				Endpoint_ClearOUT();
 256:Caterina-BathMouse.c **** 			}
 257:Caterina-BathMouse.c **** 
 258:Caterina-BathMouse.c **** 			break;
 259:Caterina-BathMouse.c **** 		case CDC_REQ_SetLineEncoding:
 260:Caterina-BathMouse.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 261:Caterina-BathMouse.c **** 			{
 262:Caterina-BathMouse.c **** 				Endpoint_ClearSETUP();
 263:Caterina-BathMouse.c **** 
 264:Caterina-BathMouse.c **** 				/* Read the line coding data in from the host into the global struct */
 265:Caterina-BathMouse.c **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 266:Caterina-BathMouse.c **** 				Endpoint_ClearIN();
 267:Caterina-BathMouse.c **** 			}
 268:Caterina-BathMouse.c **** 
 269:Caterina-BathMouse.c **** 			break;
 270:Caterina-BathMouse.c **** 	}
 271:Caterina-BathMouse.c **** }
 272:Caterina-BathMouse.c **** 
 273:Caterina-BathMouse.c **** #if !defined(NO_BLOCK_SUPPORT)
 274:Caterina-BathMouse.c **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 275:Caterina-BathMouse.c ****  *  on the AVR910 protocol command issued.
 276:Caterina-BathMouse.c ****  *
 277:Caterina-BathMouse.c ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 278:Caterina-BathMouse.c ****  */
 279:Caterina-BathMouse.c **** static void ReadWriteMemoryBlock(const uint8_t Command)
 280:Caterina-BathMouse.c **** {
 281:Caterina-BathMouse.c **** 	uint16_t BlockSize;
 282:Caterina-BathMouse.c **** 	char     MemoryType;
 283:Caterina-BathMouse.c **** 
 284:Caterina-BathMouse.c **** 	bool     HighByte = false;
 285:Caterina-BathMouse.c **** 	uint8_t  LowByte  = 0;
 286:Caterina-BathMouse.c **** 
 287:Caterina-BathMouse.c **** 	BlockSize  = (FetchNextCommandByte() << 8);
 288:Caterina-BathMouse.c **** 	BlockSize |=  FetchNextCommandByte();
 289:Caterina-BathMouse.c **** 
 290:Caterina-BathMouse.c **** 	MemoryType =  FetchNextCommandByte();
 291:Caterina-BathMouse.c **** 
 292:Caterina-BathMouse.c **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 293:Caterina-BathMouse.c **** 	{
 294:Caterina-BathMouse.c **** 		/* Send error byte back to the host */
 295:Caterina-BathMouse.c **** 		WriteNextResponseByte('?');
 296:Caterina-BathMouse.c **** 
 297:Caterina-BathMouse.c **** 		return;
 298:Caterina-BathMouse.c **** 	}
 299:Caterina-BathMouse.c **** 
 300:Caterina-BathMouse.c **** 	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 301:Caterina-BathMouse.c **** 	 * while doing SPM tasks */
 302:Caterina-BathMouse.c **** 	TIMSK1 = 0;
 303:Caterina-BathMouse.c **** 
 304:Caterina-BathMouse.c **** 	/* Check if command is to read memory */
 305:Caterina-BathMouse.c **** 	if (Command == 'g')
 306:Caterina-BathMouse.c **** 	{		
 307:Caterina-BathMouse.c **** 		/* Re-enable RWW section */
 308:Caterina-BathMouse.c **** 		boot_rww_enable();
 309:Caterina-BathMouse.c **** 
 310:Caterina-BathMouse.c **** 		while (BlockSize--)
 311:Caterina-BathMouse.c **** 		{
 312:Caterina-BathMouse.c **** 			if (MemoryType == 'F')
 313:Caterina-BathMouse.c **** 			{
 314:Caterina-BathMouse.c **** 				/* Read the next FLASH byte from the current FLASH page */
 315:Caterina-BathMouse.c **** 				#if (FLASHEND > 0xFFFF)
 316:Caterina-BathMouse.c **** 				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 317:Caterina-BathMouse.c **** 				#else
 318:Caterina-BathMouse.c **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 319:Caterina-BathMouse.c **** 				#endif
 320:Caterina-BathMouse.c **** 
 321:Caterina-BathMouse.c **** 				/* If both bytes in current word have been read, increment the address counter */
 322:Caterina-BathMouse.c **** 				if (HighByte)
 323:Caterina-BathMouse.c **** 				  CurrAddress += 2;
 324:Caterina-BathMouse.c **** 
 325:Caterina-BathMouse.c **** 				HighByte = !HighByte;
 326:Caterina-BathMouse.c **** 			}
 327:Caterina-BathMouse.c **** 			else
 328:Caterina-BathMouse.c **** 			{
 329:Caterina-BathMouse.c **** 				/* Read the next EEPROM byte into the endpoint */
 330:Caterina-BathMouse.c **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 331:Caterina-BathMouse.c **** 
 332:Caterina-BathMouse.c **** 				/* Increment the address counter after use */
 333:Caterina-BathMouse.c **** 				CurrAddress += 2;
 334:Caterina-BathMouse.c **** 			}
 335:Caterina-BathMouse.c **** 		}
 336:Caterina-BathMouse.c **** 	}
 337:Caterina-BathMouse.c **** 	else
 338:Caterina-BathMouse.c **** 	{
 339:Caterina-BathMouse.c **** 		uint32_t PageStartAddress = CurrAddress;
 340:Caterina-BathMouse.c **** 
 341:Caterina-BathMouse.c **** 		if (MemoryType == 'F')
 342:Caterina-BathMouse.c **** 		{
 343:Caterina-BathMouse.c **** 			boot_page_erase(PageStartAddress);
 344:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 345:Caterina-BathMouse.c **** 		}
 346:Caterina-BathMouse.c **** 
 347:Caterina-BathMouse.c **** 		while (BlockSize--)
 348:Caterina-BathMouse.c **** 		{
 349:Caterina-BathMouse.c **** 			if (MemoryType == 'F')
 350:Caterina-BathMouse.c **** 			{
 351:Caterina-BathMouse.c **** 				/* If both bytes in current word have been written, increment the address counter */
 352:Caterina-BathMouse.c **** 				if (HighByte)
 353:Caterina-BathMouse.c **** 				{
 354:Caterina-BathMouse.c **** 					/* Write the next FLASH word to the current FLASH page */
 355:Caterina-BathMouse.c **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 356:Caterina-BathMouse.c **** 
 357:Caterina-BathMouse.c **** 					/* Increment the address counter after use */
 358:Caterina-BathMouse.c **** 					CurrAddress += 2;
 359:Caterina-BathMouse.c **** 				}
 360:Caterina-BathMouse.c **** 				else
 361:Caterina-BathMouse.c **** 				{
 362:Caterina-BathMouse.c **** 					LowByte = FetchNextCommandByte();
 363:Caterina-BathMouse.c **** 				}
 364:Caterina-BathMouse.c **** 				
 365:Caterina-BathMouse.c **** 				HighByte = !HighByte;
 366:Caterina-BathMouse.c **** 			}
 367:Caterina-BathMouse.c **** 			else
 368:Caterina-BathMouse.c **** 			{
 369:Caterina-BathMouse.c **** 				/* Write the next EEPROM byte from the endpoint */
 370:Caterina-BathMouse.c **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 371:Caterina-BathMouse.c **** 
 372:Caterina-BathMouse.c **** 				/* Increment the address counter after use */
 373:Caterina-BathMouse.c **** 				CurrAddress += 2;
 374:Caterina-BathMouse.c **** 			}
 375:Caterina-BathMouse.c **** 		}
 376:Caterina-BathMouse.c **** 
 377:Caterina-BathMouse.c **** 		/* If in FLASH programming mode, commit the page after writing */
 378:Caterina-BathMouse.c **** 		if (MemoryType == 'F')
 379:Caterina-BathMouse.c **** 		{
 380:Caterina-BathMouse.c **** 			/* Commit the flash page to memory */
 381:Caterina-BathMouse.c **** 			boot_page_write(PageStartAddress);
 382:Caterina-BathMouse.c **** 
 383:Caterina-BathMouse.c **** 			/* Wait until write operation has completed */
 384:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 385:Caterina-BathMouse.c **** 		}
 386:Caterina-BathMouse.c **** 
 387:Caterina-BathMouse.c **** 		/* Send response byte back to the host */
 388:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 389:Caterina-BathMouse.c **** 	}
 390:Caterina-BathMouse.c **** 
 391:Caterina-BathMouse.c **** 	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
 392:Caterina-BathMouse.c **** 	TIMSK1 = (1 << OCIE1A);
 393:Caterina-BathMouse.c **** }
 394:Caterina-BathMouse.c **** #endif
 395:Caterina-BathMouse.c **** 
 396:Caterina-BathMouse.c **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 397:Caterina-BathMouse.c ****  *  to allow reception of the next data packet from the host.
 398:Caterina-BathMouse.c ****  *
 399:Caterina-BathMouse.c ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 400:Caterina-BathMouse.c ****  */
 401:Caterina-BathMouse.c **** static uint8_t FetchNextCommandByte(void)
 402:Caterina-BathMouse.c **** {
  15               		.loc 1 402 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB84:
  23               	.LBB85:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE85:
  30               	.LBE84:
  31               	.LBB86:
  32               	.LBB87:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE87:
  36               	.LBE86:
 403:Caterina-BathMouse.c **** 	/* Select the OUT endpoint so that the next data byte can be read */
 404:Caterina-BathMouse.c **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 405:Caterina-BathMouse.c **** 
 406:Caterina-BathMouse.c **** 	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
 407:Caterina-BathMouse.c **** 	while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 407 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB88:
  41               	.LBB89:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE89:
  48               	.LBE88:
  49               	.LBB90:
  50               	.LBB91:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  51               		.loc 2 479 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE91:
  54               	.LBE90:
 408:Caterina-BathMouse.c **** 	{
 409:Caterina-BathMouse.c **** 		Endpoint_ClearOUT();
 410:Caterina-BathMouse.c **** 
 411:Caterina-BathMouse.c **** 		while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 411 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 412:Caterina-BathMouse.c **** 		{
 413:Caterina-BathMouse.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 413 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB92:
  65               	.LBB93:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  66               		.loc 2 612 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE93:
  70               	.LBE92:
 414:Caterina-BathMouse.c **** 			  return 0;
 415:Caterina-BathMouse.c **** 		}
 416:Caterina-BathMouse.c **** 	}
 417:Caterina-BathMouse.c **** 
 418:Caterina-BathMouse.c **** 	/* Fetch the next byte from the OUT endpoint */
 419:Caterina-BathMouse.c **** 	return Endpoint_Read_8();
 420:Caterina-BathMouse.c **** }
  71               		.loc 1 420 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE107:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB108:
 421:Caterina-BathMouse.c **** 
 422:Caterina-BathMouse.c **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 423:Caterina-BathMouse.c ****  *  bank when full ready for the next byte in the packet to the host.
 424:Caterina-BathMouse.c ****  *
 425:Caterina-BathMouse.c ****  *  \param[in] Response  Next response byte to send to the host
 426:Caterina-BathMouse.c ****  */
 427:Caterina-BathMouse.c **** static void WriteNextResponseByte(const uint8_t Response)
 428:Caterina-BathMouse.c **** {
  80               		.loc 1 428 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB94:
  88               	.LBB95:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
  89               		.loc 2 330 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LBE95:
  93               	.LBE94:
  94               	.LBB96:
  95               	.LBB97:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  96               		.loc 2 420 0
  97 0006 9091 E800 		lds r25,232
  98               	.LBE97:
  99               	.LBE96:
 429:Caterina-BathMouse.c **** 	/* Select the IN endpoint so that the next data byte can be written */
 430:Caterina-BathMouse.c **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 431:Caterina-BathMouse.c **** 
 432:Caterina-BathMouse.c **** 	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 433:Caterina-BathMouse.c **** 	if (!(Endpoint_IsReadWriteAllowed()))
 100               		.loc 1 433 0
 101 000a 95FF      		sbrs r25,5
 102 000c 00C0      		rjmp .L13
 103               	.L17:
 104               	.LVL2:
 105               	.LBB98:
 106               	.LBB99:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 107               		.loc 2 624 0
 108 000e 8093 F100 		sts 241,r24
 109               	.LBE99:
 110               	.LBE98:
 434:Caterina-BathMouse.c **** 	{
 435:Caterina-BathMouse.c **** 		Endpoint_ClearIN();
 436:Caterina-BathMouse.c **** 
 437:Caterina-BathMouse.c **** 		while (!(Endpoint_IsINReady()))
 438:Caterina-BathMouse.c **** 		{
 439:Caterina-BathMouse.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 440:Caterina-BathMouse.c **** 			  return;
 441:Caterina-BathMouse.c **** 		}
 442:Caterina-BathMouse.c **** 	}
 443:Caterina-BathMouse.c **** 
 444:Caterina-BathMouse.c **** 	/* Write the next byte to the IN endpoint */
 445:Caterina-BathMouse.c **** 	Endpoint_Write_8(Response);
 446:Caterina-BathMouse.c **** 	
 447:Caterina-BathMouse.c **** 	TX_LED_ON();
 448:Caterina-BathMouse.c **** 	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 111               		.loc 1 448 0
 112 0012 84E6      		ldi r24,lo8(100)
 113 0014 90E0      		ldi r25,0
 114               	.LVL3:
 115 0016 9093 0000 		sts TxLEDPulse+1,r25
 116 001a 8093 0000 		sts TxLEDPulse,r24
 117               	.LVL4:
 118 001e 0895      		ret
 119               	.LVL5:
 120               	.L13:
 121               	.LBB100:
 122               	.LBB101:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 123               		.loc 2 516 0
 124 0020 9091 E800 		lds r25,232
 125 0024 9E77      		andi r25,lo8(126)
 126 0026 9093 E800 		sts 232,r25
 127               	.L15:
 128               	.LBE101:
 129               	.LBE100:
 130               	.LBB102:
 131               	.LBB103:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 132               		.loc 2 467 0
 133 002a 9091 E800 		lds r25,232
 134               	.LBE103:
 135               	.LBE102:
 437:Caterina-BathMouse.c **** 		{
 136               		.loc 1 437 0
 137 002e 90FD      		sbrc r25,0
 138 0030 00C0      		rjmp .L17
 439:Caterina-BathMouse.c **** 			  return;
 139               		.loc 1 439 0
 140 0032 9EB3      		in r25,0x1e
 141 0034 9111      		cpse r25,__zero_reg__
 142 0036 00C0      		rjmp .L15
 143 0038 0895      		ret
 144               		.cfi_endproc
 145               	.LFE108:
 147               		.section	.text.StartSketch,"ax",@progbits
 148               	.global	StartSketch
 150               	StartSketch:
 151               	.LFB99:
  72:Caterina-BathMouse.c **** 	cli();
 152               		.loc 1 72 0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
  73:Caterina-BathMouse.c **** 	
 158               		.loc 1 73 0
 159               	/* #APP */
 160               	 ;  73 "Caterina-BathMouse.c" 1
 161 0000 F894      		cli
 162               	 ;  0 "" 2
  76:Caterina-BathMouse.c **** 	TCCR1B = 0;
 163               		.loc 1 76 0
 164               	/* #NOAPP */
 165 0002 1092 6F00 		sts 111,__zero_reg__
  77:Caterina-BathMouse.c **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 166               		.loc 1 77 0
 167 0006 1092 8100 		sts 129,__zero_reg__
  78:Caterina-BathMouse.c **** 	TCNT1L = 0;
 168               		.loc 1 78 0
 169 000a 1092 8500 		sts 133,__zero_reg__
  79:Caterina-BathMouse.c **** 	
 170               		.loc 1 79 0
 171 000e 1092 8400 		sts 132,__zero_reg__
  82:Caterina-BathMouse.c **** 	MCUCR = 0;
 172               		.loc 1 82 0
 173 0012 81E0      		ldi r24,lo8(1)
 174 0014 85BF      		out 0x35,r24
  83:Caterina-BathMouse.c **** 
 175               		.loc 1 83 0
 176 0016 15BE      		out 0x35,__zero_reg__
  85:Caterina-BathMouse.c **** 	TX_LED_OFF();
 177               		.loc 1 85 0
 178 0018 2898      		cbi 0x5,0
  90:Caterina-BathMouse.c **** }
 179               		.loc 1 90 0
 180               	/* #APP */
 181               	 ;  90 "Caterina-BathMouse.c" 1
 182 001a 0C94 0000 		jmp 0x0000
 183               	 ;  0 "" 2
 184               	/* #NOAPP */
 185 001e 0895      		ret
 186               		.cfi_endproc
 187               	.LFE99:
 189               		.section	.text.LEDPulse,"ax",@progbits
 190               	.global	LEDPulse
 192               	LEDPulse:
 193               	.LFB100:
  96:Caterina-BathMouse.c **** 	LLEDPulse++;
 194               		.loc 1 96 0
 195               		.cfi_startproc
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
  97:Caterina-BathMouse.c **** 	uint8_t p = LLEDPulse >> 8;
 200               		.loc 1 97 0
 201 0000 2091 0000 		lds r18,LLEDPulse
 202 0004 3091 0000 		lds r19,LLEDPulse+1
 203 0008 2F5F      		subi r18,-1
 204 000a 3F4F      		sbci r19,-1
 205 000c 3093 0000 		sts LLEDPulse+1,r19
 206 0010 2093 0000 		sts LLEDPulse,r18
  98:Caterina-BathMouse.c **** 	if (p > 127)
 207               		.loc 1 98 0
 208 0014 832F      		mov r24,r19
 209               	.LVL6:
  99:Caterina-BathMouse.c **** 		p = 254-p;
 210               		.loc 1 99 0
 211 0016 37FF      		sbrs r19,7
 212 0018 00C0      		rjmp .L23
 100:Caterina-BathMouse.c **** 	p += p;
 213               		.loc 1 100 0
 214 001a 8EEF      		ldi r24,lo8(-2)
 215 001c 831B      		sub r24,r19
 216               	.LVL7:
 217               	.L23:
 101:Caterina-BathMouse.c **** 	if (((uint8_t)LLEDPulse) > p)
 218               		.loc 1 101 0
 219 001e 880F      		lsl r24
 220               	.LVL8:
 102:Caterina-BathMouse.c **** 		L_LED_OFF();
 221               		.loc 1 102 0
 222 0020 8217      		cp r24,r18
 223 0022 00F4      		brsh .L24
 103:Caterina-BathMouse.c **** 	else
 224               		.loc 1 103 0
 225 0024 2898      		cbi 0x5,0
 226 0026 0895      		ret
 227               	.L24:
 105:Caterina-BathMouse.c **** }
 228               		.loc 1 105 0
 229 0028 289A      		sbi 0x5,0
 230 002a 0895      		ret
 231               		.cfi_endproc
 232               	.LFE100:
 234               		.section	.text.SetupHardware,"ax",@progbits
 235               	.global	SetupHardware
 237               	SetupHardware:
 238               	.LFB102:
 163:Caterina-BathMouse.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 239               		.loc 1 163 0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 165:Caterina-BathMouse.c **** 	wdt_disable();
 245               		.loc 1 165 0
 246 0000 84B7      		in r24,0x34
 247 0002 877F      		andi r24,lo8(-9)
 248 0004 84BF      		out 0x34,r24
 249               	.LBB104:
 250               	.LBB105:
 251               		.file 3 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 252               		.loc 3 467 0
 253               	/* #APP */
 254               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 255 0006 0FB6      		in __tmp_reg__,__SREG__
 256 0008 F894      		cli
 257 000a A895      		wdr
 258 000c 8091 6000 		lds r24,96
 259 0010 8861      		ori r24,24
 260 0012 8093 6000 		sts 96,r24
 261 0016 1092 6000 		sts 96,__zero_reg__
 262 001a 0FBE      		out __SREG__,__tmp_reg__
 263               		
 264               	 ;  0 "" 2
 265               	.LVL9:
 266               	/* #NOAPP */
 267               	.LBE105:
 268               	.LBE104:
 269               	.LBB106:
 270               	.LBB107:
 271               		.file 4 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    Copyright (c) 2011 Frédéric Nadeau
   3:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/power.h **** 
   5:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/power.h **** 
   8:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/avr/power.h ****      distribution.
  14:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  15:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  16:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  17:/usr/lib/avr/include/avr/power.h **** 
  18:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  19:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  20:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  22:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  23:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  24:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  27:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  28:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  29:/usr/lib/avr/include/avr/power.h **** 
  30:/usr/lib/avr/include/avr/power.h **** /* $Id$ */
  31:/usr/lib/avr/include/avr/power.h **** 
  32:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  33:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  34:/usr/lib/avr/include/avr/power.h **** 
  35:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  36:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed. Some devices have the XTAL Divide Control Register
  46:/usr/lib/avr/include/avr/power.h **** (XDIV) which offer similar functionality as System Clock Prescale
  47:/usr/lib/avr/include/avr/power.h **** Register (CLKPR).
  48:/usr/lib/avr/include/avr/power.h **** 
  49:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  50:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  51:/usr/lib/avr/include/avr/power.h **** 
  52:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  53:/usr/lib/avr/include/avr/power.h **** the ATmega8). On those devices without a Power Reduction Register, the
  54:/usr/lib/avr/include/avr/power.h **** power reduction macros are not available..
  55:/usr/lib/avr/include/avr/power.h **** 
  56:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  57:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  58:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  59:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** \note For device using the XTAL Divide Control Register (XDIV), when prescaler
  62:/usr/lib/avr/include/avr/power.h **** is used, Timer/Counter0 can only be used in asynchronous mode. Keep in mind
  63:/usr/lib/avr/include/avr/power.h **** that Timer/Counter0 source shall be less than ¼th of peripheral clock.
  64:/usr/lib/avr/include/avr/power.h **** Therefore, when using a typical 32.768 kHz crystal, one shall not scale
  65:/usr/lib/avr/include/avr/power.h **** the clock below 131.072 kHz.
  66:/usr/lib/avr/include/avr/power.h **** 
  67:/usr/lib/avr/include/avr/power.h **** */
  68:/usr/lib/avr/include/avr/power.h **** 
  69:/usr/lib/avr/include/avr/power.h **** 
  70:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  71:/usr/lib/avr/include/avr/power.h **** 
  72:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  73:/usr/lib/avr/include/avr/power.h **** <small>
  74:/usr/lib/avr/include/avr/power.h **** <center>
  75:/usr/lib/avr/include/avr/power.h **** <table border="3">
  76:/usr/lib/avr/include/avr/power.h ****   <tr>
  77:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  78:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  79:/usr/lib/avr/include/avr/power.h ****   </tr>
  80:/usr/lib/avr/include/avr/power.h **** 
  81:/usr/lib/avr/include/avr/power.h ****   <tr>
  82:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_disable()</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog Comparator on PortA.</td>
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog Comparator on PortA.</td>
  89:/usr/lib/avr/include/avr/power.h ****   </tr>
  90:/usr/lib/avr/include/avr/power.h **** 
  91:/usr/lib/avr/include/avr/power.h ****   <tr>
  92:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  93:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  94:/usr/lib/avr/include/avr/power.h ****   </tr>
  95:/usr/lib/avr/include/avr/power.h **** 
  96:/usr/lib/avr/include/avr/power.h ****   <tr>
  97:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  98:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  99:/usr/lib/avr/include/avr/power.h ****   </tr>
 100:/usr/lib/avr/include/avr/power.h **** 
 101:/usr/lib/avr/include/avr/power.h ****   <tr>
 102:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_disable()</td>
 103:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module on PortA</td>
 104:/usr/lib/avr/include/avr/power.h ****   </tr>
 105:/usr/lib/avr/include/avr/power.h **** 
 106:/usr/lib/avr/include/avr/power.h ****   <tr>
 107:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_enable()</td>
 108:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module on PortA</td>
 109:/usr/lib/avr/include/avr/power.h ****   </tr>
 110:/usr/lib/avr/include/avr/power.h **** 
 111:/usr/lib/avr/include/avr/power.h ****   <tr>
 112:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_disable()</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>Disable the EVSYS module</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_enable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Enable the EVSYS module</td>
 119:/usr/lib/avr/include/avr/power.h ****   </tr>
 120:/usr/lib/avr/include/avr/power.h **** 
 121:/usr/lib/avr/include/avr/power.h ****   <tr>
 122:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_disable()</td>
 123:/usr/lib/avr/include/avr/power.h ****     <td>Disable the HIRES module on PortC</td>
 124:/usr/lib/avr/include/avr/power.h ****   </tr>
 125:/usr/lib/avr/include/avr/power.h **** 
 126:/usr/lib/avr/include/avr/power.h ****   <tr>
 127:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_enable()</td>
 128:/usr/lib/avr/include/avr/power.h ****     <td>Enable the HIRES module on PortC</td>
 129:/usr/lib/avr/include/avr/power.h ****   </tr>
 130:/usr/lib/avr/include/avr/power.h **** 
 131:/usr/lib/avr/include/avr/power.h ****    <tr>
 132:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
 133:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
 134:/usr/lib/avr/include/avr/power.h ****   </tr>
 135:/usr/lib/avr/include/avr/power.h **** 
 136:/usr/lib/avr/include/avr/power.h ****   <tr>
 137:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
 138:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
 139:/usr/lib/avr/include/avr/power.h ****   </tr>
 140:/usr/lib/avr/include/avr/power.h **** 
 141:/usr/lib/avr/include/avr/power.h ****   <tr>
 142:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_enable()</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Programmable Gain Amplifier module.</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_disable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Programmable Gain Amplifier module.</td>
 149:/usr/lib/avr/include/avr/power.h ****   </tr>
 150:/usr/lib/avr/include/avr/power.h **** 
 151:/usr/lib/avr/include/avr/power.h ****   <tr>
 152:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 153:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 154:/usr/lib/avr/include/avr/power.h ****   </tr>
 155:/usr/lib/avr/include/avr/power.h **** 
 156:/usr/lib/avr/include/avr/power.h ****   <tr>
 157:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 158:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 159:/usr/lib/avr/include/avr/power.h ****   </tr>
 160:/usr/lib/avr/include/avr/power.h **** 
 161:/usr/lib/avr/include/avr/power.h ****   <tr>
 162:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 163:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 164:/usr/lib/avr/include/avr/power.h ****   </tr>
 165:/usr/lib/avr/include/avr/power.h **** 
 166:/usr/lib/avr/include/avr/power.h ****   <tr>
 167:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 168:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 169:/usr/lib/avr/include/avr/power.h ****   </tr>
 170:/usr/lib/avr/include/avr/power.h **** 
 171:/usr/lib/avr/include/avr/power.h ****   <tr>
 172:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****   </tr>
 180:/usr/lib/avr/include/avr/power.h **** 
 181:/usr/lib/avr/include/avr/power.h ****   <tr>
 182:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 183:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 184:/usr/lib/avr/include/avr/power.h ****   </tr>
 185:/usr/lib/avr/include/avr/power.h **** 
 186:/usr/lib/avr/include/avr/power.h ****   <tr>
 187:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 188:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 189:/usr/lib/avr/include/avr/power.h ****   </tr>
 190:/usr/lib/avr/include/avr/power.h **** 
 191:/usr/lib/avr/include/avr/power.h ****   <tr>
 192:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_enable()</td>
 193:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 0 .</td>
 194:/usr/lib/avr/include/avr/power.h ****   </tr>
 195:/usr/lib/avr/include/avr/power.h **** 
 196:/usr/lib/avr/include/avr/power.h ****   <tr>
 197:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_disable()</td>
 198:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 0. </td>
 199:/usr/lib/avr/include/avr/power.h ****   </tr>
 200:/usr/lib/avr/include/avr/power.h **** 
 201:/usr/lib/avr/include/avr/power.h ****   <tr>
 202:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_enable()</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 1 .</td>
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_disable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 1. </td>
 209:/usr/lib/avr/include/avr/power.h ****   </tr>
 210:/usr/lib/avr/include/avr/power.h **** 
 211:/usr/lib/avr/include/avr/power.h ****   <tr>
 212:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_enable()</td>
 213:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 2 .</td>
 214:/usr/lib/avr/include/avr/power.h ****   </tr>
 215:/usr/lib/avr/include/avr/power.h **** 
 216:/usr/lib/avr/include/avr/power.h ****   <tr>
 217:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_disable()</td>
 218:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 2. </td>
 219:/usr/lib/avr/include/avr/power.h ****   </tr>
 220:/usr/lib/avr/include/avr/power.h **** 
 221:/usr/lib/avr/include/avr/power.h ****   <tr>
 222:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_enable()</td>
 223:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 3 .</td>
 224:/usr/lib/avr/include/avr/power.h ****   </tr>
 225:/usr/lib/avr/include/avr/power.h **** 
 226:/usr/lib/avr/include/avr/power.h ****   <tr>
 227:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_disable()</td>
 228:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 3. </td>
 229:/usr/lib/avr/include/avr/power.h ****   </tr>
 230:/usr/lib/avr/include/avr/power.h **** 
 231:/usr/lib/avr/include/avr/power.h ****   <tr>
 232:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_disable()</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>Disable the RTC module</td>
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_enable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Enable the RTC module</td>
 239:/usr/lib/avr/include/avr/power.h ****   </tr>
 240:/usr/lib/avr/include/avr/power.h **** 
 241:/usr/lib/avr/include/avr/power.h ****   <tr>
 242:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 243:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 244:/usr/lib/avr/include/avr/power.h ****   </tr>
 245:/usr/lib/avr/include/avr/power.h **** 
 246:/usr/lib/avr/include/avr/power.h ****   <tr>
 247:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 248:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 249:/usr/lib/avr/include/avr/power.h ****   </tr>
 250:/usr/lib/avr/include/avr/power.h **** 
 251:/usr/lib/avr/include/avr/power.h ****   <tr>
 252:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_disable()</td>
 253:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortC</td>
 254:/usr/lib/avr/include/avr/power.h ****   </tr>
 255:/usr/lib/avr/include/avr/power.h **** 
 256:/usr/lib/avr/include/avr/power.h ****   <tr>
 257:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_enable()</td>
 258:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortC</td>
 259:/usr/lib/avr/include/avr/power.h ****   </tr>
 260:/usr/lib/avr/include/avr/power.h **** 
 261:/usr/lib/avr/include/avr/power.h ****   <tr>
 262:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_disable()</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortD</td>
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortD</td>
 269:/usr/lib/avr/include/avr/power.h ****   </tr>
 270:/usr/lib/avr/include/avr/power.h **** 
 271:/usr/lib/avr/include/avr/power.h ****   <tr>
 272:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_disable()</td>
 273:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortC</td>
 274:/usr/lib/avr/include/avr/power.h ****   </tr>
 275:/usr/lib/avr/include/avr/power.h **** 
 276:/usr/lib/avr/include/avr/power.h ****   <tr>
 277:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_enable()</td>
 278:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortC</td>
 279:/usr/lib/avr/include/avr/power.h ****   </tr>
 280:/usr/lib/avr/include/avr/power.h **** 
 281:/usr/lib/avr/include/avr/power.h ****   <tr>
 282:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_disable()</td>
 283:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortD</td>
 284:/usr/lib/avr/include/avr/power.h ****   </tr>
 285:/usr/lib/avr/include/avr/power.h **** 
 286:/usr/lib/avr/include/avr/power.h ****   <tr>
 287:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_enable()</td>
 288:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortD</td>
 289:/usr/lib/avr/include/avr/power.h ****   </tr>
 290:/usr/lib/avr/include/avr/power.h **** 
 291:/usr/lib/avr/include/avr/power.h ****   <tr>
 292:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_disable()</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortE</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_enable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortE</td>
 299:/usr/lib/avr/include/avr/power.h ****   </tr>
 300:/usr/lib/avr/include/avr/power.h **** 
 301:/usr/lib/avr/include/avr/power.h ****   <tr>
 302:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_disable()</td>
 303:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortF</td>
 304:/usr/lib/avr/include/avr/power.h ****   </tr>
 305:/usr/lib/avr/include/avr/power.h **** 
 306:/usr/lib/avr/include/avr/power.h ****   <tr>
 307:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_enable()</td>
 308:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortF</td>
 309:/usr/lib/avr/include/avr/power.h ****   </tr>
 310:/usr/lib/avr/include/avr/power.h **** 
 311:/usr/lib/avr/include/avr/power.h ****   <tr>
 312:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_disable()</td>
 313:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC1 module on PortC</td>
 314:/usr/lib/avr/include/avr/power.h ****   </tr>
 315:/usr/lib/avr/include/avr/power.h **** 
 316:/usr/lib/avr/include/avr/power.h ****   <tr>
 317:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_enable()</td>
 318:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC1 module on PortC</td>
 319:/usr/lib/avr/include/avr/power.h ****   </tr>
 320:/usr/lib/avr/include/avr/power.h **** 
 321:/usr/lib/avr/include/avr/power.h ****   <tr>
 322:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_disable()</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC</td>
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC</td>
 329:/usr/lib/avr/include/avr/power.h ****   </tr>
 330:/usr/lib/avr/include/avr/power.h **** 
 331:/usr/lib/avr/include/avr/power.h ****   <tr>
 332:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_disable()</td>
 333:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE</td>
 334:/usr/lib/avr/include/avr/power.h ****   </tr>
 335:/usr/lib/avr/include/avr/power.h **** 
 336:/usr/lib/avr/include/avr/power.h ****   <tr>
 337:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_enable()</td>
 338:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE</td>
 339:/usr/lib/avr/include/avr/power.h ****   </tr>
 340:/usr/lib/avr/include/avr/power.h **** 
 341:/usr/lib/avr/include/avr/power.h ****   <tr>
 342:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 343:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 344:/usr/lib/avr/include/avr/power.h ****   </tr>
 345:/usr/lib/avr/include/avr/power.h **** 
 346:/usr/lib/avr/include/avr/power.h ****   <tr>
 347:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 348:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 349:/usr/lib/avr/include/avr/power.h ****   </tr>
 350:/usr/lib/avr/include/avr/power.h **** 
 351:/usr/lib/avr/include/avr/power.h ****   <tr>
 352:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 353:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 354:/usr/lib/avr/include/avr/power.h ****   </tr>
 355:/usr/lib/avr/include/avr/power.h **** 
 356:/usr/lib/avr/include/avr/power.h ****   <tr>
 357:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 358:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 359:/usr/lib/avr/include/avr/power.h ****   </tr>
 360:/usr/lib/avr/include/avr/power.h **** 
 361:/usr/lib/avr/include/avr/power.h ****   <tr>
 362:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 363:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 364:/usr/lib/avr/include/avr/power.h ****   </tr>
 365:/usr/lib/avr/include/avr/power.h **** 
 366:/usr/lib/avr/include/avr/power.h ****   <tr>
 367:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 368:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 369:/usr/lib/avr/include/avr/power.h ****   </tr>
 370:/usr/lib/avr/include/avr/power.h **** 
 371:/usr/lib/avr/include/avr/power.h ****   <tr>
 372:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 373:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 374:/usr/lib/avr/include/avr/power.h ****   </tr>
 375:/usr/lib/avr/include/avr/power.h **** 
 376:/usr/lib/avr/include/avr/power.h ****   <tr>
 377:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 378:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 379:/usr/lib/avr/include/avr/power.h ****   </tr>
 380:/usr/lib/avr/include/avr/power.h **** 
 381:/usr/lib/avr/include/avr/power.h ****   <tr>
 382:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 383:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 384:/usr/lib/avr/include/avr/power.h ****   </tr>
 385:/usr/lib/avr/include/avr/power.h **** 
 386:/usr/lib/avr/include/avr/power.h ****   <tr>
 387:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 388:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 389:/usr/lib/avr/include/avr/power.h ****   </tr>
 390:/usr/lib/avr/include/avr/power.h **** 
 391:/usr/lib/avr/include/avr/power.h ****   <tr>
 392:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 393:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 394:/usr/lib/avr/include/avr/power.h ****   </tr>
 395:/usr/lib/avr/include/avr/power.h **** 
 396:/usr/lib/avr/include/avr/power.h ****   <tr>
 397:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 398:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 399:/usr/lib/avr/include/avr/power.h ****   </tr>
 400:/usr/lib/avr/include/avr/power.h **** 
 401:/usr/lib/avr/include/avr/power.h ****   <tr>
 402:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 403:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 404:/usr/lib/avr/include/avr/power.h ****   </tr>
 405:/usr/lib/avr/include/avr/power.h **** 
 406:/usr/lib/avr/include/avr/power.h ****   <tr>
 407:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 408:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 409:/usr/lib/avr/include/avr/power.h ****   </tr>
 410:/usr/lib/avr/include/avr/power.h **** 
 411:/usr/lib/avr/include/avr/power.h ****   <tr>
 412:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 413:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 414:/usr/lib/avr/include/avr/power.h ****   </tr>
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h ****   <tr>
 417:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 418:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 419:/usr/lib/avr/include/avr/power.h ****   </tr>
 420:/usr/lib/avr/include/avr/power.h **** 
 421:/usr/lib/avr/include/avr/power.h ****   <tr>
 422:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 423:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 424:/usr/lib/avr/include/avr/power.h ****   </tr>
 425:/usr/lib/avr/include/avr/power.h **** 
 426:/usr/lib/avr/include/avr/power.h ****   <tr>
 427:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 428:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 429:/usr/lib/avr/include/avr/power.h ****   </tr>
 430:/usr/lib/avr/include/avr/power.h **** 
 431:/usr/lib/avr/include/avr/power.h ****   <tr>
 432:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 433:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 434:/usr/lib/avr/include/avr/power.h ****   </tr>
 435:/usr/lib/avr/include/avr/power.h **** 
 436:/usr/lib/avr/include/avr/power.h ****   <tr>
 437:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 438:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 439:/usr/lib/avr/include/avr/power.h ****   </tr>
 440:/usr/lib/avr/include/avr/power.h **** 
 441:/usr/lib/avr/include/avr/power.h ****   <tr>
 442:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 443:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 444:/usr/lib/avr/include/avr/power.h ****   </tr>
 445:/usr/lib/avr/include/avr/power.h **** 
 446:/usr/lib/avr/include/avr/power.h ****   <tr>
 447:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 448:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 449:/usr/lib/avr/include/avr/power.h ****   </tr>
 450:/usr/lib/avr/include/avr/power.h **** 
 451:/usr/lib/avr/include/avr/power.h ****   <tr>
 452:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 453:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 454:/usr/lib/avr/include/avr/power.h ****   </tr>
 455:/usr/lib/avr/include/avr/power.h **** 
 456:/usr/lib/avr/include/avr/power.h ****   <tr>
 457:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 458:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 459:/usr/lib/avr/include/avr/power.h ****   </tr>
 460:/usr/lib/avr/include/avr/power.h **** 
 461:/usr/lib/avr/include/avr/power.h ****   <tr>
 462:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_disable()</td>
 463:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC</td>
 464:/usr/lib/avr/include/avr/power.h ****   </tr>
 465:/usr/lib/avr/include/avr/power.h **** 
 466:/usr/lib/avr/include/avr/power.h ****   <tr>
 467:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_enable()</td>
 468:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC</td>
 469:/usr/lib/avr/include/avr/power.h ****   </tr>
 470:/usr/lib/avr/include/avr/power.h **** 
 471:/usr/lib/avr/include/avr/power.h ****   <tr>
 472:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_disable()</td>
 473:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD</td>
 474:/usr/lib/avr/include/avr/power.h ****   </tr>
 475:/usr/lib/avr/include/avr/power.h **** 
 476:/usr/lib/avr/include/avr/power.h ****   <tr>
 477:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_enable()</td>
 478:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD</td>
 479:/usr/lib/avr/include/avr/power.h ****   </tr>
 480:/usr/lib/avr/include/avr/power.h **** 
 481:/usr/lib/avr/include/avr/power.h ****   <tr>
 482:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_disable()</td>
 483:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE</td>
 484:/usr/lib/avr/include/avr/power.h ****   </tr>
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h ****   <tr>
 487:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_enable()</td>
 488:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE</td>
 489:/usr/lib/avr/include/avr/power.h ****   </tr>
 490:/usr/lib/avr/include/avr/power.h **** 
 491:/usr/lib/avr/include/avr/power.h ****   <tr>
 492:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_disable()</td>
 493:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF</td>
 494:/usr/lib/avr/include/avr/power.h ****   </tr>
 495:/usr/lib/avr/include/avr/power.h **** 
 496:/usr/lib/avr/include/avr/power.h ****   <tr>
 497:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_enable()</td>
 498:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF</td>
 499:/usr/lib/avr/include/avr/power.h ****   </tr>
 500:/usr/lib/avr/include/avr/power.h **** 
 501:/usr/lib/avr/include/avr/power.h ****   <tr>
 502:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 503:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 504:/usr/lib/avr/include/avr/power.h ****   </tr>
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h ****   <tr>
 507:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 508:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 509:/usr/lib/avr/include/avr/power.h ****   </tr>
 510:/usr/lib/avr/include/avr/power.h **** 
 511:/usr/lib/avr/include/avr/power.h ****   <tr>
 512:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 513:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 514:/usr/lib/avr/include/avr/power.h ****   </tr>
 515:/usr/lib/avr/include/avr/power.h **** 
 516:/usr/lib/avr/include/avr/power.h ****   <tr>
 517:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 518:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 519:/usr/lib/avr/include/avr/power.h ****   </tr>
 520:/usr/lib/avr/include/avr/power.h **** 
 521:/usr/lib/avr/include/avr/power.h ****   <tr>
 522:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 523:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 524:/usr/lib/avr/include/avr/power.h ****   </tr>
 525:/usr/lib/avr/include/avr/power.h **** 
 526:/usr/lib/avr/include/avr/power.h ****   <tr>
 527:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 528:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 529:/usr/lib/avr/include/avr/power.h ****   </tr>
 530:/usr/lib/avr/include/avr/power.h **** 
 531:/usr/lib/avr/include/avr/power.h ****   <tr>
 532:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 533:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 534:/usr/lib/avr/include/avr/power.h ****   </tr>
 535:/usr/lib/avr/include/avr/power.h **** 
 536:/usr/lib/avr/include/avr/power.h ****   <tr>
 537:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 538:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 539:/usr/lib/avr/include/avr/power.h ****   </tr>
 540:/usr/lib/avr/include/avr/power.h **** </table>
 541:/usr/lib/avr/include/avr/power.h **** </center>
 542:/usr/lib/avr/include/avr/power.h **** </small>
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** @} */
 545:/usr/lib/avr/include/avr/power.h **** 
 546:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRADC)
 547:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 548:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 549:/usr/lib/avr/include/avr/power.h **** #endif
 550:/usr/lib/avr/include/avr/power.h **** 
 551:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRCAN)
 552:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
 553:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
 554:/usr/lib/avr/include/avr/power.h **** #endif
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLCD)
 557:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 558:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 559:/usr/lib/avr/include/avr/power.h **** #endif
 560:/usr/lib/avr/include/avr/power.h **** 
 561:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLIN)
 562:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
 563:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
 564:/usr/lib/avr/include/avr/power.h **** #endif
 565:/usr/lib/avr/include/avr/power.h **** 
 566:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC)
 567:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
 568:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
 569:/usr/lib/avr/include/avr/power.h **** #endif
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC0)
 572:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 573:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 574:/usr/lib/avr/include/avr/power.h **** #endif
 575:/usr/lib/avr/include/avr/power.h **** 
 576:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC1)
 577:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 578:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 579:/usr/lib/avr/include/avr/power.h **** #endif
 580:/usr/lib/avr/include/avr/power.h **** 
 581:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC2)
 582:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 583:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 584:/usr/lib/avr/include/avr/power.h **** #endif
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSCR)
 587:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 588:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 589:/usr/lib/avr/include/avr/power.h **** #endif
 590:/usr/lib/avr/include/avr/power.h **** 
 591:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSPI)
 592:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 593:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 594:/usr/lib/avr/include/avr/power.h **** #endif
 595:/usr/lib/avr/include/avr/power.h **** 
 596:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM0)
 597:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 598:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 599:/usr/lib/avr/include/avr/power.h **** #endif
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM1)
 602:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 603:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 604:/usr/lib/avr/include/avr/power.h **** #endif
 605:/usr/lib/avr/include/avr/power.h **** 
 606:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM2)
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
 609:/usr/lib/avr/include/avr/power.h **** #endif
 610:/usr/lib/avr/include/avr/power.h **** 
 611:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTWI)
 612:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
 613:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
 614:/usr/lib/avr/include/avr/power.h **** #endif
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART)
 617:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 618:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 619:/usr/lib/avr/include/avr/power.h **** #endif
 620:/usr/lib/avr/include/avr/power.h **** 
 621:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART0)
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** #endif
 625:/usr/lib/avr/include/avr/power.h **** 
 626:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART1)
 627:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR &= (uint8_t)~(1 << PRUSART1))
 628:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR |= (uint8_t)(1 << PRUSART1))
 629:/usr/lib/avr/include/avr/power.h **** #endif
 630:/usr/lib/avr/include/avr/power.h **** 
 631:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSI)
 632:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
 633:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
 634:/usr/lib/avr/include/avr/power.h **** #endif
 635:/usr/lib/avr/include/avr/power.h **** 
 636:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRADC)
 637:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 638:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 639:/usr/lib/avr/include/avr/power.h **** #endif
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRC0)
 642:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
 643:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
 644:/usr/lib/avr/include/avr/power.h **** #endif
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCRC)
 647:/usr/lib/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
 648:/usr/lib/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
 649:/usr/lib/avr/include/avr/power.h **** #endif
 650:/usr/lib/avr/include/avr/power.h **** 
 651:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCU)
 652:/usr/lib/avr/include/avr/power.h **** #define power_crypto_enable()           (PRR0 &= (uint8_t)~(1 << PRCU))
 653:/usr/lib/avr/include/avr/power.h **** #define power_crypto_disable()          (PRR0 |= (uint8_t)(1 << PRCU))
 654:/usr/lib/avr/include/avr/power.h **** #endif
 655:/usr/lib/avr/include/avr/power.h **** 
 656:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRDS)
 657:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_enable()         (PRR0 &= (uint8_t)~(1 << PRDS))
 658:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_disable()        (PRR0 |= (uint8_t)(1 << PRDS))
 659:/usr/lib/avr/include/avr/power.h **** #endif
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFR)
 662:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR0 &= (uint8_t)~(1 << PRLFR))            
 663:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR0 |= (uint8_t)(1 << PRLFR))            
 664:/usr/lib/avr/include/avr/power.h **** #endif
 665:/usr/lib/avr/include/avr/power.h **** 
 666:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLIN)
 667:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()              (PRR0 &= (uint8_t)~(1 << PRLIN))
 668:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()             (PRR0 |= (uint8_t)(1 << PRLIN))
 669:/usr/lib/avr/include/avr/power.h **** #endif
 670:/usr/lib/avr/include/avr/power.h **** 
 671:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRPGA)
 672:/usr/lib/avr/include/avr/power.h **** #define power_pga_enable()              (PRR0 &= (uint8_t)~(1 << PRPGA))
 673:/usr/lib/avr/include/avr/power.h **** #define power_pga_disable()             (PRR0 |= (uint8_t)(1 << PRPGA))
 674:/usr/lib/avr/include/avr/power.h **** #endif
 675:/usr/lib/avr/include/avr/power.h **** 
 676:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRRXDC)
 677:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()  (PRR0 &= (uint8_t)~(1 << PRRXDC))
 678:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_disable() (PRR0 |= (uint8_t)(1 << PRRXDC))
 679:/usr/lib/avr/include/avr/power.h **** #endif
 680:/usr/lib/avr/include/avr/power.h **** 
 681:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRSPI)
 682:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
 683:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
 684:/usr/lib/avr/include/avr/power.h **** #endif
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT0)
 687:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRT0))
 688:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRT0))
 689:/usr/lib/avr/include/avr/power.h **** #endif
 690:/usr/lib/avr/include/avr/power.h **** 
 691:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM0)
 692:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM0))
 693:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRTIM0))
 694:/usr/lib/avr/include/avr/power.h **** #endif
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT1)
 697:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRT1))
 698:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRT1))
 699:/usr/lib/avr/include/avr/power.h **** #endif
 700:/usr/lib/avr/include/avr/power.h **** 
 701:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM1)
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM1))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRTIM1))
 704:/usr/lib/avr/include/avr/power.h **** #endif
 705:/usr/lib/avr/include/avr/power.h **** 
 706:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT2)
 707:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRT2))
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRT2))
 709:/usr/lib/avr/include/avr/power.h **** #endif
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM2)
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM2))
 713:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRTIM2))
 714:/usr/lib/avr/include/avr/power.h **** #endif
 715:/usr/lib/avr/include/avr/power.h **** 
 716:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT3)
 717:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR0 &= (uint8_t)~(1 << PRT3))
 718:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR0 |= (uint8_t)(1 << PRT3))
 719:/usr/lib/avr/include/avr/power.h **** #endif
 720:/usr/lib/avr/include/avr/power.h **** 
 721:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTM)
 722:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_enable()   (PRR0 &= (uint8_t)~(1 << PRTM))
 723:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_disable()  (PRR0 |= (uint8_t)(1 << PRTM))
 724:/usr/lib/avr/include/avr/power.h **** #endif
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI)
 727:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()              (PRR0 &= (uint8_t)~(1 << PRTWI))
 728:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()             (PRR0 |= (uint8_t)(1 << PRTWI))
 729:/usr/lib/avr/include/avr/power.h **** #endif
 730:/usr/lib/avr/include/avr/power.h **** 
 731:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTXDC)
 732:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()   (PRR0 &= (uint8_t)~(1 << PRTXDC))
 733:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()  (PRR0 |= (uint8_t)(1 << PRTXDC))
 734:/usr/lib/avr/include/avr/power.h **** #endif
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART0)
 737:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART0))
 738:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()          (PRR0 |= (uint8_t)(1 << PRUSART0))
 739:/usr/lib/avr/include/avr/power.h **** #endif
 740:/usr/lib/avr/include/avr/power.h **** 
 741:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART1)
 742:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART1))
 743:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR0 |= (uint8_t)(1 << PRUSART1))
 744:/usr/lib/avr/include/avr/power.h **** #endif
 745:/usr/lib/avr/include/avr/power.h **** 
 746:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVADC)
 747:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()             (PRR0 &= (uint8_t)~(1 << PRVADC))
 748:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()            (PRR0 |= (uint8_t)(1 << PRVADC))
 749:/usr/lib/avr/include/avr/power.h **** #endif
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVM)
 752:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
 753:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
 754:/usr/lib/avr/include/avr/power.h **** #endif
 755:/usr/lib/avr/include/avr/power.h **** 
 756:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVRM)
 757:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()              (PRR0 &= (uint8_t)~(1 << PRVRM))
 758:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()             (PRR0 |= (uint8_t)(1 << PRVRM))
 759:/usr/lib/avr/include/avr/power.h **** #endif
 760:/usr/lib/avr/include/avr/power.h **** 
 761:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRAES)
 762:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PRR1 &= (uint8_t)~(1 << PRAES))
 763:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PRR1 |= (uint8_t)(1 << PRAES))
 764:/usr/lib/avr/include/avr/power.h **** #endif
 765:/usr/lib/avr/include/avr/power.h **** 
 766:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRCI)
 767:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_enable()       (PRR1 &= (uint8_t)~(1 << PRCI))
 768:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_disable()      (PRR1 |= (uint8_t)(1 << PRCI))
 769:/usr/lib/avr/include/avr/power.h **** #endif
 770:/usr/lib/avr/include/avr/power.h **** 
 771:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRHSSPI)
 772:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()            (PRR1 &= (uint8_t)~(1 << PRHSSPI))
 773:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()           (PRR1 |= (uint8_t)(1 << PRHSSPI))
 774:/usr/lib/avr/include/avr/power.h **** #endif
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRKB)
 777:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()               (PRR1 &= (uint8_t)~(1 << PRKB))
 778:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()              (PRR1 |= (uint8_t)(1 << PRKB))
 779:/usr/lib/avr/include/avr/power.h **** #endif
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFR)
 782:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR1 &= (uint8_t)~(1 << PRLFR))            
 783:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR1 |= (uint8_t)(1 << PRLFR))            
 784:/usr/lib/avr/include/avr/power.h **** #endif
 785:/usr/lib/avr/include/avr/power.h **** 
 786:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSCI)
 787:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()              (PRR1 &= (uint8_t)~(1 << PRSCI))
 788:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()             (PRR1 |= (uint8_t)(1 << PRSCI))
 789:/usr/lib/avr/include/avr/power.h **** #endif
 790:/usr/lib/avr/include/avr/power.h **** 
 791:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT1)
 792:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
 793:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
 794:/usr/lib/avr/include/avr/power.h **** #endif
 795:/usr/lib/avr/include/avr/power.h **** 
 796:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT2)
 797:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
 798:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
 799:/usr/lib/avr/include/avr/power.h **** #endif
 800:/usr/lib/avr/include/avr/power.h **** 
 801:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT3)
 802:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
 803:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
 804:/usr/lib/avr/include/avr/power.h **** #endif
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT4)
 807:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
 808:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
 809:/usr/lib/avr/include/avr/power.h **** #endif
 810:/usr/lib/avr/include/avr/power.h **** 
 811:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT5)
 812:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
 813:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
 814:/usr/lib/avr/include/avr/power.h **** #endif
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM3)
 817:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM3))
 818:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRTIM3))
 819:/usr/lib/avr/include/avr/power.h **** #endif
 820:/usr/lib/avr/include/avr/power.h **** 
 821:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM4)
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM4))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRTIM4))
 824:/usr/lib/avr/include/avr/power.h **** #endif
 825:/usr/lib/avr/include/avr/power.h **** 
 826:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM5)
 827:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM5))
 828:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRTIM5))
 829:/usr/lib/avr/include/avr/power.h **** #endif
 830:/usr/lib/avr/include/avr/power.h **** 
 831:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTRX24)
 832:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_enable()      (PRR1 &= (uint8_t)~(1 << PRTRX24))
 833:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_disable()     (PRR1 |= (uint8_t)(1 << PRTRX24))
 834:/usr/lib/avr/include/avr/power.h **** #endif
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART1)
 837:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART1))
 838:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR1 |= (uint8_t)(1 << PRUSART1))
 839:/usr/lib/avr/include/avr/power.h **** #endif
 840:/usr/lib/avr/include/avr/power.h **** 
 841:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART2)
 842:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART2))
 843:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()          (PRR1 |= (uint8_t)(1 << PRUSART2))
 844:/usr/lib/avr/include/avr/power.h **** #endif
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSB)
 847:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PRR1 &= (uint8_t)~(1 << PRUSB))
 848:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PRR1 |= (uint8_t)(1 << PRUSB))
 849:/usr/lib/avr/include/avr/power.h **** #endif
 850:/usr/lib/avr/include/avr/power.h **** 
 851:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSBH)
 852:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()             (PRR1 &= (uint8_t)~(1 << PRUSBH))
 853:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()            (PRR1 |= (uint8_t)(1 << PRUSBH))
 854:/usr/lib/avr/include/avr/power.h **** #endif
 855:/usr/lib/avr/include/avr/power.h **** 
 856:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRDF)
 857:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
 858:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
 859:/usr/lib/avr/include/avr/power.h **** #endif
 860:/usr/lib/avr/include/avr/power.h **** 
 861:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRIDS)
 862:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
 863:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
 864:/usr/lib/avr/include/avr/power.h **** #endif
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM0)
 867:/usr/lib/avr/include/avr/power.h **** #define power_ram0_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM0))
 868:/usr/lib/avr/include/avr/power.h **** #define power_ram0_disable()            (PRR2 |= (uint8_t)(1 << PRRAM0))
 869:/usr/lib/avr/include/avr/power.h **** #endif
 870:/usr/lib/avr/include/avr/power.h **** 
 871:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM1)
 872:/usr/lib/avr/include/avr/power.h **** #define power_ram1_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM1))
 873:/usr/lib/avr/include/avr/power.h **** #define power_ram1_disable()            (PRR2 |= (uint8_t)(1 << PRRAM1))
 874:/usr/lib/avr/include/avr/power.h **** #endif
 875:/usr/lib/avr/include/avr/power.h **** 
 876:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM2)
 877:/usr/lib/avr/include/avr/power.h **** #define power_ram2_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM2))
 878:/usr/lib/avr/include/avr/power.h **** #define power_ram2_disable()            (PRR2 |= (uint8_t)(1 << PRRAM2))
 879:/usr/lib/avr/include/avr/power.h **** #endif
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM3)
 882:/usr/lib/avr/include/avr/power.h **** #define power_ram3_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM3))
 883:/usr/lib/avr/include/avr/power.h **** #define power_ram3_disable()            (PRR2 |= (uint8_t)(1 << PRRAM3))
 884:/usr/lib/avr/include/avr/power.h **** #endif
 885:/usr/lib/avr/include/avr/power.h **** 
 886:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRS)
 887:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
 888:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
 889:/usr/lib/avr/include/avr/power.h **** #endif
 890:/usr/lib/avr/include/avr/power.h **** 
 891:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSF)
 892:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
 893:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
 894:/usr/lib/avr/include/avr/power.h **** #endif
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSSM)
 897:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
 898:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
 899:/usr/lib/avr/include/avr/power.h **** #endif
 900:/usr/lib/avr/include/avr/power.h **** 
 901:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTM)
 902:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
 903:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
 904:/usr/lib/avr/include/avr/power.h **** #endif
 905:/usr/lib/avr/include/avr/power.h **** 
 906:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXA)
 907:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
 908:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
 909:/usr/lib/avr/include/avr/power.h **** #endif
 910:/usr/lib/avr/include/avr/power.h **** 
 911:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXB)
 912:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
 913:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
 914:/usr/lib/avr/include/avr/power.h **** #endif
 915:/usr/lib/avr/include/avr/power.h **** 
 916:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_AES)
 917:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 918:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PR_PRGEN |= (uint8_t)PR_AES_bm)
 919:/usr/lib/avr/include/avr/power.h **** #endif
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_DMA)
 922:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()              (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 923:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()             (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 924:/usr/lib/avr/include/avr/power.h **** #endif
 925:/usr/lib/avr/include/avr/power.h **** 
 926:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EBI)
 927:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()              (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 928:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable()             (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 929:/usr/lib/avr/include/avr/power.h **** #endif
 930:/usr/lib/avr/include/avr/power.h **** 
 931:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EDMA)
 932:/usr/lib/avr/include/avr/power.h **** #define power_edma_enable()             (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
 933:/usr/lib/avr/include/avr/power.h **** #define power_edma_disable()            (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
 934:/usr/lib/avr/include/avr/power.h **** #endif
 935:/usr/lib/avr/include/avr/power.h **** 
 936:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EVSYS)
 937:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()            (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 938:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()           (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 939:/usr/lib/avr/include/avr/power.h **** #endif
 940:/usr/lib/avr/include/avr/power.h **** 
 941:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_LCD)
 942:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()              (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
 943:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()             (PR_PRGEN |= (uint8_t)PR_LCD_bm)
 944:/usr/lib/avr/include/avr/power.h **** #endif
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_RTC)
 947:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()              (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 948:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable()             (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 949:/usr/lib/avr/include/avr/power.h **** #endif
 950:/usr/lib/avr/include/avr/power.h **** 
 951:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_USB)
 952:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PR_PRGEN &= (uint8_t)(PR_USB_bm))
 954:/usr/lib/avr/include/avr/power.h **** #endif
 955:/usr/lib/avr/include/avr/power.h **** 
 956:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_XCL)
 957:/usr/lib/avr/include/avr/power.h **** #define power_xcl_enable()              (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
 958:/usr/lib/avr/include/avr/power.h **** #define power_xcl_disable()             (PR_PRGEN |= (uint8_t)PR_XCL_bm)
 959:/usr/lib/avr/include/avr/power.h **** #endif
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_AC)
 962:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 963:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 964:/usr/lib/avr/include/avr/power.h **** #endif
 965:/usr/lib/avr/include/avr/power.h **** 
 966:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_ADC)
 967:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 968:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 969:/usr/lib/avr/include/avr/power.h **** #endif
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_DAC)
 972:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 973:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 974:/usr/lib/avr/include/avr/power.h **** #endif
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_AC)
 977:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 978:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 979:/usr/lib/avr/include/avr/power.h **** #endif
 980:/usr/lib/avr/include/avr/power.h **** 
 981:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_ADC)
 982:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 983:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 984:/usr/lib/avr/include/avr/power.h **** #endif
 985:/usr/lib/avr/include/avr/power.h **** 
 986:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_DAC)
 987:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 988:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 989:/usr/lib/avr/include/avr/power.h **** #endif
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_HIRES)
 992:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 993:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 994:/usr/lib/avr/include/avr/power.h **** #endif
 995:/usr/lib/avr/include/avr/power.h **** 
 996:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_SPI)
 997:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 998:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 999:/usr/lib/avr/include/avr/power.h **** #endif
1000:/usr/lib/avr/include/avr/power.h **** 
1001:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC0)
1002:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1003:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1004:/usr/lib/avr/include/avr/power.h **** #endif
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC1)
1007:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1008:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1009:/usr/lib/avr/include/avr/power.h **** #endif
1010:/usr/lib/avr/include/avr/power.h **** 
1011:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC4)
1012:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1013:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_disable()    (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1014:/usr/lib/avr/include/avr/power.h **** #endif
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC5)
1017:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1018:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_disable()    (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1019:/usr/lib/avr/include/avr/power.h **** #endif
1020:/usr/lib/avr/include/avr/power.h **** 
1021:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TWI)
1022:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1023:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1024:/usr/lib/avr/include/avr/power.h **** #endif
1025:/usr/lib/avr/include/avr/power.h **** 
1026:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART0)
1027:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1028:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1029:/usr/lib/avr/include/avr/power.h **** #endif
1030:/usr/lib/avr/include/avr/power.h **** 
1031:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART1)
1032:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1033:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1034:/usr/lib/avr/include/avr/power.h **** #endif
1035:/usr/lib/avr/include/avr/power.h **** 
1036:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_HIRES)
1037:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1038:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1039:/usr/lib/avr/include/avr/power.h **** #endif
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_SPI)
1042:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1043:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1044:/usr/lib/avr/include/avr/power.h **** #endif
1045:/usr/lib/avr/include/avr/power.h **** 
1046:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC0)
1047:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1048:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1049:/usr/lib/avr/include/avr/power.h **** #endif
1050:/usr/lib/avr/include/avr/power.h **** 
1051:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC1)
1052:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1053:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1054:/usr/lib/avr/include/avr/power.h **** #endif
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC5)
1057:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_enable()     (PR_PRPD  &= (uint8_t)~(PR_TC5_bm))
1058:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_disable()    (PR_PRPD  |= (uint8_t)PR_TC5_bm)
1059:/usr/lib/avr/include/avr/power.h **** #endif
1060:/usr/lib/avr/include/avr/power.h **** 
1061:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TWI)
1062:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1063:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1064:/usr/lib/avr/include/avr/power.h **** #endif
1065:/usr/lib/avr/include/avr/power.h **** 
1066:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART0)
1067:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1068:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1069:/usr/lib/avr/include/avr/power.h **** #endif
1070:/usr/lib/avr/include/avr/power.h **** 
1071:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART1)
1072:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1073:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1074:/usr/lib/avr/include/avr/power.h **** #endif
1075:/usr/lib/avr/include/avr/power.h **** 
1076:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_HIRES)
1077:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1078:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1079:/usr/lib/avr/include/avr/power.h **** #endif
1080:/usr/lib/avr/include/avr/power.h **** 
1081:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_SPI)
1082:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1083:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1084:/usr/lib/avr/include/avr/power.h **** #endif
1085:/usr/lib/avr/include/avr/power.h **** 
1086:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC0)
1087:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1088:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1089:/usr/lib/avr/include/avr/power.h **** #endif
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC1)
1092:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1093:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1094:/usr/lib/avr/include/avr/power.h **** #endif
1095:/usr/lib/avr/include/avr/power.h **** 
1096:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TWI)
1097:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1098:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1099:/usr/lib/avr/include/avr/power.h **** #endif
1100:/usr/lib/avr/include/avr/power.h **** 
1101:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART0)
1102:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1103:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1104:/usr/lib/avr/include/avr/power.h **** #endif
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART1)
1107:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1108:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1109:/usr/lib/avr/include/avr/power.h **** #endif
1110:/usr/lib/avr/include/avr/power.h **** 
1111:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_HIRES)
1112:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1113:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1114:/usr/lib/avr/include/avr/power.h **** #endif
1115:/usr/lib/avr/include/avr/power.h **** 
1116:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_SPI)
1117:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1118:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1119:/usr/lib/avr/include/avr/power.h **** #endif
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC0)
1122:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1123:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1124:/usr/lib/avr/include/avr/power.h **** #endif
1125:/usr/lib/avr/include/avr/power.h **** 
1126:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC1)
1127:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1128:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1129:/usr/lib/avr/include/avr/power.h **** #endif
1130:/usr/lib/avr/include/avr/power.h **** 
1131:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TWI)
1132:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1133:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1134:/usr/lib/avr/include/avr/power.h **** #endif
1135:/usr/lib/avr/include/avr/power.h **** 
1136:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART0)
1137:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1138:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1139:/usr/lib/avr/include/avr/power.h **** #endif
1140:/usr/lib/avr/include/avr/power.h **** 
1141:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART1)
1142:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1143:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1144:/usr/lib/avr/include/avr/power.h **** #endif
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** 
1147:/usr/lib/avr/include/avr/power.h **** static __inline void
1148:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1149:/usr/lib/avr/include/avr/power.h **** __power_all_enable()
1150:/usr/lib/avr/include/avr/power.h **** {
1151:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1152:/usr/lib/avr/include/avr/power.h ****     PRR &= (uint8_t)~(__AVR_HAVE_PRR);
1153:/usr/lib/avr/include/avr/power.h **** #endif
1154:/usr/lib/avr/include/avr/power.h **** 
1155:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1156:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~(__AVR_HAVE_PRR0);
1157:/usr/lib/avr/include/avr/power.h **** #endif
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1160:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(__AVR_HAVE_PRR1);
1161:/usr/lib/avr/include/avr/power.h **** #endif
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1164:/usr/lib/avr/include/avr/power.h ****    PRR2 &= (uint8_t)~(__AVR_HAVE_PRR2);
1165:/usr/lib/avr/include/avr/power.h **** #endif
1166:/usr/lib/avr/include/avr/power.h **** 
1167:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1168:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(__AVR_HAVE_PRGEN);
1169:/usr/lib/avr/include/avr/power.h **** #endif
1170:/usr/lib/avr/include/avr/power.h **** 
1171:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1172:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(__AVR_HAVE_PRPA);
1173:/usr/lib/avr/include/avr/power.h **** #endif
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1176:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(__AVR_HAVE_PRPB);
1177:/usr/lib/avr/include/avr/power.h **** #endif
1178:/usr/lib/avr/include/avr/power.h **** 
1179:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1180:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(__AVR_HAVE_PRPC);
1181:/usr/lib/avr/include/avr/power.h **** #endif
1182:/usr/lib/avr/include/avr/power.h **** 
1183:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1184:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(__AVR_HAVE_PRPD);
1185:/usr/lib/avr/include/avr/power.h **** #endif
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1188:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(__AVR_HAVE_PRPE);
1189:/usr/lib/avr/include/avr/power.h **** #endif
1190:/usr/lib/avr/include/avr/power.h **** 
1191:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1192:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(__AVR_HAVE_PRPF);
1193:/usr/lib/avr/include/avr/power.h **** #endif
1194:/usr/lib/avr/include/avr/power.h **** }
1195:/usr/lib/avr/include/avr/power.h **** 
1196:/usr/lib/avr/include/avr/power.h **** static __inline void
1197:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1198:/usr/lib/avr/include/avr/power.h **** __power_all_disable()
1199:/usr/lib/avr/include/avr/power.h **** {
1200:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1201:/usr/lib/avr/include/avr/power.h ****     PRR |= (uint8_t)(__AVR_HAVE_PRR);
1202:/usr/lib/avr/include/avr/power.h **** #endif
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1205:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)(__AVR_HAVE_PRR0);
1206:/usr/lib/avr/include/avr/power.h **** #endif
1207:/usr/lib/avr/include/avr/power.h **** 
1208:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1209:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(__AVR_HAVE_PRR1);
1210:/usr/lib/avr/include/avr/power.h **** #endif
1211:/usr/lib/avr/include/avr/power.h **** 
1212:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1213:/usr/lib/avr/include/avr/power.h ****     PRR2 |= (uint8_t)(__AVR_HAVE_PRR2);
1214:/usr/lib/avr/include/avr/power.h **** #endif
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1217:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(__AVR_HAVE_PRGEN);
1218:/usr/lib/avr/include/avr/power.h **** #endif
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1221:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(__AVR_HAVE_PRPA);
1222:/usr/lib/avr/include/avr/power.h **** #endif
1223:/usr/lib/avr/include/avr/power.h **** 
1224:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1225:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(__AVR_HAVE_PRPB);
1226:/usr/lib/avr/include/avr/power.h **** #endif
1227:/usr/lib/avr/include/avr/power.h **** 
1228:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1229:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(__AVR_HAVE_PRPC);
1230:/usr/lib/avr/include/avr/power.h **** #endif
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1233:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(__AVR_HAVE_PRPD);
1234:/usr/lib/avr/include/avr/power.h **** #endif
1235:/usr/lib/avr/include/avr/power.h **** 
1236:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1237:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(__AVR_HAVE_PRPE);
1238:/usr/lib/avr/include/avr/power.h **** #endif
1239:/usr/lib/avr/include/avr/power.h **** 
1240:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1241:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(__AVR_HAVE_PRPF);
1242:/usr/lib/avr/include/avr/power.h **** #endif
1243:/usr/lib/avr/include/avr/power.h **** }
1244:/usr/lib/avr/include/avr/power.h **** 
1245:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_enable
1246:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() __power_all_enable()
1247:/usr/lib/avr/include/avr/power.h **** #endif
1248:/usr/lib/avr/include/avr/power.h **** 
1249:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_disable
1250:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() __power_all_disable()
1251:/usr/lib/avr/include/avr/power.h **** #endif
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1254:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1255:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1256:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1257:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1258:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1259:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1260:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1261:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
1262:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
1263:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1264:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1265:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1266:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1267:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1268:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1269:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1270:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1271:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1272:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
1273:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
1274:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA6617C__) \
1275:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA664251__) \
1276:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1277:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1278:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
1279:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1280:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1281:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1282:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1283:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1284:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1285:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1286:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
1287:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1288:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1289:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1290:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
1291:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1292:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1293:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1294:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
1295:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PB__) \
1296:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1297:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1298:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1299:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1300:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
1301:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1302:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
1303:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1304:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1305:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1310:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1311:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1312:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
1313:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
1314:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1315:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1316:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
1317:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
1318:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1319:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1320:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1321:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1323:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1324:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1325:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1326:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
1327:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
1328:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1329:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1330:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1331:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1332:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1333:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1334:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1335:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
1336:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PB__) \
1337:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1338:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1339:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1340:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1341:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1342:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1343:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1344:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1345:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PB__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1372:/usr/lib/avr/include/avr/power.h **** 
1373:/usr/lib/avr/include/avr/power.h **** 
1374:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1375:/usr/lib/avr/include/avr/power.h **** 
1376:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1377:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1378:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low.
1379:/usr/lib/avr/include/avr/power.h **** On some earlier AVRs (ATmega103, ATmega64, ATmega128), similar
1380:/usr/lib/avr/include/avr/power.h **** functionality can be achieved through the XTAL Divide Control Register.
1381:/usr/lib/avr/include/avr/power.h **** Below are two macros and an enumerated type that can be used to
1382:/usr/lib/avr/include/avr/power.h **** interface to the Clock Prescale Register or
1383:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1384:/usr/lib/avr/include/avr/power.h **** 
1385:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a clock prescaler. On those devices
1386:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register or XTAL Divide Control Register, these
1387:/usr/lib/avr/include/avr/power.h **** macros are not available.
1388:/usr/lib/avr/include/avr/power.h **** */
1389:/usr/lib/avr/include/avr/power.h **** 
1390:/usr/lib/avr/include/avr/power.h **** 
1391:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1392:/usr/lib/avr/include/avr/power.h **** \code 
1393:/usr/lib/avr/include/avr/power.h **** typedef enum
1394:/usr/lib/avr/include/avr/power.h **** {
1395:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1396:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1397:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1398:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1399:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1400:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1401:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1402:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1403:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1404:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1405:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1406:/usr/lib/avr/include/avr/power.h **** \endcode
1407:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1408:/usr/lib/avr/include/avr/power.h **** System Clock Prescale Register.
1409:/usr/lib/avr/include/avr/power.h **** 
1410:/usr/lib/avr/include/avr/power.h **** \code
1411:/usr/lib/avr/include/avr/power.h **** typedef enum
1412:/usr/lib/avr/include/avr/power.h **** {
1413:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 1,
1414:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 2,
1415:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 4,
1416:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 8,
1417:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 16,
1418:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 32,
1419:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 64,
1420:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 128
1421:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1422:/usr/lib/avr/include/avr/power.h **** \endcode
1423:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1424:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1425:/usr/lib/avr/include/avr/power.h **** 
1426:/usr/lib/avr/include/avr/power.h **** */
1427:/usr/lib/avr/include/avr/power.h **** typedef enum
1428:/usr/lib/avr/include/avr/power.h **** {
1429:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1430:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1431:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1432:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1433:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1434:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1435:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1436:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1437:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1438:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
1439:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1440:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1441:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1442:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1443:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1444:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
1445:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1446:/usr/lib/avr/include/avr/power.h **** #endif
1447:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1448:/usr/lib/avr/include/avr/power.h **** 
1449:/usr/lib/avr/include/avr/power.h **** 
1450:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1451:/usr/lib/avr/include/avr/power.h **** 
1452:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1453:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1454:/usr/lib/avr/include/avr/power.h **** 
1455:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1456:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1457:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1458:/usr/lib/avr/include/avr/power.h **** 
1459:/usr/lib/avr/include/avr/power.h **** The type of \c x is \c clock_div_t.
1460:/usr/lib/avr/include/avr/power.h **** 
1461:/usr/lib/avr/include/avr/power.h **** \note For device with XTAL Divide Control Register (XDIV), \c x can actually range
1462:/usr/lib/avr/include/avr/power.h **** from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1467:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 272               		.loc 4 1467 0
 273 001c 90E8      		ldi r25,lo8(-128)
 274 001e 80E0      		ldi r24,0
 275               	/* #APP */
 276               	 ;  1467 "/usr/lib/avr/include/avr/power.h" 1
 277 0020 0FB6      		in __tmp_reg__,__SREG__
 278 0022 F894      		cli
 279 0024 9093 6100 		sts 97, r25
 280 0028 8093 6100 		sts 97, r24
 281 002c 0FBE      		out __SREG__, __tmp_reg__
 282               	 ;  0 "" 2
 283               	/* #NOAPP */
 284               	.LBE107:
 285               	.LBE106:
 172:Caterina-BathMouse.c **** 	MCUCR = (1 << IVSEL);
 286               		.loc 1 172 0
 287 002e 81E0      		ldi r24,lo8(1)
 288 0030 85BF      		out 0x35,r24
 173:Caterina-BathMouse.c **** 	
 289               		.loc 1 173 0
 290 0032 82E0      		ldi r24,lo8(2)
 291 0034 85BF      		out 0x35,r24
 175:Caterina-BathMouse.c **** 	CPU_PRESCALE(0); 
 292               		.loc 1 175 0
 293 0036 209A      		sbi 0x4,0
 294 0038 279A      		sbi 0x4,7
 295 003a 279A      		sbi 0x4,7
 176:Caterina-BathMouse.c **** 	L_LED_OFF();
 296               		.loc 1 176 0
 297 003c E1E6      		ldi r30,lo8(97)
 298 003e F0E0      		ldi r31,0
 299 0040 9083      		st Z,r25
 300 0042 1082      		st Z,__zero_reg__
 177:Caterina-BathMouse.c **** 	TX_LED_OFF();
 301               		.loc 1 177 0
 302 0044 2898      		cbi 0x5,0
 187:Caterina-BathMouse.c **** 	OCR1AL = 250;
 303               		.loc 1 187 0
 304 0046 1092 8900 		sts 137,__zero_reg__
 188:Caterina-BathMouse.c **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 305               		.loc 1 188 0
 306 004a 9AEF      		ldi r25,lo8(-6)
 307 004c 9093 8800 		sts 136,r25
 189:Caterina-BathMouse.c **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 308               		.loc 1 189 0
 309 0050 8093 6F00 		sts 111,r24
 190:Caterina-BathMouse.c **** 
 310               		.loc 1 190 0
 311 0054 83E0      		ldi r24,lo8(3)
 312 0056 8093 8100 		sts 129,r24
 193:Caterina-BathMouse.c **** }
 313               		.loc 1 193 0
 314 005a 0C94 0000 		jmp USB_Init
 315               	.LVL10:
 316               		.cfi_endproc
 317               	.LFE102:
 319               		.section	.text.__vector_17,"ax",@progbits
 320               	.global	__vector_17
 322               	__vector_17:
 323               	.LFB103:
 198:Caterina-BathMouse.c **** 	/* Reset counter */
 324               		.loc 1 198 0
 325               		.cfi_startproc
 326 0000 1F92      		push r1
 327               	.LCFI0:
 328               		.cfi_def_cfa_offset 3
 329               		.cfi_offset 1, -2
 330 0002 0F92      		push r0
 331               	.LCFI1:
 332               		.cfi_def_cfa_offset 4
 333               		.cfi_offset 0, -3
 334 0004 0FB6      		in r0,__SREG__
 335 0006 0F92      		push r0
 336 0008 1124      		clr __zero_reg__
 337 000a 2F93      		push r18
 338               	.LCFI2:
 339               		.cfi_def_cfa_offset 5
 340               		.cfi_offset 18, -4
 341 000c 8F93      		push r24
 342               	.LCFI3:
 343               		.cfi_def_cfa_offset 6
 344               		.cfi_offset 24, -5
 345 000e 9F93      		push r25
 346               	.LCFI4:
 347               		.cfi_def_cfa_offset 7
 348               		.cfi_offset 25, -6
 349 0010 EF93      		push r30
 350               	.LCFI5:
 351               		.cfi_def_cfa_offset 8
 352               		.cfi_offset 30, -7
 353 0012 FF93      		push r31
 354               	.LCFI6:
 355               		.cfi_def_cfa_offset 9
 356               		.cfi_offset 31, -8
 357               	/* prologue: Signal */
 358               	/* frame size = 0 */
 359               	/* stack size = 8 */
 360               	.L__stack_usage = 8
 200:Caterina-BathMouse.c **** 	TCNT1L = 0;
 361               		.loc 1 200 0
 362 0014 1092 8500 		sts 133,__zero_reg__
 201:Caterina-BathMouse.c **** 
 363               		.loc 1 201 0
 364 0018 1092 8400 		sts 132,__zero_reg__
 204:Caterina-BathMouse.c **** 		TX_LED_OFF();
 365               		.loc 1 204 0
 366 001c 8091 0000 		lds r24,TxLEDPulse
 367 0020 9091 0000 		lds r25,TxLEDPulse+1
 368 0024 0097      		sbiw r24,0
 369 0026 01F0      		breq .L28
 204:Caterina-BathMouse.c **** 		TX_LED_OFF();
 370               		.loc 1 204 0 is_stmt 0 discriminator 1
 371 0028 0197      		sbiw r24,1
 372 002a 9093 0000 		sts TxLEDPulse+1,r25
 373 002e 8093 0000 		sts TxLEDPulse,r24
 374               	.L28:
 206:Caterina-BathMouse.c **** 		RX_LED_OFF();
 375               		.loc 1 206 0 is_stmt 1
 376 0032 8091 0000 		lds r24,RxLEDPulse
 377 0036 9091 0000 		lds r25,RxLEDPulse+1
 378 003a 0097      		sbiw r24,0
 379 003c 01F0      		breq .L29
 206:Caterina-BathMouse.c **** 		RX_LED_OFF();
 380               		.loc 1 206 0 is_stmt 0 discriminator 1
 381 003e 0197      		sbiw r24,1
 382 0040 9093 0000 		sts RxLEDPulse+1,r25
 383 0044 8093 0000 		sts RxLEDPulse,r24
 384               	.L29:
 385               	.LVL11:
 386               	.LBB108:
 209:Caterina-BathMouse.c **** 		Timeout++;
 387               		.loc 1 209 0 is_stmt 1
 388 0048 E0E0      		ldi r30,0
 389 004a F0E0      		ldi r31,0
 390               	/* #APP */
 391               	 ;  209 "Caterina-BathMouse.c" 1
 392 004c 8591      		lpm r24, Z+
 393 004e 9491      		lpm r25, Z
 394               		
 395               	 ;  0 "" 2
 396               	.LVL12:
 397               	/* #NOAPP */
 398               	.LBE108:
 399 0050 0196      		adiw r24,1
 400 0052 01F0      		breq .L27
 210:Caterina-BathMouse.c **** }
 401               		.loc 1 210 0
 402 0054 8091 0000 		lds r24,Timeout
 403 0058 9091 0000 		lds r25,Timeout+1
 404               	.LVL13:
 405 005c 0196      		adiw r24,1
 406 005e 9093 0000 		sts Timeout+1,r25
 407 0062 8093 0000 		sts Timeout,r24
 408               	.L27:
 409               	/* epilogue start */
 211:Caterina-BathMouse.c **** 
 410               		.loc 1 211 0
 411 0066 FF91      		pop r31
 412 0068 EF91      		pop r30
 413 006a 9F91      		pop r25
 414 006c 8F91      		pop r24
 415 006e 2F91      		pop r18
 416 0070 0F90      		pop r0
 417 0072 0FBE      		out __SREG__,r0
 418 0074 0F90      		pop r0
 419 0076 1F90      		pop r1
 420 0078 1895      		reti
 421               		.cfi_endproc
 422               	.LFE103:
 424               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 425               	.global	EVENT_USB_Device_ConfigurationChanged
 427               	EVENT_USB_Device_ConfigurationChanged:
 428               	.LFB104:
 217:Caterina-BathMouse.c **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 429               		.loc 1 217 0
 430               		.cfi_startproc
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 0 */
 434               	.L__stack_usage = 0
 435               	.LVL14:
 436               	.LBB109:
 437               	.LBB110:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 438               		.loc 2 276 0
 439 0000 42E0      		ldi r20,lo8(2)
 440 0002 61EC      		ldi r22,lo8(-63)
 441 0004 82E0      		ldi r24,lo8(2)
 442 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 443               	.LVL15:
 444               	.LBE110:
 445               	.LBE109:
 446               	.LBB111:
 447               	.LBB112:
 448 000a 42E1      		ldi r20,lo8(18)
 449 000c 61E8      		ldi r22,lo8(-127)
 450 000e 83E0      		ldi r24,lo8(3)
 451 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 452               	.LVL16:
 453               	.LBE112:
 454               	.LBE111:
 455               	.LBB113:
 456               	.LBB114:
 457 0014 42E1      		ldi r20,lo8(18)
 458 0016 60E8      		ldi r22,lo8(-128)
 459 0018 84E0      		ldi r24,lo8(4)
 460 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 461               	.LVL17:
 462               	.LBE114:
 463               	.LBE113:
 464               		.cfi_endproc
 465               	.LFE104:
 467               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 468               	.global	EVENT_USB_Device_ControlRequest
 470               	EVENT_USB_Device_ControlRequest:
 471               	.LFB105:
 237:Caterina-BathMouse.c **** 	/* Ignore any requests that aren't directed to the CDC interface */
 472               		.loc 1 237 0
 473               		.cfi_startproc
 474               	/* prologue: function */
 475               	/* frame size = 0 */
 476               	/* stack size = 0 */
 477               	.L__stack_usage = 0
 239:Caterina-BathMouse.c **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 478               		.loc 1 239 0
 479 0000 8091 0000 		lds r24,USB_ControlRequest
 480 0004 982F      		mov r25,r24
 481 0006 9F77      		andi r25,lo8(127)
 482 0008 9132      		cpi r25,lo8(33)
 483 000a 01F4      		brne .L41
 246:Caterina-BathMouse.c **** 	{
 484               		.loc 1 246 0
 485 000c 9091 0000 		lds r25,USB_ControlRequest+1
 486 0010 9032      		cpi r25,lo8(32)
 487 0012 01F0      		breq .L43
 488 0014 9132      		cpi r25,lo8(33)
 489 0016 01F4      		brne .L41
 249:Caterina-BathMouse.c **** 			{
 490               		.loc 1 249 0
 491 0018 813A      		cpi r24,lo8(-95)
 492 001a 01F4      		brne .L41
 493               	.LBB115:
 494               	.LBB116:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 495               		.loc 2 504 0
 496 001c 8091 E800 		lds r24,232
 497 0020 877F      		andi r24,lo8(-9)
 498 0022 8093 E800 		sts 232,r24
 499               	.LBE116:
 500               	.LBE115:
 254:Caterina-BathMouse.c **** 				Endpoint_ClearOUT();
 501               		.loc 1 254 0
 502 0026 67E0      		ldi r22,lo8(7)
 503 0028 70E0      		ldi r23,0
 504 002a 80E0      		ldi r24,lo8(LineEncoding)
 505 002c 90E0      		ldi r25,hi8(LineEncoding)
 506 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 507               	.LVL18:
 508               	.LBB117:
 509               	.LBB118:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 510               		.loc 2 531 0
 511 0032 8091 E800 		lds r24,232
 512 0036 8B77      		andi r24,lo8(123)
 513 0038 00C0      		rjmp .L45
 514               	.L43:
 515               	.LBE118:
 516               	.LBE117:
 260:Caterina-BathMouse.c **** 			{
 517               		.loc 1 260 0
 518 003a 8132      		cpi r24,lo8(33)
 519 003c 01F4      		brne .L41
 520               	.LBB119:
 521               	.LBB120:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522               		.loc 2 504 0
 523 003e 8091 E800 		lds r24,232
 524 0042 877F      		andi r24,lo8(-9)
 525 0044 8093 E800 		sts 232,r24
 526               	.LBE120:
 527               	.LBE119:
 265:Caterina-BathMouse.c **** 				Endpoint_ClearIN();
 528               		.loc 1 265 0
 529 0048 67E0      		ldi r22,lo8(7)
 530 004a 70E0      		ldi r23,0
 531 004c 80E0      		ldi r24,lo8(LineEncoding)
 532 004e 90E0      		ldi r25,hi8(LineEncoding)
 533 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 534               	.LVL19:
 535               	.LBB121:
 536               	.LBB122:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 537               		.loc 2 516 0
 538 0054 8091 E800 		lds r24,232
 539 0058 8E77      		andi r24,lo8(126)
 540               	.L45:
 541 005a 8093 E800 		sts 232,r24
 542               	.L41:
 543 005e 0895      		ret
 544               	.LBE122:
 545               	.LBE121:
 546               		.cfi_endproc
 547               	.LFE105:
 549               		.section	.rodata.str1.1,"aMS",@progbits,1
 550               	.LC0:
 551 0000 4341 5445 		.string	"CATERINA"
 551      5249 4E41 
 551      00
 552               		.section	.text.CDC_Task,"ax",@progbits
 553               	.global	CDC_Task
 555               	CDC_Task:
 556               	.LFB109:
 449:Caterina-BathMouse.c **** }
 450:Caterina-BathMouse.c **** 
 451:Caterina-BathMouse.c **** #define STK_OK              0x10
 452:Caterina-BathMouse.c **** #define STK_INSYNC          0x14  // ' '
 453:Caterina-BathMouse.c **** #define CRC_EOP             0x20  // 'SPACE'
 454:Caterina-BathMouse.c **** #define STK_GET_SYNC        0x30  // '0'
 455:Caterina-BathMouse.c **** 
 456:Caterina-BathMouse.c **** #define STK_GET_PARAMETER   0x41  // 'A'
 457:Caterina-BathMouse.c **** #define STK_SET_DEVICE      0x42  // 'B'
 458:Caterina-BathMouse.c **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 459:Caterina-BathMouse.c **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 460:Caterina-BathMouse.c **** #define STK_UNIVERSAL       0x56  // 'V'
 461:Caterina-BathMouse.c **** #define STK_PROG_PAGE       0x64  // 'd'
 462:Caterina-BathMouse.c **** #define STK_READ_PAGE       0x74  // 't'
 463:Caterina-BathMouse.c **** #define STK_READ_SIGN       0x75  // 'u'
 464:Caterina-BathMouse.c **** 
 465:Caterina-BathMouse.c **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 466:Caterina-BathMouse.c ****  *  and send the appropriate response back to the host.
 467:Caterina-BathMouse.c ****  */
 468:Caterina-BathMouse.c **** void CDC_Task(void)
 469:Caterina-BathMouse.c **** {
 557               		.loc 1 469 0
 558               		.cfi_startproc
 559 0000 6F92      		push r6
 560               	.LCFI7:
 561               		.cfi_def_cfa_offset 3
 562               		.cfi_offset 6, -2
 563 0002 7F92      		push r7
 564               	.LCFI8:
 565               		.cfi_def_cfa_offset 4
 566               		.cfi_offset 7, -3
 567 0004 8F92      		push r8
 568               	.LCFI9:
 569               		.cfi_def_cfa_offset 5
 570               		.cfi_offset 8, -4
 571 0006 9F92      		push r9
 572               	.LCFI10:
 573               		.cfi_def_cfa_offset 6
 574               		.cfi_offset 9, -5
 575 0008 AF92      		push r10
 576               	.LCFI11:
 577               		.cfi_def_cfa_offset 7
 578               		.cfi_offset 10, -6
 579 000a BF92      		push r11
 580               	.LCFI12:
 581               		.cfi_def_cfa_offset 8
 582               		.cfi_offset 11, -7
 583 000c CF92      		push r12
 584               	.LCFI13:
 585               		.cfi_def_cfa_offset 9
 586               		.cfi_offset 12, -8
 587 000e DF92      		push r13
 588               	.LCFI14:
 589               		.cfi_def_cfa_offset 10
 590               		.cfi_offset 13, -9
 591 0010 EF92      		push r14
 592               	.LCFI15:
 593               		.cfi_def_cfa_offset 11
 594               		.cfi_offset 14, -10
 595 0012 FF92      		push r15
 596               	.LCFI16:
 597               		.cfi_def_cfa_offset 12
 598               		.cfi_offset 15, -11
 599 0014 0F93      		push r16
 600               	.LCFI17:
 601               		.cfi_def_cfa_offset 13
 602               		.cfi_offset 16, -12
 603 0016 1F93      		push r17
 604               	.LCFI18:
 605               		.cfi_def_cfa_offset 14
 606               		.cfi_offset 17, -13
 607 0018 CF93      		push r28
 608               	.LCFI19:
 609               		.cfi_def_cfa_offset 15
 610               		.cfi_offset 28, -14
 611 001a DF93      		push r29
 612               	.LCFI20:
 613               		.cfi_def_cfa_offset 16
 614               		.cfi_offset 29, -15
 615               	/* prologue: function */
 616               	/* frame size = 0 */
 617               	/* stack size = 14 */
 618               	.L__stack_usage = 14
 619               	.LVL20:
 620               	.LBB155:
 621               	.LBB156:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 622               		.loc 2 330 0
 623 001c 84E0      		ldi r24,lo8(4)
 624 001e 8093 E900 		sts 233,r24
 625               	.LBE156:
 626               	.LBE155:
 627               	.LBB157:
 628               	.LBB158:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 629               		.loc 2 479 0
 630 0022 8091 E800 		lds r24,232
 631               	.LBE158:
 632               	.LBE157:
 470:Caterina-BathMouse.c **** 	/* Select the OUT endpoint */
 471:Caterina-BathMouse.c **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 472:Caterina-BathMouse.c **** 
 473:Caterina-BathMouse.c **** 	/* Check if endpoint has a command in it sent from the host */
 474:Caterina-BathMouse.c **** 	if (!(Endpoint_IsOUTReceived()))
 633               		.loc 1 474 0
 634 0026 82FF      		sbrs r24,2
 635 0028 00C0      		rjmp .L46
 475:Caterina-BathMouse.c **** 	  return;
 476:Caterina-BathMouse.c **** 	  
 477:Caterina-BathMouse.c **** 	RX_LED_ON();
 478:Caterina-BathMouse.c **** 	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 636               		.loc 1 478 0
 637 002a 84E6      		ldi r24,lo8(100)
 638 002c 90E0      		ldi r25,0
 639 002e 9093 0000 		sts RxLEDPulse+1,r25
 640 0032 8093 0000 		sts RxLEDPulse,r24
 479:Caterina-BathMouse.c **** 
 480:Caterina-BathMouse.c **** 	/* Read in the bootloader command (first byte sent from host) */
 481:Caterina-BathMouse.c **** 	uint8_t Command = FetchNextCommandByte();
 641               		.loc 1 481 0
 642 0036 0E94 0000 		call FetchNextCommandByte
 643               	.LVL21:
 644 003a C82F      		mov r28,r24
 645               	.LVL22:
 482:Caterina-BathMouse.c **** 
 483:Caterina-BathMouse.c **** 	if (Command == 'E')
 646               		.loc 1 483 0
 647 003c 8534      		cpi r24,lo8(69)
 648 003e 01F4      		brne .L49
 484:Caterina-BathMouse.c **** 	{
 485:Caterina-BathMouse.c **** 		/* We nearly run out the bootloader timeout clock, 
 486:Caterina-BathMouse.c **** 		* leaving just a few hundred milliseconds so the 
 487:Caterina-BathMouse.c **** 		* bootloder has time to respond and service any 
 488:Caterina-BathMouse.c **** 		* subsequent requests */
 489:Caterina-BathMouse.c **** 		Timeout = TIMEOUT_PERIOD - 500;
 649               		.loc 1 489 0
 650 0040 8CE4      		ldi r24,lo8(76)
 651 0042 9DE1      		ldi r25,lo8(29)
 652               	.LVL23:
 653 0044 9093 0000 		sts Timeout+1,r25
 654 0048 8093 0000 		sts Timeout,r24
 655               	.L50:
 490:Caterina-BathMouse.c **** 	
 491:Caterina-BathMouse.c **** 		/* Re-enable RWW section - must be done here in case 
 492:Caterina-BathMouse.c **** 		 * user has disabled verification on upload.  */
 493:Caterina-BathMouse.c **** 		boot_rww_enable_safe();		
 656               		.loc 1 493 0 discriminator 1
 657 004c 07B6      		in __tmp_reg__,0x37
 658 004e 00FC      		sbrc __tmp_reg__,0
 659 0050 00C0      		rjmp .L50
 660               	.L51:
 661               		.loc 1 493 0 is_stmt 0 discriminator 3
 662 0052 F999      		sbic 0x1f,1
 663 0054 00C0      		rjmp .L51
 664               		.loc 1 493 0 discriminator 4
 665 0056 81E1      		ldi r24,lo8(17)
 666               	/* #APP */
 667               	 ;  493 "Caterina-BathMouse.c" 1
 668 0058 8093 5700 		sts 87, r24
 669 005c E895      		spm
 670               		
 671               	 ;  0 "" 2
 672               	/* #NOAPP */
 673 005e 00C0      		rjmp .L134
 674               	.LVL24:
 675               	.L49:
 494:Caterina-BathMouse.c **** 
 495:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 496:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 497:Caterina-BathMouse.c **** 	}
 498:Caterina-BathMouse.c **** 	else if (Command == 'T')
 676               		.loc 1 498 0 is_stmt 1
 677 0060 8435      		cpi r24,lo8(84)
 678 0062 01F4      		brne .L53
 499:Caterina-BathMouse.c **** 	{
 500:Caterina-BathMouse.c **** 		FetchNextCommandByte();
 679               		.loc 1 500 0
 680 0064 0E94 0000 		call FetchNextCommandByte
 681               	.LVL25:
 682               	.L134:
 501:Caterina-BathMouse.c **** 
 502:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 503:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 683               		.loc 1 503 0
 684 0068 8DE0      		ldi r24,lo8(13)
 685               	.L135:
 686 006a 0E94 0000 		call WriteNextResponseByte
 687               	.LVL26:
 688 006e 00C0      		rjmp .L52
 689               	.LVL27:
 690               	.L53:
 504:Caterina-BathMouse.c **** 	}
 505:Caterina-BathMouse.c **** 	else if ((Command == 'L') || (Command == 'P'))
 691               		.loc 1 505 0
 692 0070 8C34      		cpi r24,lo8(76)
 693 0072 01F0      		breq .L134
 694               		.loc 1 505 0 is_stmt 0 discriminator 1
 695 0074 8035      		cpi r24,lo8(80)
 696 0076 01F0      		breq .L134
 506:Caterina-BathMouse.c **** 	{
 507:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 508:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 509:Caterina-BathMouse.c **** 	}
 510:Caterina-BathMouse.c **** 	else if (Command == 't')
 697               		.loc 1 510 0 is_stmt 1
 698 0078 8437      		cpi r24,lo8(116)
 699 007a 01F4      		brne .L56
 511:Caterina-BathMouse.c **** 	{
 512:Caterina-BathMouse.c **** 		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
 513:Caterina-BathMouse.c **** 		WriteNextResponseByte(0x44);
 700               		.loc 1 513 0
 701 007c 84E4      		ldi r24,lo8(68)
 702               	.LVL28:
 703 007e 0E94 0000 		call WriteNextResponseByte
 704               	.LVL29:
 514:Caterina-BathMouse.c **** 		WriteNextResponseByte(0x00);
 705               		.loc 1 514 0
 706 0082 80E0      		ldi r24,0
 707 0084 00C0      		rjmp .L135
 708               	.LVL30:
 709               	.L56:
 515:Caterina-BathMouse.c **** 	}
 516:Caterina-BathMouse.c **** 	else if (Command == 'a')
 710               		.loc 1 516 0
 711 0086 8136      		cpi r24,lo8(97)
 712 0088 01F4      		brne .L57
 517:Caterina-BathMouse.c **** 	{
 518:Caterina-BathMouse.c **** 		// Indicate auto-address increment is supported 
 519:Caterina-BathMouse.c **** 		WriteNextResponseByte('Y');
 713               		.loc 1 519 0
 714 008a 89E5      		ldi r24,lo8(89)
 715               	.LVL31:
 716 008c 00C0      		rjmp .L135
 717               	.LVL32:
 718               	.L57:
 520:Caterina-BathMouse.c **** 	}
 521:Caterina-BathMouse.c **** 	else if (Command == 'A')
 719               		.loc 1 521 0
 720 008e 8134      		cpi r24,lo8(65)
 721 0090 01F4      		brne .L58
 522:Caterina-BathMouse.c **** 	{
 523:Caterina-BathMouse.c **** 		// Set the current address to that given by the host 
 524:Caterina-BathMouse.c **** 		CurrAddress   = (FetchNextCommandByte() << 9);
 722               		.loc 1 524 0
 723 0092 0E94 0000 		call FetchNextCommandByte
 724               	.LVL33:
 725 0096 C82F      		mov r28,r24
 726               	.LVL34:
 525:Caterina-BathMouse.c **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 727               		.loc 1 525 0
 728 0098 0E94 0000 		call FetchNextCommandByte
 729               	.LVL35:
 730 009c 90E0      		ldi r25,0
 731 009e 880F      		lsl r24
 732 00a0 991F      		rol r25
 524:Caterina-BathMouse.c **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 733               		.loc 1 524 0
 734 00a2 2C2F      		mov r18,r28
 735 00a4 30E0      		ldi r19,0
 736 00a6 322F      		mov r19,r18
 737 00a8 2227      		clr r18
 738 00aa 330F      		lsl r19
 739               		.loc 1 525 0
 740 00ac 822B      		or r24,r18
 741 00ae 932B      		or r25,r19
 742 00b0 092E      		mov __tmp_reg__,r25
 743 00b2 000C      		lsl r0
 744 00b4 AA0B      		sbc r26,r26
 745 00b6 BB0B      		sbc r27,r27
 746 00b8 00C0      		rjmp .L136
 747               	.LVL36:
 748               	.L58:
 526:Caterina-BathMouse.c **** 
 527:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 528:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 529:Caterina-BathMouse.c **** 	}
 530:Caterina-BathMouse.c **** 	else if (Command == 'p')
 749               		.loc 1 530 0
 750 00ba 8037      		cpi r24,lo8(112)
 751 00bc 01F4      		brne .L59
 531:Caterina-BathMouse.c **** 	{
 532:Caterina-BathMouse.c **** 		// Indicate serial programmer back to the host 
 533:Caterina-BathMouse.c **** 		WriteNextResponseByte('S');
 752               		.loc 1 533 0
 753 00be 83E5      		ldi r24,lo8(83)
 754               	.LVL37:
 755 00c0 00C0      		rjmp .L135
 756               	.LVL38:
 757               	.L59:
 534:Caterina-BathMouse.c **** 	}
 535:Caterina-BathMouse.c **** 	else if (Command == 'S')
 758               		.loc 1 535 0
 759 00c2 8335      		cpi r24,lo8(83)
 760 00c4 01F4      		brne .L60
 761 00c6 C0E0      		ldi r28,lo8(.LC0)
 762 00c8 D0E0      		ldi r29,hi8(.LC0)
 763 00ca 1C2F      		mov r17,r28
 764 00cc 195F      		subi r17,lo8(-(7))
 765               	.LVL39:
 766               	.L61:
 767               	.LBB159:
 536:Caterina-BathMouse.c **** 	{
 537:Caterina-BathMouse.c **** 		// Write the 7-byte software identifier to the endpoint 
 538:Caterina-BathMouse.c **** 		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 539:Caterina-BathMouse.c **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 768               		.loc 1 539 0 discriminator 3
 769 00ce 8991      		ld r24,Y+
 770               	.LVL40:
 771 00d0 0E94 0000 		call WriteNextResponseByte
 772               	.LVL41:
 538:Caterina-BathMouse.c **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 773               		.loc 1 538 0 discriminator 3
 774 00d4 1C13      		cpse r17,r28
 775 00d6 00C0      		rjmp .L61
 776 00d8 00C0      		rjmp .L52
 777               	.LVL42:
 778               	.L60:
 779               	.LBE159:
 540:Caterina-BathMouse.c **** 	}
 541:Caterina-BathMouse.c **** 	else if (Command == 'V')
 780               		.loc 1 541 0
 781 00da 8635      		cpi r24,lo8(86)
 782 00dc 01F4      		brne .L62
 542:Caterina-BathMouse.c **** 	{
 543:Caterina-BathMouse.c **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 783               		.loc 1 543 0
 784 00de 81E3      		ldi r24,lo8(49)
 785               	.LVL43:
 786 00e0 0E94 0000 		call WriteNextResponseByte
 787               	.LVL44:
 544:Caterina-BathMouse.c **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 788               		.loc 1 544 0
 789 00e4 80E3      		ldi r24,lo8(48)
 790 00e6 00C0      		rjmp .L135
 791               	.LVL45:
 792               	.L62:
 545:Caterina-BathMouse.c **** 	}
 546:Caterina-BathMouse.c **** 	else if (Command == 's')
 793               		.loc 1 546 0
 794 00e8 8337      		cpi r24,lo8(115)
 795 00ea 01F4      		brne .L63
 547:Caterina-BathMouse.c **** 	{
 548:Caterina-BathMouse.c **** 		WriteNextResponseByte(AVR_SIGNATURE_3);
 796               		.loc 1 548 0
 797 00ec 87E8      		ldi r24,lo8(-121)
 798               	.LVL46:
 799 00ee 0E94 0000 		call WriteNextResponseByte
 800               	.LVL47:
 549:Caterina-BathMouse.c **** 		WriteNextResponseByte(AVR_SIGNATURE_2);
 801               		.loc 1 549 0
 802 00f2 85E9      		ldi r24,lo8(-107)
 803 00f4 0E94 0000 		call WriteNextResponseByte
 804               	.LVL48:
 550:Caterina-BathMouse.c **** 		WriteNextResponseByte(AVR_SIGNATURE_1);
 805               		.loc 1 550 0
 806 00f8 8EE1      		ldi r24,lo8(30)
 807 00fa 00C0      		rjmp .L135
 808               	.LVL49:
 809               	.L63:
 551:Caterina-BathMouse.c **** 	}
 552:Caterina-BathMouse.c **** 	else if (Command == 'e')
 810               		.loc 1 552 0
 811 00fc 8536      		cpi r24,lo8(101)
 812 00fe 01F4      		brne .L64
 813 0100 E0E0      		ldi r30,0
 814 0102 F0E0      		ldi r31,0
 815               	.LBB160:
 553:Caterina-BathMouse.c **** 	{
 554:Caterina-BathMouse.c **** 		// Clear the application section of flash 
 555:Caterina-BathMouse.c **** 		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_P
 556:Caterina-BathMouse.c **** 		{
 557:Caterina-BathMouse.c **** 			boot_page_erase(CurrFlashAddress);
 816               		.loc 1 557 0
 817 0104 83E0      		ldi r24,lo8(3)
 818               	.LVL50:
 558:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 559:Caterina-BathMouse.c **** 			boot_page_write(CurrFlashAddress);
 819               		.loc 1 559 0
 820 0106 95E0      		ldi r25,lo8(5)
 821               	.L67:
 557:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 822               		.loc 1 557 0
 823               	/* #APP */
 824               	 ;  557 "Caterina-BathMouse.c" 1
 825 0108 8093 5700 		sts 87, r24
 826 010c E895      		spm
 827               		
 828               	 ;  0 "" 2
 829               	/* #NOAPP */
 830               	.L65:
 558:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 831               		.loc 1 558 0 discriminator 1
 832 010e 07B6      		in __tmp_reg__,0x37
 833 0110 00FC      		sbrc __tmp_reg__,0
 834 0112 00C0      		rjmp .L65
 835               		.loc 1 559 0
 836               	/* #APP */
 837               	 ;  559 "Caterina-BathMouse.c" 1
 838 0114 9093 5700 		sts 87, r25
 839 0118 E895      		spm
 840               		
 841               	 ;  0 "" 2
 842               	/* #NOAPP */
 843               	.L66:
 560:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 844               		.loc 1 560 0 discriminator 1
 845 011a 07B6      		in __tmp_reg__,0x37
 846 011c 00FC      		sbrc __tmp_reg__,0
 847 011e 00C0      		rjmp .L66
 848               	.LVL51:
 849 0120 E058      		subi r30,-128
 850 0122 FF4F      		sbci r31,-1
 555:Caterina-BathMouse.c **** 		{
 851               		.loc 1 555 0 discriminator 2
 852 0124 E115      		cp r30,__zero_reg__
 853 0126 20E7      		ldi r18,112
 854 0128 F207      		cpc r31,r18
 855 012a 01F4      		brne .L67
 856 012c 00C0      		rjmp .L134
 857               	.LVL52:
 858               	.L64:
 859               	.LBE160:
 561:Caterina-BathMouse.c **** 		}
 562:Caterina-BathMouse.c **** 
 563:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 564:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 565:Caterina-BathMouse.c **** 	}
 566:Caterina-BathMouse.c **** 	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 567:Caterina-BathMouse.c **** 	else if (Command == 'l')
 568:Caterina-BathMouse.c **** 	{
 569:Caterina-BathMouse.c **** 		// Set the lock bits to those given by the host 
 570:Caterina-BathMouse.c **** 		boot_lock_bits_set(FetchNextCommandByte());
 571:Caterina-BathMouse.c **** 
 572:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 573:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 574:Caterina-BathMouse.c **** 	}
 575:Caterina-BathMouse.c **** 	#endif
 576:Caterina-BathMouse.c **** 	else if (Command == 'r')
 860               		.loc 1 576 0
 861 012e 8237      		cpi r24,lo8(114)
 862 0130 01F4      		brne .L68
 863               	.LBB161:
 577:Caterina-BathMouse.c **** 	{
 578:Caterina-BathMouse.c **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 864               		.loc 1 578 0
 865 0132 E1E0      		ldi r30,lo8(1)
 866 0134 F0E0      		ldi r31,0
 867 0136 00C0      		rjmp .L137
 868               	.L68:
 869               	.LBE161:
 579:Caterina-BathMouse.c **** 	}
 580:Caterina-BathMouse.c **** 	else if (Command == 'F')
 870               		.loc 1 580 0
 871 0138 8634      		cpi r24,lo8(70)
 872 013a 01F4      		brne .L69
 873               	.LBB162:
 581:Caterina-BathMouse.c **** 	{
 582:Caterina-BathMouse.c **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 874               		.loc 1 582 0
 875 013c E0E0      		ldi r30,0
 876 013e F0E0      		ldi r31,0
 877 0140 00C0      		rjmp .L137
 878               	.L69:
 879               	.LBE162:
 583:Caterina-BathMouse.c **** 	}
 584:Caterina-BathMouse.c **** 	else if (Command == 'N')
 880               		.loc 1 584 0
 881 0142 8E34      		cpi r24,lo8(78)
 882 0144 01F4      		brne .L70
 883               	.LBB163:
 585:Caterina-BathMouse.c **** 	{
 586:Caterina-BathMouse.c **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 884               		.loc 1 586 0
 885 0146 E3E0      		ldi r30,lo8(3)
 886 0148 F0E0      		ldi r31,0
 887 014a 00C0      		rjmp .L137
 888               	.L70:
 889               	.LBE163:
 587:Caterina-BathMouse.c **** 	}
 588:Caterina-BathMouse.c **** 	else if (Command == 'Q')
 890               		.loc 1 588 0
 891 014c 8135      		cpi r24,lo8(81)
 892 014e 01F4      		brne .L71
 893               	.LBB164:
 589:Caterina-BathMouse.c **** 	{
 590:Caterina-BathMouse.c **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 894               		.loc 1 590 0
 895 0150 E2E0      		ldi r30,lo8(2)
 896 0152 F0E0      		ldi r31,0
 897               	.L137:
 898 0154 89E0      		ldi r24,lo8(9)
 899               	.LVL53:
 900               	/* #APP */
 901               	 ;  590 "Caterina-BathMouse.c" 1
 902 0156 8093 5700 		sts 87, r24
 903 015a 8491      		lpm r24, Z
 904               		
 905               	 ;  0 "" 2
 906               	.LVL54:
 907               	/* #NOAPP */
 908 015c 00C0      		rjmp .L135
 909               	.LVL55:
 910               	.L71:
 911               	.LBE164:
 591:Caterina-BathMouse.c **** 	}
 592:Caterina-BathMouse.c **** 	#if !defined(NO_BLOCK_SUPPORT)
 593:Caterina-BathMouse.c **** 	else if (Command == 'b')
 912               		.loc 1 593 0
 913 015e 8236      		cpi r24,lo8(98)
 914 0160 01F4      		brne .L72
 594:Caterina-BathMouse.c **** 	{
 595:Caterina-BathMouse.c **** 		WriteNextResponseByte('Y');
 915               		.loc 1 595 0
 916 0162 89E5      		ldi r24,lo8(89)
 917               	.LVL56:
 918 0164 0E94 0000 		call WriteNextResponseByte
 919               	.LVL57:
 596:Caterina-BathMouse.c **** 
 597:Caterina-BathMouse.c **** 		// Send block size to the host 
 598:Caterina-BathMouse.c **** 		WriteNextResponseByte(SPM_PAGESIZE >> 8);
 920               		.loc 1 598 0
 921 0168 80E0      		ldi r24,0
 922 016a 0E94 0000 		call WriteNextResponseByte
 923               	.LVL58:
 599:Caterina-BathMouse.c **** 		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 924               		.loc 1 599 0
 925 016e 80E8      		ldi r24,lo8(-128)
 926 0170 00C0      		rjmp .L135
 927               	.LVL59:
 928               	.L72:
 600:Caterina-BathMouse.c **** 	}
 601:Caterina-BathMouse.c **** 	else if ((Command == 'B') || (Command == 'g'))
 929               		.loc 1 601 0
 930 0172 8234      		cpi r24,lo8(66)
 931 0174 01F0      		breq .L73
 932               		.loc 1 601 0 is_stmt 0 discriminator 1
 933 0176 8736      		cpi r24,lo8(103)
 934 0178 01F0      		breq .+2
 935 017a 00C0      		rjmp .L74
 936               	.L73:
 602:Caterina-BathMouse.c **** 	{
 603:Caterina-BathMouse.c **** 		// Keep resetting the timeout counter if we're receiving self-programming instructions
 604:Caterina-BathMouse.c **** 		Timeout = 0;
 937               		.loc 1 604 0 is_stmt 1
 938 017c 1092 0000 		sts Timeout+1,__zero_reg__
 939 0180 1092 0000 		sts Timeout,__zero_reg__
 940               	.LVL60:
 941               	.LBB165:
 942               	.LBB166:
 287:Caterina-BathMouse.c **** 	BlockSize |=  FetchNextCommandByte();
 943               		.loc 1 287 0
 944 0184 0E94 0000 		call FetchNextCommandByte
 945               	.LVL61:
 946 0188 082F      		mov r16,r24
 947               	.LVL62:
 288:Caterina-BathMouse.c **** 
 948               		.loc 1 288 0
 949 018a 0E94 0000 		call FetchNextCommandByte
 950               	.LVL63:
 951 018e D82F      		mov r29,r24
 952               	.LVL64:
 290:Caterina-BathMouse.c **** 
 953               		.loc 1 290 0
 954 0190 0E94 0000 		call FetchNextCommandByte
 955               	.LVL65:
 956 0194 182F      		mov r17,r24
 957               	.LVL66:
 292:Caterina-BathMouse.c **** 	{
 958               		.loc 1 292 0
 959 0196 8BEB      		ldi r24,lo8(-69)
 960 0198 810F      		add r24,r17
 961 019a 8230      		cpi r24,lo8(2)
 962 019c 00F0      		brlo .L75
 963               	.LVL67:
 964               	.L100:
 295:Caterina-BathMouse.c **** 
 965               		.loc 1 295 0
 966 019e 8FE3      		ldi r24,lo8(63)
 967 01a0 00C0      		rjmp .L135
 968               	.LVL68:
 969               	.L75:
 287:Caterina-BathMouse.c **** 	BlockSize |=  FetchNextCommandByte();
 970               		.loc 1 287 0
 971 01a2 2D2F      		mov r18,r29
 972 01a4 30E0      		ldi r19,0
 288:Caterina-BathMouse.c **** 
 973               		.loc 1 288 0
 974 01a6 302B      		or r19,r16
 302:Caterina-BathMouse.c **** 
 975               		.loc 1 302 0
 976 01a8 1092 6F00 		sts 111,__zero_reg__
 305:Caterina-BathMouse.c **** 	{		
 977               		.loc 1 305 0
 978 01ac C736      		cpi r28,lo8(103)
 979 01ae 01F0      		breq .+2
 980 01b0 00C0      		rjmp .L76
 981               	.LVL69:
 308:Caterina-BathMouse.c **** 
 982               		.loc 1 308 0
 983 01b2 81E1      		ldi r24,lo8(17)
 984               	/* #APP */
 985               	 ;  308 "Caterina-BathMouse.c" 1
 986 01b4 8093 5700 		sts 87, r24
 987 01b8 E895      		spm
 988               		
 989               	 ;  0 "" 2
 990               	/* #NOAPP */
 991 01ba E901      		movw r28,r18
 992               	.LVL70:
 284:Caterina-BathMouse.c **** 	uint8_t  LowByte  = 0;
 993               		.loc 1 284 0
 994 01bc 00E0      		ldi r16,0
 995               	.LVL71:
 325:Caterina-BathMouse.c **** 			}
 996               		.loc 1 325 0
 997 01be BB24      		clr r11
 998 01c0 B394      		inc r11
 999               	.LVL72:
 1000               	.L77:
 310:Caterina-BathMouse.c **** 		{
 1001               		.loc 1 310 0
 1002 01c2 2097      		sbiw r28,0
 1003 01c4 01F4      		brne .+2
 1004 01c6 00C0      		rjmp .L82
 1005 01c8 C090 0000 		lds r12,CurrAddress
 1006 01cc D090 0000 		lds r13,CurrAddress+1
 1007 01d0 E090 0000 		lds r14,CurrAddress+2
 1008 01d4 F090 0000 		lds r15,CurrAddress+3
 312:Caterina-BathMouse.c **** 			{
 1009               		.loc 1 312 0
 1010 01d8 1634      		cpi r17,lo8(70)
 1011 01da 01F4      		brne .L78
 1012               	.LVL73:
 1013               	.LBB167:
 318:Caterina-BathMouse.c **** 				#endif
 1014               		.loc 1 318 0
 1015 01dc E02F      		mov r30,r16
 1016 01de F0E0      		ldi r31,0
 1017 01e0 EC29      		or r30,r12
 1018 01e2 FD29      		or r31,r13
 1019               	/* #APP */
 1020               	 ;  318 "Caterina-BathMouse.c" 1
 1021 01e4 8491      		lpm r24, Z
 1022               		
 1023               	 ;  0 "" 2
 1024               	.LVL74:
 1025               	/* #NOAPP */
 1026               	.LBE167:
 1027 01e6 0E94 0000 		call WriteNextResponseByte
 1028               	.LVL75:
 322:Caterina-BathMouse.c **** 				  CurrAddress += 2;
 1029               		.loc 1 322 0
 1030 01ea 0023      		tst r16
 1031 01ec 01F0      		breq .L79
 323:Caterina-BathMouse.c **** 
 1032               		.loc 1 323 0
 1033 01ee 82E0      		ldi r24,2
 1034 01f0 C80E      		add r12,r24
 1035 01f2 D11C      		adc r13,__zero_reg__
 1036 01f4 E11C      		adc r14,__zero_reg__
 1037 01f6 F11C      		adc r15,__zero_reg__
 1038               	.LVL76:
 1039 01f8 C092 0000 		sts CurrAddress,r12
 1040 01fc D092 0000 		sts CurrAddress+1,r13
 1041 0200 E092 0000 		sts CurrAddress+2,r14
 1042 0204 F092 0000 		sts CurrAddress+3,r15
 1043               	.LVL77:
 1044               	.L79:
 325:Caterina-BathMouse.c **** 			}
 1045               		.loc 1 325 0
 1046 0208 0B25      		eor r16,r11
 1047               	.LVL78:
 1048 020a 00C0      		rjmp .L80
 1049               	.L78:
 330:Caterina-BathMouse.c **** 
 1050               		.loc 1 330 0
 1051 020c D701      		movw r26,r14
 1052 020e C601      		movw r24,r12
 1053 0210 B695      		lsr r27
 1054 0212 A795      		ror r26
 1055 0214 9795      		ror r25
 1056 0216 8795      		ror r24
 1057 0218 0E94 0000 		call eeprom_read_byte
 1058               	.LVL79:
 1059 021c 0E94 0000 		call WriteNextResponseByte
 1060               	.LVL80:
 333:Caterina-BathMouse.c **** 			}
 1061               		.loc 1 333 0
 1062 0220 E2E0      		ldi r30,2
 1063 0222 CE0E      		add r12,r30
 1064 0224 D11C      		adc r13,__zero_reg__
 1065 0226 E11C      		adc r14,__zero_reg__
 1066 0228 F11C      		adc r15,__zero_reg__
 1067 022a C092 0000 		sts CurrAddress,r12
 1068 022e D092 0000 		sts CurrAddress+1,r13
 1069 0232 E092 0000 		sts CurrAddress+2,r14
 1070 0236 F092 0000 		sts CurrAddress+3,r15
 1071               	.L80:
 1072 023a 2197      		sbiw r28,1
 1073               	.LVL81:
 1074 023c 00C0      		rjmp .L77
 1075               	.LVL82:
 1076               	.L76:
 1077               	.LBB168:
 339:Caterina-BathMouse.c **** 
 1078               		.loc 1 339 0
 1079 023e 8090 0000 		lds r8,CurrAddress
 1080 0242 9090 0000 		lds r9,CurrAddress+1
 1081 0246 A090 0000 		lds r10,CurrAddress+2
 1082 024a B090 0000 		lds r11,CurrAddress+3
 341:Caterina-BathMouse.c **** 		{
 1083               		.loc 1 341 0
 1084 024e 1634      		cpi r17,lo8(70)
 1085 0250 01F4      		brne .L83
 343:Caterina-BathMouse.c **** 			boot_spm_busy_wait();
 1086               		.loc 1 343 0
 1087 0252 83E0      		ldi r24,lo8(3)
 1088 0254 F401      		movw r30,r8
 1089               	/* #APP */
 1090               	 ;  343 "Caterina-BathMouse.c" 1
 1091 0256 8093 5700 		sts 87, r24
 1092 025a E895      		spm
 1093               		
 1094               	 ;  0 "" 2
 1095               	/* #NOAPP */
 1096               	.L84:
 344:Caterina-BathMouse.c **** 		}
 1097               		.loc 1 344 0
 1098 025c 07B6      		in __tmp_reg__,0x37
 1099 025e 00FC      		sbrc __tmp_reg__,0
 1100 0260 00C0      		rjmp .L84
 1101               	.L83:
 1102               	.LBE168:
 284:Caterina-BathMouse.c **** 	uint8_t  LowByte  = 0;
 1103               		.loc 1 284 0
 1104 0262 E901      		movw r28,r18
 1105               	.LVL83:
 1106 0264 712C      		mov r7,__zero_reg__
 1107 0266 00E0      		ldi r16,0
 1108               	.LVL84:
 1109               	.LBB169:
 365:Caterina-BathMouse.c **** 			}
 1110               		.loc 1 365 0
 1111 0268 6624      		clr r6
 1112 026a 6394      		inc r6
 1113               	.LVL85:
 1114               	.L85:
 347:Caterina-BathMouse.c **** 		{
 1115               		.loc 1 347 0
 1116 026c 2097      		sbiw r28,0
 1117 026e 01F4      		brne .+2
 1118 0270 00C0      		rjmp .L138
 349:Caterina-BathMouse.c **** 			{
 1119               		.loc 1 349 0
 1120 0272 1634      		cpi r17,lo8(70)
 1121 0274 01F4      		brne .L86
 352:Caterina-BathMouse.c **** 				{
 1122               		.loc 1 352 0
 1123 0276 0023      		tst r16
 1124 0278 01F0      		breq .L87
 355:Caterina-BathMouse.c **** 
 1125               		.loc 1 355 0
 1126 027a C090 0000 		lds r12,CurrAddress
 1127 027e D090 0000 		lds r13,CurrAddress+1
 1128 0282 E090 0000 		lds r14,CurrAddress+2
 1129 0286 F090 0000 		lds r15,CurrAddress+3
 1130 028a 0E94 0000 		call FetchNextCommandByte
 1131               	.LVL86:
 1132 028e 272D      		mov r18,r7
 1133 0290 30E0      		ldi r19,0
 1134 0292 382B      		or r19,r24
 1135 0294 F601      		movw r30,r12
 1136               	/* #APP */
 1137               	 ;  355 "Caterina-BathMouse.c" 1
 1138 0296 0901      		movw  r0, r18
 1139 0298 6092 5700 		sts 87, r6
 1140 029c E895      		spm
 1141 029e 1124      		clr  r1
 1142               		
 1143               	 ;  0 "" 2
 358:Caterina-BathMouse.c **** 				}
 1144               		.loc 1 358 0
 1145               	/* #NOAPP */
 1146 02a0 F2E0      		ldi r31,2
 1147 02a2 CF0E      		add r12,r31
 1148 02a4 D11C      		adc r13,__zero_reg__
 1149 02a6 E11C      		adc r14,__zero_reg__
 1150 02a8 F11C      		adc r15,__zero_reg__
 1151 02aa C092 0000 		sts CurrAddress,r12
 1152 02ae D092 0000 		sts CurrAddress+1,r13
 1153 02b2 E092 0000 		sts CurrAddress+2,r14
 1154 02b6 F092 0000 		sts CurrAddress+3,r15
 1155 02ba 00C0      		rjmp .L88
 1156               	.L87:
 362:Caterina-BathMouse.c **** 				}
 1157               		.loc 1 362 0
 1158 02bc 0E94 0000 		call FetchNextCommandByte
 1159               	.LVL87:
 1160 02c0 782E      		mov r7,r24
 1161               	.LVL88:
 1162               	.L88:
 365:Caterina-BathMouse.c **** 			}
 1163               		.loc 1 365 0
 1164 02c2 0625      		eor r16,r6
 1165               	.LVL89:
 1166 02c4 00C0      		rjmp .L89
 1167               	.L86:
 370:Caterina-BathMouse.c **** 
 1168               		.loc 1 370 0
 1169 02c6 0E94 0000 		call FetchNextCommandByte
 1170               	.LVL90:
 1171 02ca 682F      		mov r22,r24
 1172 02cc 8091 0000 		lds r24,CurrAddress
 1173 02d0 9091 0000 		lds r25,CurrAddress+1
 1174 02d4 A091 0000 		lds r26,CurrAddress+2
 1175 02d8 B091 0000 		lds r27,CurrAddress+3
 1176 02dc B695      		lsr r27
 1177 02de A795      		ror r26
 1178 02e0 9795      		ror r25
 1179 02e2 8795      		ror r24
 1180 02e4 0E94 0000 		call eeprom_write_byte
 1181               	.LVL91:
 373:Caterina-BathMouse.c **** 			}
 1182               		.loc 1 373 0
 1183 02e8 8091 0000 		lds r24,CurrAddress
 1184 02ec 9091 0000 		lds r25,CurrAddress+1
 1185 02f0 A091 0000 		lds r26,CurrAddress+2
 1186 02f4 B091 0000 		lds r27,CurrAddress+3
 1187 02f8 0296      		adiw r24,2
 1188 02fa A11D      		adc r26,__zero_reg__
 1189 02fc B11D      		adc r27,__zero_reg__
 1190 02fe 8093 0000 		sts CurrAddress,r24
 1191 0302 9093 0000 		sts CurrAddress+1,r25
 1192 0306 A093 0000 		sts CurrAddress+2,r26
 1193 030a B093 0000 		sts CurrAddress+3,r27
 1194               	.L89:
 1195 030e 2197      		sbiw r28,1
 1196               	.LVL92:
 1197 0310 00C0      		rjmp .L85
 1198               	.LVL93:
 1199               	.L138:
 378:Caterina-BathMouse.c **** 		{
 1200               		.loc 1 378 0
 1201 0312 1634      		cpi r17,lo8(70)
 1202 0314 01F4      		brne .L91
 381:Caterina-BathMouse.c **** 
 1203               		.loc 1 381 0
 1204 0316 85E0      		ldi r24,lo8(5)
 1205 0318 F401      		movw r30,r8
 1206               	/* #APP */
 1207               	 ;  381 "Caterina-BathMouse.c" 1
 1208 031a 8093 5700 		sts 87, r24
 1209 031e E895      		spm
 1210               		
 1211               	 ;  0 "" 2
 1212               	/* #NOAPP */
 1213               	.L92:
 384:Caterina-BathMouse.c **** 		}
 1214               		.loc 1 384 0
 1215 0320 07B6      		in __tmp_reg__,0x37
 1216 0322 00FC      		sbrc __tmp_reg__,0
 1217 0324 00C0      		rjmp .L92
 1218               	.L91:
 388:Caterina-BathMouse.c **** 	}
 1219               		.loc 1 388 0
 1220 0326 8DE0      		ldi r24,lo8(13)
 1221 0328 0E94 0000 		call WriteNextResponseByte
 1222               	.LVL94:
 1223               	.L82:
 1224               	.LBE169:
 392:Caterina-BathMouse.c **** }
 1225               		.loc 1 392 0
 1226 032c 82E0      		ldi r24,lo8(2)
 1227 032e 8093 6F00 		sts 111,r24
 1228 0332 00C0      		rjmp .L52
 1229               	.LVL95:
 1230               	.L74:
 1231               	.LBE166:
 1232               	.LBE165:
 605:Caterina-BathMouse.c **** 		// Delegate the block write/read to a separate function for clarity 
 606:Caterina-BathMouse.c **** 		ReadWriteMemoryBlock(Command);
 607:Caterina-BathMouse.c **** 	}
 608:Caterina-BathMouse.c **** 	#endif
 609:Caterina-BathMouse.c **** 	#if !defined(NO_FLASH_BYTE_SUPPORT)
 610:Caterina-BathMouse.c **** 	else if (Command == 'C')
 1233               		.loc 1 610 0
 1234 0334 8334      		cpi r24,lo8(67)
 1235 0336 01F4      		brne .L93
 611:Caterina-BathMouse.c **** 	{
 612:Caterina-BathMouse.c **** 		// Write the high byte to the current flash page
 613:Caterina-BathMouse.c **** 		boot_page_fill(CurrAddress, FetchNextCommandByte());
 1236               		.loc 1 613 0
 1237 0338 C091 0000 		lds r28,CurrAddress
 1238 033c D091 0000 		lds r29,CurrAddress+1
 1239 0340 0E94 0000 		call FetchNextCommandByte
 1240               	.LVL96:
 1241 0344 90E0      		ldi r25,0
 1242 0346 21E0      		ldi r18,lo8(1)
 1243 0348 FE01      		movw r30,r28
 1244               	/* #APP */
 1245               	 ;  613 "Caterina-BathMouse.c" 1
 1246 034a 0C01      		movw  r0, r24
 1247 034c 2093 5700 		sts 87, r18
 1248 0350 E895      		spm
 1249 0352 1124      		clr  r1
 1250               		
 1251               	 ;  0 "" 2
 1252               	/* #NOAPP */
 1253 0354 00C0      		rjmp .L134
 1254               	.LVL97:
 1255               	.L93:
 614:Caterina-BathMouse.c **** 
 615:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 616:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 617:Caterina-BathMouse.c **** 	}
 618:Caterina-BathMouse.c **** 	else if (Command == 'c')
 1256               		.loc 1 618 0
 1257 0356 8336      		cpi r24,lo8(99)
 1258 0358 01F4      		brne .L94
 619:Caterina-BathMouse.c **** 	{
 620:Caterina-BathMouse.c **** 		// Write the low byte to the current flash page 
 621:Caterina-BathMouse.c **** 		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1259               		.loc 1 621 0
 1260 035a C090 0000 		lds r12,CurrAddress
 1261 035e D090 0000 		lds r13,CurrAddress+1
 1262 0362 E090 0000 		lds r14,CurrAddress+2
 1263 0366 F090 0000 		lds r15,CurrAddress+3
 1264 036a 0E94 0000 		call FetchNextCommandByte
 1265               	.LVL98:
 1266 036e F601      		movw r30,r12
 1267 0370 E160      		ori r30,1
 1268 0372 90E0      		ldi r25,0
 1269 0374 21E0      		ldi r18,lo8(1)
 1270               	/* #APP */
 1271               	 ;  621 "Caterina-BathMouse.c" 1
 1272 0376 0C01      		movw  r0, r24
 1273 0378 2093 5700 		sts 87, r18
 1274 037c E895      		spm
 1275 037e 1124      		clr  r1
 1276               		
 1277               	 ;  0 "" 2
 622:Caterina-BathMouse.c **** 
 623:Caterina-BathMouse.c **** 		// Increment the address 
 624:Caterina-BathMouse.c **** 		CurrAddress += 2;
 1278               		.loc 1 624 0
 1279               	/* #NOAPP */
 1280 0380 F2E0      		ldi r31,2
 1281 0382 CF0E      		add r12,r31
 1282 0384 D11C      		adc r13,__zero_reg__
 1283 0386 E11C      		adc r14,__zero_reg__
 1284 0388 F11C      		adc r15,__zero_reg__
 1285 038a C092 0000 		sts CurrAddress,r12
 1286 038e D092 0000 		sts CurrAddress+1,r13
 1287 0392 E092 0000 		sts CurrAddress+2,r14
 1288 0396 F092 0000 		sts CurrAddress+3,r15
 1289 039a 00C0      		rjmp .L134
 1290               	.LVL99:
 1291               	.L94:
 625:Caterina-BathMouse.c **** 
 626:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 627:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 628:Caterina-BathMouse.c **** 	}
 629:Caterina-BathMouse.c **** 	else if (Command == 'm')
 1292               		.loc 1 629 0
 1293 039c 8D36      		cpi r24,lo8(109)
 1294 039e 01F4      		brne .L95
 630:Caterina-BathMouse.c **** 	{
 631:Caterina-BathMouse.c **** 		// Commit the flash page to memory
 632:Caterina-BathMouse.c **** 		boot_page_write(CurrAddress);
 1295               		.loc 1 632 0
 1296 03a0 E091 0000 		lds r30,CurrAddress
 1297 03a4 F091 0000 		lds r31,CurrAddress+1
 1298 03a8 85E0      		ldi r24,lo8(5)
 1299               	.LVL100:
 1300               	/* #APP */
 1301               	 ;  632 "Caterina-BathMouse.c" 1
 1302 03aa 8093 5700 		sts 87, r24
 1303 03ae E895      		spm
 1304               		
 1305               	 ;  0 "" 2
 1306               	/* #NOAPP */
 1307               	.L96:
 633:Caterina-BathMouse.c **** 
 634:Caterina-BathMouse.c **** 		// Wait until write operation has completed 
 635:Caterina-BathMouse.c **** 		boot_spm_busy_wait();
 1308               		.loc 1 635 0 discriminator 1
 1309 03b0 07B6      		in __tmp_reg__,0x37
 1310 03b2 00FC      		sbrc __tmp_reg__,0
 1311 03b4 00C0      		rjmp .L96
 1312 03b6 00C0      		rjmp .L134
 1313               	.LVL101:
 1314               	.L95:
 636:Caterina-BathMouse.c **** 
 637:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 638:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 639:Caterina-BathMouse.c **** 	}
 640:Caterina-BathMouse.c **** 	else if (Command == 'R')
 1315               		.loc 1 640 0
 1316 03b8 8235      		cpi r24,lo8(82)
 1317 03ba 01F4      		brne .L97
 1318               	.LBB170:
 1319               	.LBB171:
 641:Caterina-BathMouse.c **** 	{
 642:Caterina-BathMouse.c **** 		#if (FLASHEND > 0xFFFF)
 643:Caterina-BathMouse.c **** 		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 644:Caterina-BathMouse.c **** 		#else
 645:Caterina-BathMouse.c **** 		uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1320               		.loc 1 645 0
 1321 03bc E091 0000 		lds r30,CurrAddress
 1322 03c0 F091 0000 		lds r31,CurrAddress+1
 1323               	.LVL102:
 1324               	/* #APP */
 1325               	 ;  645 "Caterina-BathMouse.c" 1
 1326 03c4 C591      		lpm r28, Z+
 1327 03c6 D491      		lpm r29, Z
 1328               		
 1329               	 ;  0 "" 2
 1330               	.LVL103:
 1331               	/* #NOAPP */
 1332               	.LBE171:
 646:Caterina-BathMouse.c **** 		#endif
 647:Caterina-BathMouse.c **** 
 648:Caterina-BathMouse.c **** 		WriteNextResponseByte(ProgramWord >> 8);
 1333               		.loc 1 648 0
 1334 03c8 8D2F      		mov r24,r29
 1335               	.LVL104:
 1336 03ca 0E94 0000 		call WriteNextResponseByte
 1337               	.LVL105:
 649:Caterina-BathMouse.c **** 		WriteNextResponseByte(ProgramWord & 0xFF);
 1338               		.loc 1 649 0
 1339 03ce 8C2F      		mov r24,r28
 1340 03d0 00C0      		rjmp .L135
 1341               	.LVL106:
 1342               	.L97:
 1343               	.LBE170:
 650:Caterina-BathMouse.c **** 	}
 651:Caterina-BathMouse.c **** 	#endif
 652:Caterina-BathMouse.c **** 	#if !defined(NO_EEPROM_BYTE_SUPPORT)
 653:Caterina-BathMouse.c **** 	else if (Command == 'D')
 1344               		.loc 1 653 0
 1345 03d2 8434      		cpi r24,lo8(68)
 1346 03d4 01F4      		brne .L98
 654:Caterina-BathMouse.c **** 	{
 655:Caterina-BathMouse.c **** 		// Read the byte from the endpoint and write it to the EEPROM 
 656:Caterina-BathMouse.c **** 		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1347               		.loc 1 656 0
 1348 03d6 0E94 0000 		call FetchNextCommandByte
 1349               	.LVL107:
 1350 03da 682F      		mov r22,r24
 1351 03dc 8091 0000 		lds r24,CurrAddress
 1352 03e0 9091 0000 		lds r25,CurrAddress+1
 1353 03e4 A091 0000 		lds r26,CurrAddress+2
 1354 03e8 B091 0000 		lds r27,CurrAddress+3
 1355 03ec B695      		lsr r27
 1356 03ee A795      		ror r26
 1357 03f0 9795      		ror r25
 1358 03f2 8795      		ror r24
 1359 03f4 0E94 0000 		call eeprom_write_byte
 1360               	.LVL108:
 657:Caterina-BathMouse.c **** 
 658:Caterina-BathMouse.c **** 		// Increment the address after use
 659:Caterina-BathMouse.c **** 		CurrAddress += 2;
 1361               		.loc 1 659 0
 1362 03f8 8091 0000 		lds r24,CurrAddress
 1363 03fc 9091 0000 		lds r25,CurrAddress+1
 1364 0400 A091 0000 		lds r26,CurrAddress+2
 1365 0404 B091 0000 		lds r27,CurrAddress+3
 1366 0408 0296      		adiw r24,2
 1367 040a A11D      		adc r26,__zero_reg__
 1368 040c B11D      		adc r27,__zero_reg__
 1369               	.LVL109:
 1370               	.L136:
 1371 040e 8093 0000 		sts CurrAddress,r24
 1372 0412 9093 0000 		sts CurrAddress+1,r25
 1373 0416 A093 0000 		sts CurrAddress+2,r26
 1374 041a B093 0000 		sts CurrAddress+3,r27
 1375 041e 00C0      		rjmp .L134
 1376               	.LVL110:
 1377               	.L98:
 660:Caterina-BathMouse.c **** 
 661:Caterina-BathMouse.c **** 		// Send confirmation byte back to the host 
 662:Caterina-BathMouse.c **** 		WriteNextResponseByte('\r');
 663:Caterina-BathMouse.c **** 	}
 664:Caterina-BathMouse.c **** 	else if (Command == 'd')
 1378               		.loc 1 664 0
 1379 0420 8436      		cpi r24,lo8(100)
 1380 0422 01F4      		brne .L99
 665:Caterina-BathMouse.c **** 	{
 666:Caterina-BathMouse.c **** 		// Read the EEPROM byte and write it to the endpoint 
 667:Caterina-BathMouse.c **** 		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1381               		.loc 1 667 0
 1382 0424 C090 0000 		lds r12,CurrAddress
 1383 0428 D090 0000 		lds r13,CurrAddress+1
 1384 042c E090 0000 		lds r14,CurrAddress+2
 1385 0430 F090 0000 		lds r15,CurrAddress+3
 1386 0434 D701      		movw r26,r14
 1387 0436 C601      		movw r24,r12
 1388               	.LVL111:
 1389 0438 B695      		lsr r27
 1390 043a A795      		ror r26
 1391 043c 9795      		ror r25
 1392 043e 8795      		ror r24
 1393 0440 0E94 0000 		call eeprom_read_byte
 1394               	.LVL112:
 1395 0444 0E94 0000 		call WriteNextResponseByte
 1396               	.LVL113:
 668:Caterina-BathMouse.c **** 
 669:Caterina-BathMouse.c **** 		// Increment the address after use 
 670:Caterina-BathMouse.c **** 		CurrAddress += 2;
 1397               		.loc 1 670 0
 1398 0448 22E0      		ldi r18,2
 1399 044a C20E      		add r12,r18
 1400 044c D11C      		adc r13,__zero_reg__
 1401 044e E11C      		adc r14,__zero_reg__
 1402 0450 F11C      		adc r15,__zero_reg__
 1403 0452 C092 0000 		sts CurrAddress,r12
 1404 0456 D092 0000 		sts CurrAddress+1,r13
 1405 045a E092 0000 		sts CurrAddress+2,r14
 1406 045e F092 0000 		sts CurrAddress+3,r15
 1407 0462 00C0      		rjmp .L52
 1408               	.LVL114:
 1409               	.L99:
 671:Caterina-BathMouse.c **** 	}
 672:Caterina-BathMouse.c **** 	#endif
 673:Caterina-BathMouse.c **** 	else if (Command != 27)
 1410               		.loc 1 673 0
 1411 0464 8B31      		cpi r24,lo8(27)
 1412 0466 01F0      		breq .+2
 1413 0468 00C0      		rjmp .L100
 1414               	.LVL115:
 1415               	.L52:
 1416               	.LBB172:
 1417               	.LBB173:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1418               		.loc 2 330 0
 1419 046a 83E0      		ldi r24,lo8(3)
 1420 046c 8093 E900 		sts 233,r24
 1421               	.LBE173:
 1422               	.LBE172:
 1423               	.LBB174:
 1424               	.LBB175:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1425               		.loc 2 420 0
 1426 0470 9091 E800 		lds r25,232
 1427               	.LVL116:
 1428               	.LBE175:
 1429               	.LBE174:
 1430               	.LBB176:
 1431               	.LBB177:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1432               		.loc 2 516 0
 1433 0474 8091 E800 		lds r24,232
 1434 0478 8E77      		andi r24,lo8(126)
 1435 047a 8093 E800 		sts 232,r24
 1436               	.LBE177:
 1437               	.LBE176:
 674:Caterina-BathMouse.c **** 	{
 675:Caterina-BathMouse.c **** 		// Unknown (non-sync) command, return fail code 
 676:Caterina-BathMouse.c **** 		WriteNextResponseByte('?');
 677:Caterina-BathMouse.c **** 	}
 678:Caterina-BathMouse.c **** 	
 679:Caterina-BathMouse.c **** 
 680:Caterina-BathMouse.c **** 	/* Select the IN endpoint */
 681:Caterina-BathMouse.c **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 682:Caterina-BathMouse.c **** 
 683:Caterina-BathMouse.c **** 	/* Remember if the endpoint is completely full before clearing it */
 684:Caterina-BathMouse.c **** 	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 685:Caterina-BathMouse.c **** 
 686:Caterina-BathMouse.c **** 	/* Send the endpoint data to the host */
 687:Caterina-BathMouse.c **** 	Endpoint_ClearIN();
 688:Caterina-BathMouse.c **** 
 689:Caterina-BathMouse.c **** 	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to sign
 690:Caterina-BathMouse.c **** 	if (IsEndpointFull)
 1438               		.loc 1 690 0
 1439 047e 95FD      		sbrc r25,5
 1440 0480 00C0      		rjmp .L106
 1441               	.L102:
 1442               	.LBB178:
 1443               	.LBB179:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1444               		.loc 2 467 0
 1445 0482 8091 E800 		lds r24,232
 1446               	.LBE179:
 1447               	.LBE178:
 691:Caterina-BathMouse.c **** 	{
 692:Caterina-BathMouse.c **** 		while (!(Endpoint_IsINReady()))
 1448               		.loc 1 692 0
 1449 0486 80FD      		sbrc r24,0
 1450 0488 00C0      		rjmp .L139
 693:Caterina-BathMouse.c **** 		{
 694:Caterina-BathMouse.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 1451               		.loc 1 694 0
 1452 048a 8EB3      		in r24,0x1e
 1453 048c 8111      		cpse r24,__zero_reg__
 1454 048e 00C0      		rjmp .L102
 1455 0490 00C0      		rjmp .L46
 1456               	.L139:
 1457               	.LBB180:
 1458               	.LBB181:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1459               		.loc 2 516 0
 1460 0492 8091 E800 		lds r24,232
 1461 0496 8E77      		andi r24,lo8(126)
 1462 0498 8093 E800 		sts 232,r24
 1463 049c 00C0      		rjmp .L106
 1464               	.L107:
 1465               	.LBE181:
 1466               	.LBE180:
 695:Caterina-BathMouse.c **** 			  return;
 696:Caterina-BathMouse.c **** 		}
 697:Caterina-BathMouse.c **** 
 698:Caterina-BathMouse.c **** 		Endpoint_ClearIN();
 699:Caterina-BathMouse.c **** 	}
 700:Caterina-BathMouse.c **** 
 701:Caterina-BathMouse.c **** 	/* Wait until the data has been sent to the host */
 702:Caterina-BathMouse.c **** 	while (!(Endpoint_IsINReady()))
 703:Caterina-BathMouse.c **** 	{
 704:Caterina-BathMouse.c **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 1467               		.loc 1 704 0
 1468 049e 8EB3      		in r24,0x1e
 1469 04a0 8823      		tst r24
 1470 04a2 01F0      		breq .L46
 1471               	.L106:
 1472               	.LBB182:
 1473               	.LBB183:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1474               		.loc 2 467 0
 1475 04a4 8091 E800 		lds r24,232
 1476               	.LBE183:
 1477               	.LBE182:
 702:Caterina-BathMouse.c **** 	{
 1478               		.loc 1 702 0
 1479 04a8 80FF      		sbrs r24,0
 1480 04aa 00C0      		rjmp .L107
 1481               	.LVL117:
 1482               	.LBB184:
 1483               	.LBB185:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1484               		.loc 2 330 0
 1485 04ac 84E0      		ldi r24,lo8(4)
 1486 04ae 8093 E900 		sts 233,r24
 1487               	.LBE185:
 1488               	.LBE184:
 1489               	.LBB186:
 1490               	.LBB187:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1491               		.loc 2 531 0
 1492 04b2 8091 E800 		lds r24,232
 1493 04b6 8B77      		andi r24,lo8(123)
 1494 04b8 8093 E800 		sts 232,r24
 1495               	.LVL118:
 1496               	.L46:
 1497               	/* epilogue start */
 1498               	.LBE187:
 1499               	.LBE186:
 705:Caterina-BathMouse.c **** 		  return;
 706:Caterina-BathMouse.c **** 	}
 707:Caterina-BathMouse.c **** 
 708:Caterina-BathMouse.c **** 	/* Select the OUT endpoint */
 709:Caterina-BathMouse.c **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 710:Caterina-BathMouse.c **** 
 711:Caterina-BathMouse.c **** 	/* Acknowledge the command from the host */
 712:Caterina-BathMouse.c **** 	Endpoint_ClearOUT();
 713:Caterina-BathMouse.c **** }
 1500               		.loc 1 713 0
 1501 04bc DF91      		pop r29
 1502 04be CF91      		pop r28
 1503 04c0 1F91      		pop r17
 1504 04c2 0F91      		pop r16
 1505 04c4 FF90      		pop r15
 1506 04c6 EF90      		pop r14
 1507 04c8 DF90      		pop r13
 1508 04ca CF90      		pop r12
 1509 04cc BF90      		pop r11
 1510 04ce AF90      		pop r10
 1511 04d0 9F90      		pop r9
 1512 04d2 8F90      		pop r8
 1513 04d4 7F90      		pop r7
 1514 04d6 6F90      		pop r6
 1515 04d8 0895      		ret
 1516               		.cfi_endproc
 1517               	.LFE109:
 1519               		.section	.text.startup.main,"ax",@progbits
 1520               	.global	main
 1522               	main:
 1523               	.LFB101:
 112:Caterina-BathMouse.c **** 	/* Save the value of the boot key memory before it is overwritten */
 1524               		.loc 1 112 0
 1525               		.cfi_startproc
 1526               	/* prologue: function */
 1527               	/* frame size = 0 */
 1528               	/* stack size = 0 */
 1529               	.L__stack_usage = 0
 114:Caterina-BathMouse.c **** 	*bootKeyPtr = 0;
 1530               		.loc 1 114 0
 1531 0000 2091 0008 		lds r18,2048
 1532 0004 3091 0108 		lds r19,2048+1
 1533               	.LVL119:
 115:Caterina-BathMouse.c **** 
 1534               		.loc 1 115 0
 1535 0008 1092 0108 		sts 2048+1,__zero_reg__
 1536 000c 1092 0008 		sts 2048,__zero_reg__
 118:Caterina-BathMouse.c **** 	MCUSR = 0;							// clear all reset flags	
 1537               		.loc 1 118 0
 1538 0010 84B7      		in r24,0x34
 1539               	.LVL120:
 119:Caterina-BathMouse.c **** 
 1540               		.loc 1 119 0
 1541 0012 14BE      		out 0x34,__zero_reg__
 1542               	.LBB188:
 1543               	.LBB189:
 1544               		.loc 3 467 0
 1545               	/* #APP */
 1546               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1547 0014 0FB6      		in __tmp_reg__,__SREG__
 1548 0016 F894      		cli
 1549 0018 A895      		wdr
 1550 001a 9091 6000 		lds r25,96
 1551 001e 9861      		ori r25,24
 1552 0020 9093 6000 		sts 96,r25
 1553 0024 1092 6000 		sts 96,__zero_reg__
 1554 0028 0FBE      		out __SREG__,__tmp_reg__
 1555               		
 1556               	 ;  0 "" 2
 1557               	.LVL121:
 1558               	/* #NOAPP */
 1559               	.LBE189:
 1560               	.LBE188:
 124:Caterina-BathMouse.c **** 		// External reset -  we should continue to self-programming mode.
 1561               		.loc 1 124 0
 1562 002a 81FD      		sbrc r24,1
 1563 002c 00C0      		rjmp .L141
 126:Caterina-BathMouse.c **** 		// After a power-on reset skip the bootloader and jump straight to sketch 
 1564               		.loc 1 126 0
 1565 002e 80FF      		sbrs r24,0
 1566 0030 00C0      		rjmp .L142
 1567               	.LVL122:
 1568               	.LBB190:
 126:Caterina-BathMouse.c **** 		// After a power-on reset skip the bootloader and jump straight to sketch 
 1569               		.loc 1 126 0 is_stmt 0 discriminator 1
 1570 0032 E0E0      		ldi r30,0
 1571 0034 F0E0      		ldi r31,0
 1572               	/* #APP */
 1573               	 ;  126 "Caterina-BathMouse.c" 1
 1574 0036 4591      		lpm r20, Z+
 1575 0038 5491      		lpm r21, Z
 1576               		
 1577               	 ;  0 "" 2
 1578               	.LVL123:
 1579               	/* #NOAPP */
 1580               	.LBE190:
 1581 003a 4F3F      		cpi r20,-1
 1582 003c 5F4F      		sbci r21,-1
 1583 003e 01F0      		breq .L142
 1584               	.LVL124:
 1585               	.L143:
 129:Caterina-BathMouse.c **** 	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)
 1586               		.loc 1 129 0 is_stmt 1
 1587 0040 0E94 0000 		call StartSketch
 1588               	.LVL125:
 1589 0044 00C0      		rjmp .L141
 1590               	.LVL126:
 1591               	.L142:
 130:Caterina-BathMouse.c **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 1592               		.loc 1 130 0
 1593 0046 83FF      		sbrs r24,3
 1594 0048 00C0      		rjmp .L141
 130:Caterina-BathMouse.c **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 1595               		.loc 1 130 0 is_stmt 0 discriminator 1
 1596 004a 8091 0000 		lds r24,bootKey
 1597 004e 9091 0000 		lds r25,bootKey+1
 1598               	.LVL127:
 1599 0052 2817      		cp r18,r24
 1600 0054 3907      		cpc r19,r25
 1601 0056 01F0      		breq .L141
 1602               	.LVL128:
 1603               	.LBB191:
 130:Caterina-BathMouse.c **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 1604               		.loc 1 130 0 discriminator 2
 1605 0058 E0E0      		ldi r30,0
 1606 005a F0E0      		ldi r31,0
 1607               	/* #APP */
 1608               	 ;  130 "Caterina-BathMouse.c" 1
 1609 005c 8591      		lpm r24, Z+
 1610 005e 9491      		lpm r25, Z
 1611               		
 1612               	 ;  0 "" 2
 1613               	.LVL129:
 1614               	/* #NOAPP */
 1615               	.LBE191:
 1616 0060 0196      		adiw r24,1
 1617               	.LVL130:
 1618 0062 01F4      		brne .L143
 1619               	.LVL131:
 1620               	.L141:
 136:Caterina-BathMouse.c **** 
 1621               		.loc 1 136 0 is_stmt 1
 1622 0064 0E94 0000 		call SetupHardware
 1623               	.LVL132:
 139:Caterina-BathMouse.c **** 	
 1624               		.loc 1 139 0
 1625               	/* #APP */
 1626               	 ;  139 "Caterina-BathMouse.c" 1
 1627 0068 7894      		sei
 1628               	 ;  0 "" 2
 141:Caterina-BathMouse.c **** 	
 1629               		.loc 1 141 0
 1630               	/* #NOAPP */
 1631 006a 1092 0000 		sts Timeout+1,__zero_reg__
 1632 006e 1092 0000 		sts Timeout,__zero_reg__
 1633               	.L144:
 143:Caterina-BathMouse.c **** 	{
 1634               		.loc 1 143 0
 1635 0072 8091 0000 		lds r24,RunBootloader
 1636 0076 8823      		tst r24
 1637 0078 01F0      		breq .L156
 145:Caterina-BathMouse.c **** 		USB_USBTask();
 1638               		.loc 1 145 0
 1639 007a 0E94 0000 		call CDC_Task
 1640               	.LVL133:
 146:Caterina-BathMouse.c **** 		/* Time out and start the sketch if one is present */
 1641               		.loc 1 146 0
 1642 007e 0E94 0000 		call USB_USBTask
 1643               	.LVL134:
 148:Caterina-BathMouse.c **** 			RunBootloader = false;
 1644               		.loc 1 148 0
 1645 0082 8091 0000 		lds r24,Timeout
 1646 0086 9091 0000 		lds r25,Timeout+1
 1647 008a 8134      		cpi r24,65
 1648 008c 9F41      		sbci r25,31
 1649 008e 00F0      		brlo .L145
 149:Caterina-BathMouse.c **** 
 1650               		.loc 1 149 0
 1651 0090 1092 0000 		sts RunBootloader,__zero_reg__
 1652               	.L145:
 151:Caterina-BathMouse.c **** 	}
 1653               		.loc 1 151 0
 1654 0094 0E94 0000 		call LEDPulse
 1655               	.LVL135:
 1656 0098 00C0      		rjmp .L144
 1657               	.L156:
 1658               	.LBB192:
 1659               	.LBB193:
 1660               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1661               		.loc 5 182 0
 1662 009a 8091 E000 		lds r24,224
 1663 009e 8160      		ori r24,lo8(1)
 1664 00a0 8093 E000 		sts 224,r24
 1665               	.LBE193:
 1666               	.LBE192:
 158:Caterina-BathMouse.c **** }
 1667               		.loc 1 158 0
 1668 00a4 0E94 0000 		call StartSketch
 1669               	.LVL136:
 159:Caterina-BathMouse.c **** 
 1670               		.loc 1 159 0
 1671 00a8 80E0      		ldi r24,0
 1672 00aa 90E0      		ldi r25,0
 1673 00ac 0895      		ret
 1674               		.cfi_endproc
 1675               	.LFE101:
 1677               		.comm	LLEDPulse,2,1
 1678               	.global	bootKeyPtr
 1679               		.section	.rodata
 1682               	bootKeyPtr:
 1683 0000 0008      		.word	2048
 1684               	.global	bootKey
 1685               		.data
 1688               	bootKey:
 1689 0000 7777      		.word	30583
 1690               	.global	Timeout
 1691               		.section .bss
 1694               	Timeout:
 1695 0000 0000      		.zero	2
 1696               	.global	RxLEDPulse
 1699               	RxLEDPulse:
 1700 0002 0000      		.zero	2
 1701               	.global	TxLEDPulse
 1704               	TxLEDPulse:
 1705 0004 0000      		.zero	2
 1706               		.data
 1709               	RunBootloader:
 1710 0002 01        		.byte	1
 1711               		.local	CurrAddress
 1712               		.comm	CurrAddress,4,1
 1715               	LineEncoding:
 1716 0003 00        		.byte	0
 1717 0004 00        		.byte	0
 1718 0005 00        		.byte	0
 1719 0006 00        		.byte	0
 1720 0007 00        		.byte	0
 1721 0008 00        		.byte	0
 1722 0009 08        		.byte	8
 1723               		.text
 1724               	.Letext0:
 1725               		.file 6 "/usr/lib/avr/include/stdint.h"
 1726               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1727               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1728               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1729               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1730               		.file 11 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1731               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina-BathMouse.c
     /tmp/ccWi2fvn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccWi2fvn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccWi2fvn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccWi2fvn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWi2fvn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccWi2fvn.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/ccWi2fvn.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/ccWi2fvn.s:1704   .bss:0000000000000004 TxLEDPulse
     /tmp/ccWi2fvn.s:150    .text.StartSketch:0000000000000000 StartSketch
     /tmp/ccWi2fvn.s:192    .text.LEDPulse:0000000000000000 LEDPulse
                            *COM*:0000000000000002 LLEDPulse
     /tmp/ccWi2fvn.s:237    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccWi2fvn.s:322    .text.__vector_17:0000000000000000 __vector_17
     /tmp/ccWi2fvn.s:1699   .bss:0000000000000002 RxLEDPulse
     /tmp/ccWi2fvn.s:1694   .bss:0000000000000000 Timeout
     /tmp/ccWi2fvn.s:427    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccWi2fvn.s:470    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccWi2fvn.s:1715   .data:0000000000000003 LineEncoding
     /tmp/ccWi2fvn.s:555    .text.CDC_Task:0000000000000000 CDC_Task
                             .bss:0000000000000006 CurrAddress
     /tmp/ccWi2fvn.s:1522   .text.startup.main:0000000000000000 main
     /tmp/ccWi2fvn.s:1688   .data:0000000000000000 bootKey
     /tmp/ccWi2fvn.s:1709   .data:0000000000000002 RunBootloader
     /tmp/ccWi2fvn.s:1682   .rodata:0000000000000000 bootKeyPtr

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_USBTask
__do_copy_data
__do_clear_bss
